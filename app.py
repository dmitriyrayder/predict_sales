import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from prophet import Prophet
from sklearn.metrics import mean_absolute_error, mean_squared_error, mean_absolute_percentage_error
from scipy.signal import savgol_filter
import warnings
warnings.filterwarnings('ignore')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üè™ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—ñ–≤", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        background: linear-gradient(120deg, #1f77b4, #667eea);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-align: center;
        margin-bottom: 2rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }
    
    .metric-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1.5rem;
        border-radius: 15px;
        color: white;
        text-align: center;
        margin: 0.5rem 0;
        box-shadow: 0 8px 16px rgba(0,0,0,0.2);
        transition: transform 0.3s ease;
    }
    
    .metric-container:hover {
        transform: translateY(-5px);
        box-shadow: 0 12px 24px rgba(0,0,0,0.3);
    }
    
    .insight-card {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        padding: 1.2rem;
        border-radius: 12px;
        color: white;
        margin: 0.5rem 0;
        box-shadow: 0 6px 12px rgba(0,0,0,0.15);
        border-left: 5px solid #fff;
    }
    
    .problem-card {
        background: linear-gradient(135deg, #ff6b6b 0%, #feca57 100%);
        padding: 1.2rem;
        border-radius: 12px;
        margin: 0.5rem 0;
        border-left: 5px solid #ee5a6f;
        box-shadow: 0 6px 12px rgba(0,0,0,0.15);
        color: white;
        font-weight: 500;
    }
    
    .accuracy-card {
        background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        box-shadow: 0 8px 16px rgba(0,0,0,0.2);
        color: white;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data
def load_and_validate_data(uploaded_file):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞"""
    try:
        progress_bar = st.progress(0)
        progress_bar.progress(25)
        
        df = pd.read_excel(uploaded_file)
        progress_bar.progress(50)
        
        required_cols = ['Magazin', 'Datasales', 'Art', 'Describe', 'Model', 'Segment', 'Price', 'Qty', 'Sum']
        missing_cols = [col for col in required_cols if col not in df.columns]
        
        if missing_cols:
            st.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_cols}")
            return None
            
        progress_bar.progress(75)
        
        df['Datasales'] = pd.to_datetime(df['Datasales'], errors='coerce', dayfirst=True)
        df = df.dropna(subset=['Datasales']).sort_values('Datasales')
        df = df[(df['Qty'] >= 0) & (df['Price'] > 0)]
        
        progress_bar.progress(100)
        progress_bar.empty()
        
        st.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
        return df
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        return None

def show_data_statistics(df):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞–Ω–Ω—ã—Ö"""
    st.markdown("## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown(
            f"""<div class="metric-container">
                <h3>üì¶ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π</h3>
                <h2>{len(df):,}</h2>
            </div>""", 
            unsafe_allow_html=True
        )
        
    with col2:
        st.markdown(
            f"""<div class="metric-container">
                <h3>üè∑Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤</h3>
                <h2>{df['Art'].nunique():,}</h2>
            </div>""", 
            unsafe_allow_html=True
        )
        
    with col3:
        st.markdown(
            f"""<div class="metric-container">
                <h3>üè™ –ú–∞–≥–∞–∑–∏–Ω–æ–≤</h3>
                <h2>{df['Magazin'].nunique()}</h2>
            </div>""", 
            unsafe_allow_html=True
        )
        
    with col4:
        st.markdown(
            f"""<div class="metric-container">
                <h3>üìÇ –°–µ–≥–º–µ–Ω—Ç–æ–≤</h3>
                <h2>{df['Segment'].nunique()}</h2>
            </div>""", 
            unsafe_allow_html=True
        )
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.info(f"üìÖ **–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö**: {df['Datasales'].min().date()} - {df['Datasales'].max().date()}")
    with col2:
        st.info(f"üí∞ **–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞**: {df['Sum'].sum():,.0f} –ì–†–ù")
    with col3:
        st.info(f"üìà **–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏/–¥–µ–Ω—å**: {df.groupby('Datasales')['Qty'].sum().mean():.1f} —à—Ç.")

def remove_outliers_iqr(data, multiplier=1.5):
    """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–æ—Å—ã –º–µ—Ç–æ–¥–æ–º IQR"""
    Q1 = data['y'].quantile(0.25)
    Q3 = data['y'].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - multiplier * IQR
    upper_bound = Q3 + multiplier * IQR
    
    # –ó–∞–º–µ–Ω—è–µ–º –≤—ã–±—Ä–æ—Å—ã –Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã
    data_cleaned = data.copy()
    data_cleaned['y'] = data_cleaned['y'].clip(lower=lower_bound, upper=upper_bound)
    return data_cleaned

def smooth_data(data, method='rolling', window=7):
    """–°–≥–ª–∞–∂–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
    data_smooth = data.copy()
    
    if method == 'rolling':
        # –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
        data_smooth['y'] = data['y'].rolling(window=window, min_periods=1, center=True).mean()
    elif method == 'ewm':
        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
        data_smooth['y'] = data['y'].ewm(span=window, adjust=False).mean()
    elif method == 'savgol':
        # –§–∏–ª—å—Ç—Ä –°–∞–≤–∏—Ü–∫–æ–≥–æ-–ì–æ–ª–µ—è
        if len(data) >= window:
            data_smooth['y'] = savgol_filter(data['y'], window_length=min(window, len(data)//2*2-1), polyorder=2)
    
    return data_smooth

def prepare_prophet_data(df, target_col='Qty', remove_outliers=False, smooth_method=None, smooth_window=7):
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è Prophet —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—ã–±—Ä–æ—Å–æ–≤ –∏ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ–º"""
    prophet_df = df.groupby('Datasales')[target_col].sum().reset_index()
    prophet_df.columns = ['ds', 'y']
    
    original_df = prophet_df.copy()
    
    # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–æ—Å—ã
    if remove_outliers:
        prophet_df = remove_outliers_iqr(prophet_df)
    
    # –°–≥–ª–∞–∂–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if smooth_method and smooth_method != 'none':
        prophet_df = smooth_data(prophet_df, method=smooth_method, window=smooth_window)
    
    return prophet_df, original_df

def train_prophet_model(train_data, periods=30):
    """–û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å Prophet"""
    try:
        model = Prophet(
            yearly_seasonality=True,
            weekly_seasonality=True,
            daily_seasonality=False,
            seasonality_mode='multiplicative',
            changepoint_prior_scale=0.05,
            interval_width=0.8
        )
        
        model.add_country_holidays(country_name='UA')
        
        with st.spinner('ü§ñ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ Prophet...'):
            model.fit(train_data)
            
        future = model.make_future_dataframe(periods=periods)
        forecast = model.predict(future)
        
        return model, forecast
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
        return None, None

def plot_data_preprocessing(original_data, processed_data, title="–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    fig = go.Figure()
    
    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    fig.add_trace(go.Scatter(
        x=original_data['ds'],
        y=original_data['y'],
        mode='markers',
        name='üìä –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
        marker=dict(size=6, color='rgba(99, 110, 250, 0.4)', symbol='circle'),
        hovertemplate='<b>–î–∞—Ç–∞:</b> %{x}<br><b>–ü—Ä–æ–¥–∞–∂–∏:</b> %{y}<extra></extra>'
    ))
    
    # –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    fig.add_trace(go.Scatter(
        x=processed_data['ds'],
        y=processed_data['y'],
        mode='lines+markers',
        name='‚ú® –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
        line=dict(color='#00CC96', width=3),
        marker=dict(size=8, symbol='diamond'),
        hovertemplate='<b>–î–∞—Ç–∞:</b> %{x}<br><b>–ü—Ä–æ–¥–∞–∂–∏:</b> %{y:.1f}<extra></extra>'
    ))
    
    fig.update_layout(
        title={'text': f'<b>{title}</b>', 'y': 0.95, 'x': 0.5, 'xanchor': 'center', 'yanchor': 'top', 'font': {'size': 20}},
        xaxis=dict(title='<b>–î–∞—Ç–∞</b>', showgrid=True, gridwidth=1, gridcolor='rgba(128,128,128,0.2)'),
        yaxis=dict(title='<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂</b>', showgrid=True, gridwidth=1, gridcolor='rgba(128,128,128,0.2)'),
        hovermode='x unified',
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1, bgcolor='rgba(255,255,255,0.8)'),
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='rgba(0,0,0,0)',
        font=dict(family="Arial", size=12),
        height=500
    )
    
    return fig

def calculate_model_accuracy(train_data, model):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
    try:
        # –î–µ–ª–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        forecast = model.predict(train_data)
        
        y_true = train_data['y'].values
        y_pred = forecast['yhat'].values
        
        # –£–±–∏—Ä–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        y_pred = np.maximum(y_pred, 0)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        mae = mean_absolute_error(y_true, y_pred)
        rmse = np.sqrt(mean_squared_error(y_true, y_pred))
        
        # MAPE - –∏–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        mask = y_true != 0
        if mask.sum() > 0:
            mape = np.mean(np.abs((y_true[mask] - y_pred[mask]) / y_true[mask])) * 100
        else:
            mape = 0
        
        # R¬≤ score
        ss_res = np.sum((y_true - y_pred) ** 2)
        ss_tot = np.sum((y_true - np.mean(y_true)) ** 2)
        r2 = 1 - (ss_res / ss_tot) if ss_tot != 0 else 0
        
        # –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        mean_error_pct = (mae / np.mean(y_true)) * 100 if np.mean(y_true) > 0 else 0
        
        return {
            'MAE': mae,
            'RMSE': rmse,
            'MAPE': mape,
            'R2': r2,
            'Mean_Error_Pct': mean_error_pct
        }
    except Exception as e:
        st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏: {str(e)}")
        return None

def show_accuracy_table(accuracy_metrics):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏"""
    if accuracy_metrics is None:
        return
    
    st.markdown("## üéØ –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
    mape = accuracy_metrics['MAPE']
    if mape < 10:
        quality = "üü¢ –û—Ç–ª–∏—á–Ω–æ"
        quality_desc = "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å"
        recommendation = "–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"
    elif mape < 20:
        quality = "üü° –•–æ—Ä–æ—à–æ"
        quality_desc = "–•–æ—Ä–æ—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å"
        recommendation = "–ú–æ–¥–µ–ª—å –ø—Ä–∏–≥–æ–¥–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
    elif mape < 30:
        quality = "üü† –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
        quality_desc = "–ü—Ä–∏–µ–º–ª–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å"
        recommendation = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"
    else:
        quality = "üî¥ –ù–∏–∑–∫–∞—è"
        quality_desc = "–¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ"
        recommendation = "‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø: –≤–∫–ª—é—á–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ –∏ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ (—Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ, 7 –¥–Ω–µ–π)"
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        metrics_df = pd.DataFrame({
            'üìä –ú–µ—Ç—Ä–∏–∫–∞': [
                'MAE (–°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞)',
                'RMSE (–ö–æ—Ä–µ–Ω—å –∏–∑ —Å—Ä–µ–¥–Ω–µ–π –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π –æ—à–∏–±–∫–∏)',
                'MAPE (–°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –æ—à–∏–±–∫–∞)',
                'R¬≤ (–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏)',
                '–°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ (%)'
            ],
            'üìà –ó–Ω–∞—á–µ–Ω–∏–µ': [
                f"{accuracy_metrics['MAE']:.2f}",
                f"{accuracy_metrics['RMSE']:.2f}",
                f"{accuracy_metrics['MAPE']:.2f}%",
                f"{accuracy_metrics['R2']:.4f}",
                f"{accuracy_metrics['Mean_Error_Pct']:.2f}%"
            ],
            'üí° –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è': [
                '–°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö',
                '–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∫ –±–æ–ª—å—à–∏–º –æ—à–∏–±–∫–∞–º',
                '–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç —Ñ–∞–∫—Ç–∞',
                '–ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ (0-1, –≤—ã—à–µ = –ª—É—á—à–µ)',
                '–°—Ä–µ–¥–Ω—è—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å'
            ]
        })
        
        st.dataframe(metrics_df, use_container_width=True, hide_index=True)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if mape >= 30:
            st.warning(f"üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: {recommendation}")
        else:
            st.info(f"üí° **–°—Ç–∞—Ç—É—Å**: {recommendation}")
    
    with col2:
        st.markdown(
            f"""<div class="accuracy-card">
                <h3 style="margin:0; font-size: 1.5rem;">–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞</h3>
                <h2 style="margin:0.5rem 0; font-size: 2rem;">{quality}</h2>
                <p style="margin:0; font-size: 1.1rem;">{quality_desc}</p>
                <hr style="border-color: rgba(255,255,255,0.3); margin: 1rem 0;">
                <p style="margin:0; font-size: 0.9rem;">MAPE: {mape:.1f}%</p>
                <p style="margin:0; font-size: 0.9rem;">R¬≤: {accuracy_metrics['R2']:.3f}</p>
            </div>""",
            unsafe_allow_html=True
        )

def calculate_segment_volatility(df, selected_magazin, selected_segment):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞"""
    filtered = df.copy()
    if selected_magazin != '–í—Å–µ':
        filtered = filtered[filtered['Magazin'] == selected_magazin]
    if selected_segment != '–í—Å–µ':
        filtered = filtered[filtered['Segment'] == selected_segment]
        
    daily_sales = filtered.groupby('Datasales')['Qty'].sum()
    if len(daily_sales) < 2:
        return 0.2
    
    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ (–±–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –º–µ—Ä–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏)
    mean_sales = daily_sales.mean()
    if mean_sales == 0:
        return 0.2
    
    volatility = daily_sales.std() / mean_sales
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
    return np.clip(volatility, 0.1, 0.5)

def get_forecast_scenarios(forecast, segment_volatility=0.2):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    realistic = forecast['yhat'].values
    
    if 'yhat_lower' in forecast.columns and 'yhat_upper' in forecast.columns:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã Prophet
        pessimistic = forecast['yhat_lower'].values
        optimistic = forecast['yhat_upper'].values
    else:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        pessimistic = realistic * (1 - segment_volatility * 1.5)
        optimistic = realistic * (1 + segment_volatility)
    
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    pessimistic = np.maximum(pessimistic, 0)
    realistic = np.maximum(realistic, 0)
    optimistic = np.maximum(optimistic, 0)
    
    return realistic, optimistic, pessimistic

def plot_forecast(df, forecast, title):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    fig = go.Figure()
    
    fig.add_trace(go.Scatter(
        x=df['ds'], 
        y=df['y'],
        mode='lines+markers',
        name='üìä –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ',
        line=dict(color='#636EFA', width=3),
        marker=dict(size=6, symbol='circle'),
        hovertemplate='<b>–î–∞—Ç–∞:</b> %{x}<br><b>–ü—Ä–æ–¥–∞–∂–∏:</b> %{y}<extra></extra>'
    ))
    
    forecast_data = forecast[forecast['ds'] > df['ds'].max()]
    
    fig.add_trace(go.Scatter(
        x=forecast_data['ds'], 
        y=forecast_data['yhat'],
        mode='lines+markers',
        name='üîÆ –ü—Ä–æ–≥–Ω–æ–∑',
        line=dict(color='#00CC96', width=4, dash='dash'),
        marker=dict(size=8, symbol='diamond'),
        hovertemplate='<b>–î–∞—Ç–∞:</b> %{x}<br><b>–ü—Ä–æ–≥–Ω–æ–∑:</b> %{y:.0f}<extra></extra>'
    ))
    
    if 'yhat_lower' in forecast_data.columns:
        fig.add_trace(go.Scatter(
            x=forecast_data['ds'],
            y=forecast_data['yhat_upper'],
            fill=None,
            mode='lines',
            line_color='rgba(0,0,0,0)',
            showlegend=False
        ))
        
        fig.add_trace(go.Scatter(
            x=forecast_data['ds'],
            y=forecast_data['yhat_lower'],
            fill='tonexty',
            mode='lines',
            fillcolor='rgba(0, 204, 150, 0.2)',
            line_color='rgba(0,0,0,0)',
            name='üìà –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (80%)',
            hovertemplate='<b>–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞:</b> %{y:.0f}<extra></extra>'
        ))
    
    fig.update_layout(
        title={'text': f'<b>{title}</b>', 'y': 0.95, 'x': 0.5, 'xanchor': 'center', 'yanchor': 'top', 'font': {'size': 24, 'color': '#1f77b4'}},
        xaxis=dict(title='<b>–î–∞—Ç–∞</b>', showgrid=True, gridwidth=1, gridcolor='rgba(128,128,128,0.2)', tickformat='%Y-%m-%d'),
        yaxis=dict(title='<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂</b>', showgrid=True, gridwidth=1, gridcolor='rgba(128,128,128,0.2)'),
        hovermode='x unified',
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1, bgcolor='rgba(255,255,255,0.8)'),
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='rgba(0,0,0,0)',
        font=dict(family="Arial", size=12),
        height=600
    )
    
    return fig

def plot_prophet_components(model, forecast):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Prophet"""
    from prophet.plot import plot_components_plotly
    fig = plot_components_plotly(model, forecast)
    fig.update_layout(
        title_text="<b>üìà –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞</b>",
        title_x=0.5,
        font=dict(family="Arial", size=12),
        plot_bgcolor='rgba(0,0,0,0)',
        height=800
    )
    return fig

def plot_monthly_analysis_with_forecast(df, selected_magazin, selected_segment, model, forecast_days, remove_outliers=False, smooth_method=None):
    """–°–æ–∑–¥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ—Å—è—Ü–∞–º —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º"""
    filtered_df = df.copy()
    if selected_magazin != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['Magazin'] == selected_magazin]
    if selected_segment != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['Segment'] == selected_segment]
    
    # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    filtered_df['year_month'] = filtered_df['Datasales'].dt.to_period('M')
    monthly_data = filtered_df.groupby('year_month').agg({'Sum': 'sum', 'Qty': 'sum'}).reset_index()
    monthly_data['year_month'] = monthly_data['year_month'].astype(str)
    monthly_data['type'] = '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ'
    
    # –ü—Ä–æ–≥–Ω–æ–∑
    if model is not None:
        prophet_data, _ = prepare_prophet_data(filtered_df, remove_outliers=remove_outliers, smooth_method=smooth_method)
        future = model.make_future_dataframe(periods=forecast_days)
        forecast_full = model.predict(future)
        
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã
        forecast_future = forecast_full[forecast_full['ds'] > prophet_data['ds'].max()].copy()
        
        # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
        avg_price = (filtered_df['Sum'] / filtered_df['Qty']).mean() if len(filtered_df) > 0 and filtered_df['Qty'].sum() > 0 else 0
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –º–µ—Å—è—Ü–∞–º
        forecast_future['year_month'] = pd.to_datetime(forecast_future['ds']).dt.to_period('M')
        forecast_monthly = forecast_future.groupby('year_month').agg({'yhat': 'sum'}).reset_index()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Ä—É—á–∫—É: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ * —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
        forecast_monthly['Qty'] = forecast_monthly['yhat']
        forecast_monthly['Sum'] = forecast_monthly['yhat'] * avg_price
        forecast_monthly['year_month'] = forecast_monthly['year_month'].astype(str)
        forecast_monthly['type'] = '–ü—Ä–æ–≥–Ω–æ–∑'
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º
        combined_data = pd.concat([
            monthly_data[['year_month', 'Sum', 'type']],
            forecast_monthly[['year_month', 'Sum', 'type']]
        ], ignore_index=True)
    else:
        combined_data = monthly_data[['year_month', 'Sum', 'type']]
    
    # –ì—Ä–∞—Ñ–∏–∫
    fig = go.Figure()
    
    hist_data = combined_data[combined_data['type'] == '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ']
    fig.add_trace(go.Bar(
        x=hist_data['year_month'],
        y=hist_data['Sum'],
        name='üí∞ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –≤—ã—Ä—É—á–∫–∞',
        marker_color='#636EFA',
        text=hist_data['Sum'].round(0),
        texttemplate='%{text:,.0f}',
        textposition='outside',
        hovertemplate='<b>–ú–µ—Å—è—Ü:</b> %{x}<br><b>–í—ã—Ä—É—á–∫–∞:</b> %{y:,.0f} –ì–†–ù<extra></extra>'
    ))
    
    if model is not None:
        forecast_data = combined_data[combined_data['type'] == '–ü—Ä–æ–≥–Ω–æ–∑']
        fig.add_trace(go.Bar(
            x=forecast_data['year_month'],
            y=forecast_data['Sum'],
            name='üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏',
            marker_color='#00CC96',
            marker_pattern_shape="/",
            text=forecast_data['Sum'].round(0),
            texttemplate='%{text:,.0f}',
            textposition='outside',
            hovertemplate='<b>–ú–µ—Å—è—Ü:</b> %{x}<br><b>–ü—Ä–æ–≥–Ω–æ–∑:</b> %{y:,.0f} –ì–†–ù<extra></extra>'
        ))
    
    fig.update_layout(
        title=f'<b>üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ—Å—è—Ü–∞–º —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º - {selected_segment}</b>',
        title_x=0.5,
        xaxis_title='<b>–ú–µ—Å—è—Ü</b>',
        yaxis_title='<b>–í—ã—Ä—É—á–∫–∞ (–ì–†–ù)</b>',
        plot_bgcolor='rgba(0,0,0,0)',
        font=dict(family="Arial", size=12),
        barmode='group',
        height=500
    )
    
    return fig

def get_top_models_by_segment(df, selected_magazin):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø –º–æ–¥–µ–ª–µ–π –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º"""
    if selected_magazin != '–í—Å–µ':
        df = df[df['Magazin'] == selected_magazin]
        
    segments_top_models = {}
    
    for segment in df['Segment'].unique():
        segment_data = df[df['Segment'] == segment]
        
        model_stats = segment_data.groupby('Model').agg({
            'Qty': 'sum',
            'Sum': 'sum',
            'Price': 'mean'
        }).reset_index()
        
        top_models = model_stats.nlargest(10, 'Qty')
        top_models['Price'] = top_models['Price'].round(0)
        top_models['Qty'] = top_models['Qty'].astype(int)
        top_models['Sum'] = top_models['Sum'].round(0)
        
        segments_top_models[segment] = top_models
        
    return segments_top_models

def generate_insights(df, forecast_data, selected_magazin, selected_segment):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Å–∞–π—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    insights = []
    problems = []
    
    filtered_df = df.copy()
    if selected_magazin != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['Magazin'] == selected_magazin]
    if selected_segment != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['Segment'] == selected_segment]
    
    prophet_data, _ = prepare_prophet_data(filtered_df)
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–æ—Å—Ç–∞ –ø—Ä–æ–¥–∞–∂
    if len(prophet_data) >= 60:
        recent_data = prophet_data.tail(30)['y'].mean()
        older_data = prophet_data.iloc[-60:-30]['y'].mean()
        
        if older_data > 0:
            growth_rate = (recent_data / older_data - 1) * 100
            
            if growth_rate > 10:
                insights.append(f"üìà **–†–û–°–¢ –ü–†–û–î–ê–ñ**: –ù–∞–±–ª—é–¥–∞–µ—Ç—Å—è —Ä–æ—Å—Ç –Ω–∞ {growth_rate:.1f}%. –£–≤–µ–ª–∏—á—å—Ç–µ –∑–∞–∫—É–ø–∫–∏!")
            elif growth_rate < -10:
                insights.append(f"üìâ **–°–ù–ò–ñ–ï–ù–ò–ï –ü–†–û–î–ê–ñ**: –ü–∞–¥–µ–Ω–∏–µ –Ω–∞ {abs(growth_rate):.1f}%. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏!")
                problems.append("‚ö†Ô∏è **–ü–†–û–ë–õ–ï–ú–ê**: –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂")
    elif len(prophet_data) >= 30:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—å—à–µ 60 –¥–Ω–µ–π, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –æ–±—â–∏–º —Å—Ä–µ–¥–Ω–∏–º
        recent_data = prophet_data.tail(15)['y'].mean()
        overall_mean = prophet_data['y'].mean()
        
        if overall_mean > 0:
            growth_rate = (recent_data / overall_mean - 1) * 100
            if abs(growth_rate) > 10:
                trend_text = "—Ä–æ—Å—Ç" if growth_rate > 0 else "—Å–Ω–∏–∂–µ–Ω–∏–µ"
                insights.append(f"üìä **–¢–†–ï–ù–î**: {trend_text.capitalize()} –Ω–∞ {abs(growth_rate):.1f}% –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–µ–≥–æ")
    
    # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    if len(prophet_data) > 1:
        volatility = calculate_segment_volatility(df, selected_magazin, selected_segment)
        
        if volatility > 0.4:
            insights.append("‚ö° **–í–´–°–û–ö–ê–Ø –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–¨**: –£–≤–µ–ª–∏—á—å—Ç–µ —Å—Ç—Ä–∞—Ö–æ–≤—ã–µ –∑–∞–ø–∞—Å—ã –Ω–∞ 30%")
            problems.append("üéØ **–ù–ï–°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–¨**: –°–ª–æ–∂–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏")
        elif volatility < 0.15:
            insights.append("‚úÖ **–°–¢–ê–ë–ò–õ–¨–ù–´–ï –ü–†–û–î–ê–ñ–ò**: –ú–æ–∂–Ω–æ —Ç–æ—á–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫—É–ø–∫–∏")
    
    # –ü—Ä–æ–≥–Ω–æ–∑ —Ç—Ä–µ–Ω–¥–∞
    if len(forecast_data) > 7:
        first_week = forecast_data.head(7)['yhat'].mean()
        last_week = forecast_data.tail(7)['yhat'].mean()
        
        if first_week > 0:
            forecast_trend = last_week / first_week
            
            if forecast_trend > 1.1:
                insights.append("üöÄ **–ü–†–û–ì–ù–û–ó –†–û–°–¢–ê**: –û–∂–∏–¥–∞–µ—Ç—Å—è —Ä–æ—Å—Ç >10%. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—é —Å–ø—Ä–æ—Å–∞!")
            elif forecast_trend < 0.9:
                insights.append("‚¨áÔ∏è **–ü–†–û–ì–ù–û–ó –°–ü–ê–î–ê**: –í–æ–∑–º–æ–∂–Ω–æ —Å–Ω–∏–∂–µ–Ω–∏–µ >10%. –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–æ-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    if not insights:
        insights.append("üìä **–°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø**: –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
    
    return insights, problems

def show_forecast_statistics(filtered_df, forecast, forecast_days, selected_magazin, selected_segment, df):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    st.markdown("## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞")
    
    historical_data = filtered_df.groupby('Datasales')['Qty'].sum().reset_index()
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    if len(historical_data) >= forecast_days:
        hist_qty = historical_data.tail(forecast_days)['Qty'].sum()
    else:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—å—à–µ, –±–µ—Ä–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
        hist_qty = historical_data['Qty'].sum()
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
    avg_price = (filtered_df['Sum'] / filtered_df['Qty']).mean() if len(filtered_df) > 0 and filtered_df['Qty'].sum() > 0 else 0
    hist_sum = hist_qty * avg_price
    
    segment_volatility = calculate_segment_volatility(df, selected_magazin, selected_segment)
    forecast_period = forecast.tail(forecast_days) if len(forecast) > forecast_days else forecast
    
    realistic, optimistic, pessimistic = get_forecast_scenarios(forecast_period, segment_volatility)
    
    realistic_qty = realistic.sum()
    optimistic_qty = optimistic.sum()
    pessimistic_qty = pessimistic.sum()
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### üì¶ –ü—Ä–æ–≥–Ω–æ–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")
        
        scenarios_df = pd.DataFrame({
            '–°—Ü–µ–Ω–∞—Ä–∏–π': ['üìä –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π', 'üò∞ –ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π', 'üéØ –†–µ–∞–ª—å–Ω—ã–π', 'üöÄ –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π'],
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': [f"{int(hist_qty):,}", f"{int(pessimistic_qty):,}", 
                          f"{int(realistic_qty):,}", f"{int(optimistic_qty):,}"],
            '–ò–∑–º–µ–Ω–µ–Ω–∏–µ': [
                '‚Äî',
                f"{((pessimistic_qty/hist_qty - 1) * 100):+.1f}%" if hist_qty > 0 else '‚Äî',
                f"{((realistic_qty/hist_qty - 1) * 100):+.1f}%" if hist_qty > 0 else '‚Äî',
                f"{((optimistic_qty/hist_qty - 1) * 100):+.1f}%" if hist_qty > 0 else '‚Äî'
            ]
        })
        
        st.dataframe(scenarios_df, use_container_width=True, hide_index=True)
    
    with col2:
        st.markdown("### üí∞ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏")
        
        revenue_df = pd.DataFrame({
            '–°—Ü–µ–Ω–∞—Ä–∏–π': ['üìä –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π', 'üò∞ –ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π', 'üéØ –†–µ–∞–ª—å–Ω—ã–π', 'üöÄ –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π'],
            '–í—ã—Ä—É—á–∫–∞ (–ì–†–ù)': [
                f"{hist_sum:,.0f}",
                f"{pessimistic_qty * avg_price:,.0f}",
                f"{realistic_qty * avg_price:,.0f}",
                f"{optimistic_qty * avg_price:,.0f}"
            ]
        })
        
        st.dataframe(revenue_df, use_container_width=True, hide_index=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.info(f"üìä **–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å**: {segment_volatility:.1%}")
    with col2:
        st.info(f"üí∞ **–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞**: {avg_price:.0f} –ì–†–ù")
    with col3:
        st.info(f"üìÖ **–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞**: {forecast_days} –¥–Ω–µ–π")

def main():
    st.markdown('<h1 class="main-header">üè™ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂</h1>', unsafe_allow_html=True)
    
    with st.sidebar:
        st.markdown("## ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        uploaded_file = st.file_uploader(
            "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", 
            type=['xlsx', 'xls'],
            help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: Magazin, Datasales, Art, Describe, Model, Segment, Price, Qty, Sum"
        )
    
    if uploaded_file is None:
        st.markdown("""
        ## üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂!
        
        ### üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:
        
        1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel** —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
        2. **–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã** –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–º–∞–≥–∞–∑–∏–Ω, —Å–µ–≥–º–µ–Ω—Ç, –ø–µ—Ä–∏–æ–¥)
        3. **–ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑** —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏ Prophet
        4. **–ò–∑—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏** –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂
        
        ### üìä –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º:
        """)
        
        required_columns = pd.DataFrame({
            '–ö–æ–ª–æ–Ω–∫–∞': ['Magazin', 'Datasales', 'Art', 'Describe', 'Model', 'Segment', 'Price', 'Qty', 'Sum'],
            '–û–ø–∏—Å–∞–Ω–∏–µ': [
                '–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞',
                '–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏',
                '–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞',
                '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
                '–ú–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–∞',
                '–°–µ–≥–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–∞',
                '–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É',
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                '–û–±—â–∞—è —Å—É–º–º–∞'
            ],
            '–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö': ['–¢–µ–∫—Å—Ç', '–î–∞—Ç–∞', '–¢–µ–∫—Å—Ç', '–¢–µ–∫—Å—Ç', '–¢–µ–∫—Å—Ç', '–¢–µ–∫—Å—Ç', '–ß–∏—Å–ª–æ', '–ß–∏—Å–ª–æ', '–ß–∏—Å–ª–æ']
        })
        
        st.dataframe(required_columns, use_container_width=True, hide_index=True)
        
        st.markdown("""
        ### üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:
        - üìà **–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ** –ø—Ä–æ–¥–∞–∂ –Ω–∞ 7, 14 –∏–ª–∏ 30 –¥–Ω–µ–π
        - üéØ **–¢—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è** –ø—Ä–æ–≥–Ω–æ–∑–∞ (–ø–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π, —Ä–µ–∞–ª—å–Ω—ã–π, –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π)
        - üìä **–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤** –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
        - üèÜ **–¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤** –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
        - üí° **–£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏** –¥–ª—è –±–∏–∑–Ω–µ—Å–∞
        - üéØ **–ú–µ—Ç—Ä–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏** –º–æ–¥–µ–ª–∏ (RMSE, MAE, MAPE, R¬≤)
        """)
        
        return
    
    df = load_and_validate_data(uploaded_file)
    
    if df is None:
        return
    
    show_data_statistics(df)
    
    st.markdown("## üéõÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        selected_magazin = st.selectbox(
            "üè™ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω",
            ['–í—Å–µ'] + sorted(df['Magazin'].unique().tolist()),
            help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –∏–ª–∏ '–í—Å–µ' –¥–ª—è –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
        )
    
    with col2:
        selected_segment = st.selectbox(
            "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç",
            ['–í—Å–µ'] + sorted(df['Segment'].unique().tolist()),
            help="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        )
    
    with col3:
        forecast_days = st.selectbox(
            "üìÖ –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞",
            [7, 14, 30],
            index=1,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"
        )
    
    # –ù–û–í–û–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    with st.expander("‚öôÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", expanded=False):
        st.markdown("### üßπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            remove_outliers = st.checkbox(
                "üéØ –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–æ—Å—ã",
                value=False,
                help="–£–¥–∞–ª—è–µ—Ç –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–º IQR –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏"
            )
        
        with col2:
            smooth_method = st.selectbox(
                "üìà –ú–µ—Ç–æ–¥ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è",
                ['none', 'rolling', 'ewm'],
                index=0,
                format_func=lambda x: {
                    'none': '‚ùå –ë–µ–∑ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è',
                    'rolling': 'üìä –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ',
                    'ewm': 'üìâ –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ'
                }[x],
                help="–°–≥–ª–∞–∂–∏–≤–∞–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞"
            )
        
        with col3:
            smooth_window = st.slider(
                "ü™ü –û–∫–Ω–æ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è",
                min_value=3,
                max_value=14,
                value=7,
                help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è",
                disabled=(smooth_method == 'none')
            )
    
    if st.button("üîÆ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", type="primary", use_container_width=True):
        filtered_df = df.copy()
        
        if selected_magazin != '–í—Å–µ':
            filtered_df = filtered_df[filtered_df['Magazin'] == selected_magazin]
        
        if selected_segment != '–í—Å–µ':
            filtered_df = filtered_df[filtered_df['Segment'] == selected_segment]
        
        if len(filtered_df) < 10:
            st.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è (–º–∏–Ω–∏–º—É–º 10 –∑–∞–ø–∏—Å–µ–π)")
            return
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        prophet_data, original_data = prepare_prophet_data(
            filtered_df, 
            remove_outliers=remove_outliers, 
            smooth_method=smooth_method if smooth_method != 'none' else None,
            smooth_window=smooth_window
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        if remove_outliers or (smooth_method and smooth_method != 'none'):
            st.markdown("## üßπ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                st.metric("–°—Ä–µ–¥–Ω–µ–µ", f"{original_data['y'].mean():.2f}")
                st.metric("Std. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", f"{original_data['y'].std():.2f}")
                st.metric("–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", f"{(original_data['y'].std()/original_data['y'].mean()*100):.1f}%")
            
            with col2:
                st.markdown("### ‚ú® –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                st.metric("–°—Ä–µ–¥–Ω–µ–µ", f"{prophet_data['y'].mean():.2f}", delta=f"{prophet_data['y'].mean() - original_data['y'].mean():.2f}")
                st.metric("Std. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", f"{prophet_data['y'].std():.2f}", delta=f"{prophet_data['y'].std() - original_data['y'].std():.2f}")
                st.metric("–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", f"{(prophet_data['y'].std()/prophet_data['y'].mean()*100):.1f}%", 
                         delta=f"{(prophet_data['y'].std()/prophet_data['y'].mean()*100) - (original_data['y'].std()/original_data['y'].mean()*100):.1f}%")
            
            fig_preprocessing = plot_data_preprocessing(original_data, prophet_data, "üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ vs –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            st.plotly_chart(fig_preprocessing, use_container_width=True)
        
        model, forecast = train_prophet_model(prophet_data, periods=forecast_days)
        
        if model is None or forecast is None:
            return
        
        st.success("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
        accuracy_metrics = calculate_model_accuracy(prophet_data, model)
        if accuracy_metrics:
            show_accuracy_table(accuracy_metrics)
        
        show_forecast_statistics(filtered_df, forecast, forecast_days, selected_magazin, selected_segment, df)
        
        st.markdown("## üìà –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂")
        
        fig_main = plot_forecast(
            prophet_data, 
            forecast, 
            f"–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ - {selected_magazin} / {selected_segment}"
        )
        st.plotly_chart(fig_main, use_container_width=True)
        
        st.markdown("## üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        
        fig_components = plot_prophet_components(model, forecast)
        st.plotly_chart(fig_components, use_container_width=True)
        
        st.markdown("## üìä –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –≤—ã—Ä—É—á–∫–∏")
        fig_monthly = plot_monthly_analysis_with_forecast(df, selected_magazin, selected_segment, model, forecast_days, remove_outliers, smooth_method if smooth_method != 'none' else None)
        st.plotly_chart(fig_monthly, use_container_width=True)
        
        st.markdown("## üèÜ –¢–æ–ø-10 –º–æ–¥–µ–ª–µ–π –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º")
        
        segments_top_models = get_top_models_by_segment(df, selected_magazin)
        
        if segments_top_models:
            tabs = st.tabs([f"üì¶ {segment}" for segment in segments_top_models.keys()])
            
            for tab, (segment, top_models) in zip(tabs, segments_top_models.items()):
                with tab:
                    if not top_models.empty:
                        display_df = top_models[['Model', 'Qty', 'Sum', 'Price']].rename(columns={
                            'Model': 'üè∑Ô∏è –ú–æ–¥–µ–ª—å',
                            'Qty': 'üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                            'Sum': 'üí∞ –í—ã—Ä—É—á–∫–∞ (–ì–†–ù)',
                            'Price': 'üíµ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞'
                        })
                        
                        st.dataframe(display_df, use_container_width=True, hide_index=True)
                    else:
                        st.info("üîç –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞")
        
        st.markdown("## üí° –ò–Ω—Å–∞–π—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        
        insights, problems = generate_insights(df, forecast, selected_magazin, selected_segment)
        
        if problems:
            st.markdown("### üö® –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
            for problem in problems:
                st.markdown(f'<div class="problem-card">{problem}</div>', unsafe_allow_html=True)
        
        st.markdown("### üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for insight in insights:
            st.markdown(f'<div class="insight-card">{insight}</div>', unsafe_allow_html=True)
        
        st.markdown("## üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –¥–Ω—è–º")
        
        forecast_display = forecast.tail(forecast_days).copy()
        segment_volatility = calculate_segment_volatility(df, selected_magazin, selected_segment)
        
        realistic, optimistic, pessimistic = get_forecast_scenarios(forecast_display, segment_volatility)
        
        detailed_forecast = pd.DataFrame({
            'üìÖ –î–∞—Ç–∞': pd.to_datetime(forecast_display['ds']).dt.strftime('%Y-%m-%d (%A)'),
            'üò∞ –ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π': pessimistic.round(0).astype(int),
            'üéØ –†–µ–∞–ª—å–Ω—ã–π': realistic.round(0).astype(int),
            'üöÄ –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π': optimistic.round(0).astype(int),
            'üìä –¢—Ä–µ–Ω–¥': forecast_display['trend'].round(0).astype(int)
        })
        
        st.dataframe(detailed_forecast, use_container_width=True, hide_index=True)
        
        st.markdown("## üìà –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            avg_daily_forecast = realistic.mean()
            st.metric(
                "üìä –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏/–¥–µ–Ω—å",
                f"{avg_daily_forecast:.0f}",
                delta=f"{avg_daily_forecast - prophet_data['y'].tail(30).mean():.0f}"
            )
        
        with col2:
            total_forecast = realistic.sum()
            st.metric(
                "üì¶ –û–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑",
                f"{total_forecast:.0f}",
                delta=f"{total_forecast - prophet_data['y'].tail(forecast_days).sum():.0f}"
            )
        
        with col3:
            avg_price = (filtered_df['Sum'] / filtered_df['Qty']).mean() if len(filtered_df) > 0 and filtered_df['Qty'].sum() > 0 else 0
            forecast_revenue = total_forecast * avg_price
            st.metric(
                "üí∞ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏",
                f"{forecast_revenue:,.0f} –ì–†–ù"
            )
        
        with col4:
            confidence_score = (1 - segment_volatility) * 100
            st.metric(
                "üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞",
                f"{confidence_score:.0f}%"
            )
        
        st.markdown("## üì• –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        col1, col2 = st.columns(2)
        
        with col1:
            export_data = detailed_forecast.copy()
            export_data['–ú–∞–≥–∞–∑–∏–Ω'] = selected_magazin
            export_data['–°–µ–≥–º–µ–Ω—Ç'] = selected_segment
            
            csv = export_data.to_csv(index=False)
            st.download_button(
                label="üìä –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ (CSV)",
                data=csv,
                file_name=f"forecast_{selected_magazin}_{selected_segment}_{forecast_days}days.csv",
                mime="text/csv",
                use_container_width=True
            )
        
        with col2:
            report = f"""
# –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–æ–¥–∞–∂

**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M')}
**–ú–∞–≥–∞–∑–∏–Ω:** {selected_magazin}
**–°–µ–≥–º–µ–Ω—Ç:** {selected_segment}
**–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞:** {forecast_days} –¥–Ω–µ–π

## –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
- **–û–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑:** {total_forecast:.0f} –µ–¥–∏–Ω–∏—Ü
- **–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏/–¥–µ–Ω—å:** {avg_daily_forecast:.0f} –µ–¥–∏–Ω–∏—Ü
- **–ü—Ä–æ–≥–Ω–æ–∑–Ω–∞—è –≤—ã—Ä—É—á–∫–∞:** {forecast_revenue:,.0f} –ì–†–ù
- **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞:** {confidence_score:.0f}%

## –ú–µ—Ç—Ä–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏:
- **MAE:** {accuracy_metrics['MAE']:.2f}
- **RMSE:** {accuracy_metrics['RMSE']:.2f}
- **MAPE:** {accuracy_metrics['MAPE']:.2f}%
- **R¬≤:** {accuracy_metrics['R2']:.4f}

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
{chr(10).join([f"- {insight}" for insight in insights])}
            """
            
            st.download_button(
                label="üìÑ –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç (TXT)",
                data=report,
                file_name=f"report_{selected_magazin}_{selected_segment}.txt",
                mime="text/plain",
                use_container_width=True
            )

if __name__ == "__main__":
    main()

