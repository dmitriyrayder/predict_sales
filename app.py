
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from prophet import Prophet
from sklearn.metrics import mean_absolute_error, mean_squared_error, mean_absolute_percentage_error, r2_score
from scipy.signal import savgol_filter
from io import BytesIO
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üè™ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        background: linear-gradient(120deg, #1f77b4, #667eea);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-align: center;
        margin-bottom: 2rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }
    
    .metric-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1.5rem;
        border-radius: 15px;
        color: white;
        text-align: center;
        margin: 0.5rem 0;
        box-shadow: 0 8px 16px rgba(0,0,0,0.2);
        transition: transform 0.3s ease;
    }
    
    .metric-container:hover {
        transform: translateY(-5px);
        box-shadow: 0 12px 24px rgba(0,0,0,0.3);
    }
    
    .insight-card {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        padding: 1.2rem;
        border-radius: 12px;
        color: white;
        margin: 0.5rem 0;
        box-shadow: 0 6px 12px rgba(0,0,0,0.15);
        border-left: 5px solid #fff;
    }
    
    .problem-card {
        background: linear-gradient(135deg, #ff6b6b 0%, #feca57 100%);
        padding: 1.2rem;
        border-radius: 12px;
        margin: 0.5rem 0;
        border-left: 5px solid #ee5a6f;
        box-shadow: 0 6px 12px rgba(0,0,0,0.15);
        color: white;
        font-weight: 500;
    }
    
    .accuracy-card {
        background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        box-shadow: 0 8px 16px rgba(0,0,0,0.2);
        color: white;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data
def load_and_validate_data(uploaded_file):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞"""
    try:
        progress_bar = st.progress(0)
        progress_bar.progress(25)
        
        df = pd.read_excel(uploaded_file)
        progress_bar.progress(50)
        
        required_cols = ['Magazin', 'Datasales', 'Art', 'Describe', 'Model', 'Segment', 'Price', 'Qty', 'Sum']
        missing_cols = [col for col in required_cols if col not in df.columns]
        
        if missing_cols:
            st.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_cols}")
            return None
            
        progress_bar.progress(75)
        
        df['Datasales'] = pd.to_datetime(df['Datasales'], errors='coerce', dayfirst=True)
        df = df.dropna(subset=['Datasales']).sort_values('Datasales')
        df = df[(df['Qty'] >= 0) & (df['Price'] > 0)]
        
        progress_bar.progress(100)
        progress_bar.empty()
        
        st.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
        return df
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        return None

def show_data_statistics(df):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞–Ω–Ω—ã—Ö"""
    st.markdown("## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown(
            f"""<div class="metric-container">
                <h3>üì¶ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π</h3>
                <h2>{len(df):,}</h2>
            </div>""", 
            unsafe_allow_html=True
        )
        
    with col2:
        st.markdown(
            f"""<div class="metric-container">
                <h3>üè∑Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤</h3>
                <h2>{df['Art'].nunique():,}</h2>
            </div>""", 
            unsafe_allow_html=True
        )
        
    with col3:
        st.markdown(
            f"""<div class="metric-container">
                <h3>üè™ –ú–∞–≥–∞–∑–∏–Ω–æ–≤</h3>
                <h2>{df['Magazin'].nunique()}</h2>
            </div>""", 
            unsafe_allow_html=True
        )
        
    with col4:
        st.markdown(
            f"""<div class="metric-container">
                <h3>üìÇ –°–µ–≥–º–µ–Ω—Ç–æ–≤</h3>
                <h2>{df['Segment'].nunique()}</h2>
            </div>""", 
            unsafe_allow_html=True
        )
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.info(f"üìÖ **–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö**: {df['Datasales'].min().date()} - {df['Datasales'].max().date()}")
    with col2:
        st.info(f"üí∞ **–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞**: {df['Sum'].sum():,.0f} –ì–†–ù")
    with col3:
        st.info(f"üìà **–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏/–¥–µ–Ω—å**: {df.groupby('Datasales')['Qty'].sum().mean():.1f} —à—Ç.")

def remove_outliers_iqr(data, multiplier=1.5):
    """–ò–°–ü–†–ê–í–õ–ï–ù–û: –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–æ—Å—ã –º–µ—Ç–æ–¥–æ–º IQR —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º –≥—Ä–∞–Ω–∏—Ü"""
    if len(data) < 4:
        return data
    
    Q1 = data.quantile(0.25)
    Q3 = data.quantile(0.75)
    IQR = Q3 - Q1
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≥—Ä–∞–Ω–∏—Ü
    lower_bound = Q1 - multiplier * IQR
    upper_bound = Q3 + multiplier * IQR
    
    return data.clip(lower=lower_bound, upper=upper_bound)

def smooth_data(data, method='ma', window=7):
    """–°–≥–ª–∞–∂–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
    if method == 'ma':
        return data.rolling(window=window, min_periods=1, center=True).mean()
    elif method == 'ema':
        return data.ewm(span=window, adjust=False).mean()
    elif method == 'savgol' and len(data) >= window:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ç–Ω–æ—Å—Ç–∏ –æ–∫–Ω–∞ –¥–ª—è Savitzky-Golay
        if window % 2 == 0:
            window += 1
        try:
            return pd.Series(savgol_filter(data, window_length=window, polyorder=min(3, window-1)), index=data.index)
        except:
            return data.rolling(window=window, min_periods=1, center=True).mean()
    else:
        return data

def prepare_prophet_data(df, remove_outliers=False, smooth_method=None, smooth_window=7):
    """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è Prophet —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–µ–π"""
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∞–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ –±–µ–∑ —Å—É–º–º—ã, —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    daily_sales = df.groupby('Datasales')['Qty'].sum().reset_index()
    daily_sales.columns = ['ds', 'y']
    
    original_data = daily_sales.copy()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤
    if remove_outliers:
        daily_sales['y'] = remove_outliers_iqr(daily_sales['y'])
    
    # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
    if smooth_method:
        daily_sales['y'] = smooth_data(daily_sales['y'], method=smooth_method, window=smooth_window)
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∑–∞–º–µ–Ω—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ 0 –≤–º–µ—Å—Ç–æ NaN
    daily_sales['y'] = daily_sales['y'].clip(lower=0)
    
    return daily_sales, original_data

def train_prophet_model(data, periods=30):
    """–û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å Prophet"""
    try:
        model = Prophet(
            daily_seasonality=False,
            weekly_seasonality=True,
            yearly_seasonality=True,
            seasonality_mode='multiplicative',
            changepoint_prior_scale=0.05,
            seasonality_prior_scale=10
        )
        
        model.fit(data)
        
        future = model.make_future_dataframe(periods=periods)
        forecast = model.predict(future)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
        forecast['yhat'] = forecast['yhat'].clip(lower=0)
        forecast['yhat_lower'] = forecast['yhat_lower'].clip(lower=0)
        forecast['yhat_upper'] = forecast['yhat_upper'].clip(lower=0)
        
        return model, forecast
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
        return None, None

def calculate_model_accuracy(train_data, model):
    """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏"""
    try:
        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        historical_forecast = model.predict(train_data[['ds']])
        
        y_true = train_data['y'].values
        y_pred = historical_forecast['yhat'].values
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –¥–ª–∏–Ω—É –º–∞—Å—Å–∏–≤–æ–≤
        min_len = min(len(y_true), len(y_pred))
        y_true = y_true[:min_len]
        y_pred = y_pred[:min_len]
        
        # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
        mae = mean_absolute_error(y_true, y_pred)
        rmse = np.sqrt(mean_squared_error(y_true, y_pred))
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç MAPE
        mask = y_true != 0
        if mask.sum() > 0:
            mape = np.mean(np.abs((y_true[mask] - y_pred[mask]) / y_true[mask])) * 100
        else:
            mape = 0
        
        # R¬≤
        r2 = r2_score(y_true, y_pred)
        
        return {
            'MAE': mae,
            'RMSE': rmse,
            'MAPE': mape,
            'R2': r2
        }
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏: {str(e)}")
        return None

def show_accuracy_table(metrics):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –º–µ—Ç—Ä–∏–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏"""
    st.markdown('<div class="accuracy-card">', unsafe_allow_html=True)
    st.markdown("### üéØ –ú–µ—Ç—Ä–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("MAE", f"{metrics['MAE']:.2f}")
    with col2:
        st.metric("RMSE", f"{metrics['RMSE']:.2f}")
    with col3:
        st.metric("MAPE", f"{metrics['MAPE']:.2f}%")
    with col4:
        st.metric("R¬≤", f"{metrics['R2']:.4f}")
    
    st.markdown('</div>', unsafe_allow_html=True)

def plot_data_preprocessing(original, processed, title):
    """–í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    fig = go.Figure()
    
    fig.add_trace(go.Scatter(
        x=original['ds'], 
        y=original['y'],
        mode='lines',
        name='–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
        line=dict(color='lightgray', width=1),
        opacity=0.5
    ))
    
    fig.add_trace(go.Scatter(
        x=processed['ds'],
        y=processed['y'],
        mode='lines',
        name='–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
        line=dict(color='#667eea', width=2)
    ))
    
    fig.update_layout(
        title=title,
        xaxis_title="–î–∞—Ç–∞",
        yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        hovermode='x unified',
        height=400
    )
    
    return fig

def plot_forecast(train_data, forecast, title):
    """–í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑"""
    fig = go.Figure()
    
    # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    fig.add_trace(go.Scatter(
        x=train_data['ds'],
        y=train_data['y'],
        mode='lines',
        name='–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏',
        line=dict(color='#1f77b4', width=2)
    ))
    
    # –ü—Ä–æ–≥–Ω–æ–∑
    forecast_future = forecast[forecast['ds'] > train_data['ds'].max()]
    
    fig.add_trace(go.Scatter(
        x=forecast_future['ds'],
        y=forecast_future['yhat'],
        mode='lines',
        name='–ü—Ä–æ–≥–Ω–æ–∑',
        line=dict(color='#ff7f0e', width=2, dash='dash')
    ))
    
    # –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    fig.add_trace(go.Scatter(
        x=forecast_future['ds'].tolist() + forecast_future['ds'].tolist()[::-1],
        y=forecast_future['yhat_upper'].tolist() + forecast_future['yhat_lower'].tolist()[::-1],
        fill='toself',
        fillcolor='rgba(255, 127, 14, 0.2)',
        line=dict(color='rgba(255, 127, 14, 0)'),
        name='–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª',
        showlegend=True
    ))
    
    fig.update_layout(
        title=title,
        xaxis_title="–î–∞—Ç–∞",
        yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        hovermode='x unified',
        height=500
    )
    
    return fig

def plot_prophet_components(model, forecast):
    """–í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–¥–µ–ª–∏ Prophet"""
    fig = go.Figure()
    
    # –¢—Ä–µ–Ω–¥
    fig.add_trace(go.Scatter(
        x=forecast['ds'],
        y=forecast['trend'],
        mode='lines',
        name='–¢—Ä–µ–Ω–¥',
        line=dict(color='#2ca02c', width=2)
    ))
    
    fig.update_layout(
        title="üìä –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è: –¢—Ä–µ–Ω–¥",
        xaxis_title="–î–∞—Ç–∞",
        yaxis_title="–ó–Ω–∞—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞",
        hovermode='x unified',
        height=400
    )
    
    return fig

def calculate_segment_volatility(df, magazin, segment):
    """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–µ–≥–º–µ–Ω—Ç–∞"""
    filtered = df[(df['Magazin'] == magazin) & (df['Segment'] == segment)]
    
    if len(filtered) < 2:
        return 0.3  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    daily_sales = filtered.groupby('Datasales')['Qty'].sum()
    
    if daily_sales.mean() == 0:
        return 0.3
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏)
    volatility = daily_sales.std() / daily_sales.mean()
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 1
    return min(max(volatility, 0), 1)

def get_forecast_scenarios(forecast_df, volatility):
    """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    realistic = forecast_df['yhat'].values
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã Prophet
    lower_bound = forecast_df['yhat_lower'].values
    upper_bound = forecast_df['yhat_upper'].values
    
    # –ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π –∏ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–∏
    pessimistic = np.maximum(lower_bound, 0)
    optimistic = np.maximum(upper_bound, 0)
    
    return realistic, optimistic, pessimistic

def show_forecast_statistics(filtered_df, forecast, forecast_days, magazin, segment, full_df):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    st.markdown("## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞")
    
    future_forecast = forecast.tail(forecast_days)
    avg_forecast = future_forecast['yhat'].mean()
    total_forecast = future_forecast['yhat'].sum()
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
    if len(filtered_df) > 0 and filtered_df['Qty'].sum() > 0:
        avg_price = filtered_df['Sum'].sum() / filtered_df['Qty'].sum()
    else:
        avg_price = 0
    
    forecast_revenue = total_forecast * avg_price
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            "üì¶ –ü—Ä–æ–≥–Ω–æ–∑ (—Å—Ä–µ–¥–Ω–∏–π/–¥–µ–Ω—å)",
            f"{avg_forecast:.0f} —à—Ç."
        )
    
    with col2:
        st.metric(
            f"üìä –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {forecast_days} –¥–Ω–µ–π",
            f"{total_forecast:.0f} —à—Ç."
        )
    
    with col3:
        st.metric(
            "üí∞ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏",
            f"{forecast_revenue:,.0f} –ì–†–ù"
        )

def plot_monthly_analysis_with_forecast(df, magazin, segment, model, forecast_days, remove_outliers, smooth_method):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    filtered = df.copy()
    
    if magazin != '–í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã':
        filtered = filtered[filtered['Magazin'] == magazin]
    
    if segment != '–í—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã':
        filtered = filtered[filtered['Segment'] == segment]
    
    if len(filtered) == 0:
        st.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
    filtered['Month'] = filtered['Datasales'].dt.to_period('M')
    monthly_data = filtered.groupby('Month').agg({
        'Qty': 'sum',
        'Sum': 'sum',
        'Art': 'nunique'
    }).reset_index()
    monthly_data.columns = ['Month', 'Qty', 'Sum', 'Unique_Products']
    
    monthly_data['Month'] = monthly_data['Month'].dt.to_timestamp()
    
    # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –∏ –¥—Ä—É–≥–∏—Ö –º–µ—Ç—Ä–∏–∫
    monthly_data['Avg_Price'] = np.where(
        monthly_data['Qty'] > 0,
        monthly_data['Sum'] / monthly_data['Qty'],
        0
    )
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±—É–¥—É—â–∏–π –º–µ—Å—è—Ü
    future_dates = pd.date_range(
        start=filtered['Datasales'].max() + pd.Timedelta(days=1),
        periods=forecast_days
    )
    future_df = pd.DataFrame({'ds': future_dates})
    future_forecast = model.predict(future_df)
    
    # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
    future_forecast['Month'] = pd.to_datetime(future_forecast['ds']).dt.to_period('M').dt.to_timestamp()
    forecast_monthly = future_forecast.groupby('Month')['yhat'].sum().reset_index()
    forecast_monthly.columns = ['Month', 'Forecast_Qty']
    
    last_avg_price = monthly_data['Avg_Price'].iloc[-1] if len(monthly_data) > 0 else 0
    forecast_monthly['Forecast_Revenue'] = forecast_monthly['Forecast_Qty'] * last_avg_price
    
    # === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ï–°–Ø–ß–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê ===
    st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        avg_monthly_sales = monthly_data['Qty'].mean()
        st.metric(
            "üì¶ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏/–º–µ—Å—è—Ü",
            f"{avg_monthly_sales:,.0f} —à—Ç",
            delta=f"{monthly_data['Qty'].iloc[-1] - avg_monthly_sales:,.0f}"
        )
    
    with col2:
        avg_monthly_revenue = monthly_data['Sum'].mean()
        st.metric(
            "üí∞ –°—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞/–º–µ—Å—è—Ü",
            f"{avg_monthly_revenue:,.0f} –ì–†–ù",
            delta=f"{monthly_data['Sum'].iloc[-1] - avg_monthly_revenue:,.0f}"
        )
    
    with col3:
        # –†–æ—Å—Ç –ø—Ä–æ–¥–∞–∂ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü vs –ø—Ä–µ–¥—ã–¥—É—â–∏–π)
        if len(monthly_data) >= 2:
            growth_rate = ((monthly_data['Qty'].iloc[-1] / monthly_data['Qty'].iloc[-2]) - 1) * 100
            st.metric(
                "üìà –†–æ—Å—Ç (–º–µ—Å—è—Ü –∫ –º–µ—Å—è—Ü—É)",
                f"{growth_rate:+.1f}%",
                delta=f"{monthly_data['Qty'].iloc[-1] - monthly_data['Qty'].iloc[-2]:,.0f} —à—Ç"
            )
        else:
            st.metric("üìà –†–æ—Å—Ç", "N/A")
    
    with col4:
        # –ü—Ä–æ–≥–Ω–æ–∑ —Ä–æ—Å—Ç–∞
        if len(forecast_monthly) > 0 and len(monthly_data) > 0:
            forecast_growth = ((forecast_monthly['Forecast_Qty'].iloc[0] / monthly_data['Qty'].iloc[-1]) - 1) * 100
            st.metric(
                "üîÆ –ü—Ä–æ–≥–Ω–æ–∑ —Ä–æ—Å—Ç–∞",
                f"{forecast_growth:+.1f}%",
                delta="—Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü"
            )
        else:
            st.metric("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ —Ä–æ—Å—Ç–∞", "N/A")
    
    # === –ì–†–ê–§–ò–ö 1: –ü—Ä–æ–¥–∞–∂–∏ –∏ –≤—ã—Ä—É—á–∫–∞ ===
    st.markdown("### üìä –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂ –∏ –≤—ã—Ä—É—á–∫–∏")
    
    fig1 = go.Figure()
    
    # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏
    fig1.add_trace(go.Bar(
        x=monthly_data['Month'],
        y=monthly_data['Qty'],
        name='–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏',
        marker_color='#1f77b4',
        yaxis='y',
        text=monthly_data['Qty'].round(0),
        textposition='outside',
        texttemplate='%{text:,.0f}'
    ))
    
    # –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏
    fig1.add_trace(go.Bar(
        x=forecast_monthly['Month'],
        y=forecast_monthly['Forecast_Qty'],
        name='–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂',
        marker_color='#ff7f0e',
        yaxis='y',
        text=forecast_monthly['Forecast_Qty'].round(0),
        textposition='outside',
        texttemplate='%{text:,.0f}'
    ))
    
    # –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –≤—ã—Ä—É—á–∫–∞
    fig1.add_trace(go.Scatter(
        x=monthly_data['Month'],
        y=monthly_data['Sum'],
        name='–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –≤—ã—Ä—É—á–∫–∞',
        mode='lines+markers',
        line=dict(color='#2ca02c', width=3),
        marker=dict(size=8),
        yaxis='y2'
    ))
    
    # –ü—Ä–æ–≥–Ω–æ–∑–Ω–∞—è –≤—ã—Ä—É—á–∫–∞
    fig1.add_trace(go.Scatter(
        x=forecast_monthly['Month'],
        y=forecast_monthly['Forecast_Revenue'],
        name='–ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏',
        mode='lines+markers',
        line=dict(color='#d62728', width=3, dash='dash'),
        marker=dict(size=8, symbol='diamond'),
        yaxis='y2'
    ))
    
    fig1.update_layout(
        xaxis_title="–ú–µ—Å—è—Ü",
        yaxis=dict(title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (—à—Ç)", side='left'),
        yaxis2=dict(title="–í—ã—Ä—É—á–∫–∞ (–ì–†–ù)", side='right', overlaying='y'),
        hovermode='x unified',
        height=500,
        legend=dict(x=0, y=1.15, orientation='h'),
        barmode='group'
    )
    
    st.plotly_chart(fig1, use_container_width=True, key="plot_forecast_fig1")
    
    # === –ì–†–ê–§–ò–ö 2: –î–∏–Ω–∞–º–∏–∫–∞ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã ===
    st.markdown("### üíµ –î–∏–Ω–∞–º–∏–∫–∞ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã")
    
    fig2 = go.Figure()
    
    fig2.add_trace(go.Scatter(
        x=monthly_data['Month'],
        y=monthly_data['Avg_Price'],
        mode='lines+markers',
        name='–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞',
        line=dict(color='#9467bd', width=3),
        marker=dict(size=10),
        fill='tozeroy',
        fillcolor='rgba(148, 103, 189, 0.2)'
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –ª–∏–Ω–∏—é
    avg_price_overall = monthly_data['Avg_Price'].mean()
    fig2.add_hline(
        y=avg_price_overall,
        line_dash="dash",
        line_color="red",
        annotation_text=f"–°—Ä–µ–¥–Ω–µ–µ: {avg_price_overall:.2f} –ì–†–ù",
        annotation_position="right"
    )
    
    fig2.update_layout(
        xaxis_title="–ú–µ—Å—è—Ü",
        yaxis_title="–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (–ì–†–ù)",
        hovermode='x unified',
        height=400
    )
    
    st.plotly_chart(fig2, use_container_width=True, key="plot_forecast_fig2")
    
    # === –ì–†–ê–§–ò–ö 3: –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ ===
    st.markdown("### üè∑Ô∏è –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂")
    
    col1, col2 = st.columns(2)
    
    with col1:
        fig3 = go.Figure()
        
        fig3.add_trace(go.Bar(
            x=monthly_data['Month'],
            y=monthly_data['Unique_Products'],
            name='–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤',
            marker_color='#8c564b',
            text=monthly_data['Unique_Products'],
            textposition='outside'
        ))
        
        fig3.update_layout(
            title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤",
            xaxis_title="–ú–µ—Å—è—Ü",
            yaxis_title="–ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤",
            height=350
        )
        
        st.plotly_chart(fig3, use_container_width=True, key="plot_forecast_fig3")
    
    with col2:
        # –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ (–ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ 1 —Ç–æ–≤–∞—Ä)
        monthly_data['Sales_per_Product'] = monthly_data['Qty'] / monthly_data['Unique_Products']
        
        fig4 = go.Figure()
        
        fig4.add_trace(go.Scatter(
            x=monthly_data['Month'],
            y=monthly_data['Sales_per_Product'],
            mode='lines+markers',
            name='–ü—Ä–æ–¥–∞–∂ –Ω–∞ —Ç–æ–≤–∞—Ä',
            line=dict(color='#e377c2', width=3),
            marker=dict(size=10),
            fill='tozeroy',
            fillcolor='rgba(227, 119, 194, 0.2)'
        ))
        
        fig4.update_layout(
            title="–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ (—à—Ç/—Ç–æ–≤–∞—Ä)",
            xaxis_title="–ú–µ—Å—è—Ü",
            yaxis_title="–ü—Ä–æ–¥–∞–∂ –Ω–∞ 1 —Ç–æ–≤–∞—Ä",
            height=350
        )
        
        st.plotly_chart(fig4, use_container_width=True, key="plot_forecast_fig4")
    
    # === –ì–†–ê–§–ò–ö 4: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç vs –ø—Ä–æ–≥–Ω–æ–∑ ===
    if len(forecast_monthly) > 0:
        st.markdown("### üîÆ –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –§–∞–∫—Ç vs –ü—Ä–æ–≥–Ω–æ–∑")
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤ –∏—Å—Ç–æ—Ä–∏–∏
        recent_months = monthly_data.tail(6)
        
        comparison_data = pd.DataFrame({
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': ['–ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å (—Ñ–∞–∫—Ç)'] * len(recent_months) + ['–ü—Ä–æ–≥–Ω–æ–∑'] * len(forecast_monthly),
            '–ü–µ—Ä–∏–æ–¥': list(recent_months['Month']) + list(forecast_monthly['Month']),
            '–ü—Ä–æ–¥–∞–∂–∏': list(recent_months['Qty']) + list(forecast_monthly['Forecast_Qty']),
            '–í—ã—Ä—É—á–∫–∞': list(recent_months['Sum']) + list(forecast_monthly['Forecast_Revenue'])
        })
        
        fig5 = go.Figure()
        
        colors = {'–ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å (—Ñ–∞–∫—Ç)': '#3498db', '–ü—Ä–æ–≥–Ω–æ–∑': '#e74c3c'}
        
        for category in comparison_data['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].unique():
            cat_data = comparison_data[comparison_data['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == category]
            
            fig5.add_trace(go.Bar(
                x=cat_data['–ü–µ—Ä–∏–æ–¥'],
                y=cat_data['–ü—Ä–æ–¥–∞–∂–∏'],
                name=category,
                marker_color=colors[category],
                text=cat_data['–ü—Ä–æ–¥–∞–∂–∏'].round(0),
                textposition='outside'
            ))
        
        fig5.update_layout(
            title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç vs –ø—Ä–æ–≥–Ω–æ–∑",
            xaxis_title="–ü–µ—Ä–∏–æ–¥",
            yaxis_title="–ü—Ä–æ–¥–∞–∂–∏ (—à—Ç)",
            height=400,
            barmode='group'
        )
        
        st.plotly_chart(fig5, use_container_width=True, key="plot_forecast_fig5")
    
    # === –¢–ê–ë–õ–ò–¶–ê –° –î–ï–¢–ê–õ–¨–ù–û–ô –°–¢–ê–¢–ò–°–¢–ò–ö–û–ô ===
    st.markdown("### üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    display_table = monthly_data.copy()
    display_table['Month'] = display_table['Month'].dt.strftime('%Y-%m')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
    display_table['Qty_Change_%'] = display_table['Qty'].pct_change() * 100
    display_table['Revenue_Change_%'] = display_table['Sum'].pct_change() * 100
    
    display_table = display_table.rename(columns={
        'Month': 'üìÖ –ú–µ—Å—è—Ü',
        'Qty': 'üì¶ –ü—Ä–æ–¥–∞–∂–∏',
        'Sum': 'üí∞ –í—ã—Ä—É—á–∫–∞',
        'Avg_Price': 'üíµ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞',
        'Unique_Products': 'üè∑Ô∏è –¢–æ–≤–∞—Ä–æ–≤',
        'Sales_per_Product': 'üìä –ü—Ä–æ–¥–∞–∂/—Ç–æ–≤–∞—Ä',
        'Qty_Change_%': 'üìà Œî –ü—Ä–æ–¥–∞–∂ %',
        'Revenue_Change_%': 'üíπ Œî –í—ã—Ä—É—á–∫–∞ %'
    })
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    st.dataframe(
        display_table.style.format({
            'üì¶ –ü—Ä–æ–¥–∞–∂–∏': '{:,.0f}',
            'üí∞ –í—ã—Ä—É—á–∫–∞': '{:,.0f}',
            'üíµ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞': '{:.2f}',
            'üè∑Ô∏è –¢–æ–≤–∞—Ä–æ–≤': '{:.0f}',
            'üìä –ü—Ä–æ–¥–∞–∂/—Ç–æ–≤–∞—Ä': '{:.1f}',
            'üìà Œî –ü—Ä–æ–¥–∞–∂ %': '{:+.1f}%',
            'üíπ Œî –í—ã—Ä—É—á–∫–∞ %': '{:+.1f}%'
        }).background_gradient(subset=['üìà Œî –ü—Ä–æ–¥–∞–∂ %', 'üíπ Œî –í—ã—Ä—É—á–∫–∞ %'], cmap='RdYlGn', vmin=-20, vmax=20),
        use_container_width=True,
        hide_index=True
    )
    
    # === –ê–õ–ï–†–¢–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===
    st.markdown("### üö® –ê–ª–µ—Ä—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    
    alerts = []
    recommendations = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂
    if len(monthly_data) >= 2:
        last_month_sales = monthly_data['Qty'].iloc[-1]
        prev_month_sales = monthly_data['Qty'].iloc[-2]
        
        if last_month_sales < prev_month_sales * 0.8:
            alerts.append("üìâ **–ö–†–ò–¢–ò–ß–ù–û**: –ü–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –±–æ–ª–µ–µ 20% –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü!")
            recommendations.append("üéØ –°—Ä–æ—á–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—ã –ø–∞–¥–µ–Ω–∏—è")
        elif last_month_sales < prev_month_sales * 0.9:
            alerts.append("‚ö†Ô∏è –°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –Ω–∞ 10-20% –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü")
            recommendations.append("üìä –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω–æ–≤—É—é –ø–æ–ª–∏—Ç–∏–∫—É")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã
    if len(monthly_data) >= 3:
        recent_price = monthly_data['Avg_Price'].tail(3).mean()
        older_price = monthly_data['Avg_Price'].head(3).mean()
        
        if recent_price > older_price * 1.15:
            alerts.append("üíµ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 15%")
            recommendations.append("‚öñÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–ª–∏—è–Ω–∏–µ —Ä–æ—Å—Ç–∞ —Ü–µ–Ω –Ω–∞ –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞
    if len(monthly_data) >= 2:
        last_products = monthly_data['Unique_Products'].iloc[-1]
        avg_products = monthly_data['Unique_Products'].mean()
        
        if last_products < avg_products * 0.7:
            alerts.append("üè∑Ô∏è –†–µ–∑–∫–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞")
            recommendations.append("üì¶ –†–∞—Å—à–∏—Ä–∏—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
    if len(forecast_monthly) > 0 and len(monthly_data) > 0:
        forecast_vs_last = forecast_monthly['Forecast_Qty'].iloc[0] / monthly_data['Qty'].iloc[-1]
        
        if forecast_vs_last > 1.3:
            alerts.append("üöÄ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–æ—Å—Ç –ø—Ä–æ–¥–∞–∂ –±–æ–ª–µ–µ 30%")
            recommendations.append("üì¶ –£–≤–µ–ª–∏—á–∏—Ç—å –∑–∞–∫—É–ø–∫–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–∫–ª–∞–¥ –∫ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–º—É —Å–ø—Ä–æ—Å—É")
        elif forecast_vs_last < 0.8:
            alerts.append("üìâ –ü—Ä–æ–≥–Ω–æ–∑ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂")
            recommendations.append("üí° –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–º–æ-–∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø—Ä–æ—Å–∞")
    
    # –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
    if len(monthly_data) >= 6:
        monthly_data_temp = monthly_data.copy()
        monthly_data_temp['Month_Num'] = pd.to_datetime(monthly_data_temp['Month']).dt.month
        seasonality = monthly_data_temp.groupby('Month_Num')['Qty'].mean().std()
        
        if seasonality > monthly_data['Qty'].mean() * 0.3:
            recommendations.append("üìÖ –í—ã—è–≤–ª–µ–Ω–∞ –≤—ã—Å–æ–∫–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å - –ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∑–∞–∫—É–ø–∫–∏ —Å —É—á–µ—Ç–æ–º —Å–µ–∑–æ–Ω–Ω—ã—Ö –∫–æ–ª–µ–±–∞–Ω–∏–π")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤
    if alerts:
        for alert in alerts:
            st.markdown(f'<div class="problem-card">{alert}</div>', unsafe_allow_html=True)
    else:
        st.success("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    if recommendations:
        st.markdown("#### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for rec in recommendations:
            st.markdown(f'<div class="insight-card">{rec}</div>', unsafe_allow_html=True)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    st.markdown("#### üéØ –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    
    general_recommendations = [
        f"üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {monthly_data['Avg_Price'].mean():.2f} –ì–†–ù - {'–æ–ø—Ç–∏–º–∞–ª—å–Ω–∞' if monthly_data['Avg_Price'].std() < monthly_data['Avg_Price'].mean() * 0.2 else '—Å–∏–ª—å–Ω–æ –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è'}",
        f"üì¶ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å –Ω–∞ –º–µ—Å—è—Ü: {monthly_data['Qty'].mean() * 1.2:.0f} –µ–¥–∏–Ω–∏—Ü (—Å—Ä–µ–¥–Ω–µ–µ + 20% –±—É—Ñ–µ—Ä)",
        f"üí∞ –¶–µ–ª–µ–≤–∞—è –≤—ã—Ä—É—á–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü: {monthly_data['Sum'].mean() * 1.1:,.0f} –ì–†–ù (+10% –∫ —Å—Ä–µ–¥–Ω–µ–º—É)"
    ]
    
    for rec in general_recommendations:
        st.info(rec)
    
def get_top_models_by_segment(df, magazin):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø-10 –º–æ–¥–µ–ª–µ–π –ø–æ –∫–∞–∂–¥–æ–º—É —Å–µ–≥–º–µ–Ω—Ç—É"""
    filtered = df[df['Magazin'] == magazin]
    segments = filtered['Segment'].unique()
    
    result = {}
    
    for segment in segments:
        segment_data = filtered[filtered['Segment'] == segment]
        
        top_models = segment_data.groupby('Model').agg({
            'Qty': 'sum',
            'Sum': 'sum'
        }).reset_index()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
        top_models['Price'] = np.where(
            top_models['Qty'] > 0,
            top_models['Sum'] / top_models['Qty'],
            0
        )
        
        top_models = top_models.sort_values('Sum', ascending=False).head(10)
        result[segment] = top_models
    
    return result

def generate_insights(df, forecast, magazin, segment):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Å–∞–π—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    filtered = df[(df['Magazin'] == magazin) & (df['Segment'] == segment)]
    
    insights = []
    problems = []
    
    if len(filtered) == 0:
        return insights, problems
    
    # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
    recent_sales = filtered.tail(30)['Qty'].sum()
    older_sales = filtered.head(30)['Qty'].sum()
    
    if recent_sales > older_sales * 1.2:
        insights.append("üìà –ü—Ä–æ–¥–∞–∂–∏ —Ä–∞—Å—Ç—É—Ç! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å –∑–∞–∫—É–ø–∫–∏.")
    elif recent_sales < older_sales * 0.8:
        problems.append("üìâ –°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂. –ù–µ–æ–±—Ö–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω.")
        insights.append("üîç –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–π.")
    
    # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    daily_sales = filtered.groupby('Datasales')['Qty'].sum()
    cv = daily_sales.std() / daily_sales.mean() if daily_sales.mean() > 0 else 0
    
    if cv > 0.5:
        problems.append("‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂. –°–ª–æ–∂–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∞—Å—ã.")
        insights.append("üì¶ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –±—É—Ñ–µ—Ä–Ω—ã–π –∑–∞–ø–∞—Å.")
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞
    future_forecast = forecast.tail(30)
    avg_forecast = future_forecast['yhat'].mean()
    historical_avg = daily_sales.tail(30).mean()
    
    if avg_forecast > historical_avg * 1.1:
        insights.append("üöÄ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–æ—Å—Ç –ø—Ä–æ–¥–∞–∂. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø–∞—Å—ã.")
    elif avg_forecast < historical_avg * 0.9:
        insights.append("‚ö° –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–ø–∞–¥ –ø—Ä–æ–¥–∞–∂. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–∫—É–ø–∫–∏.")
    
    return insights, problems

def create_word_report(detailed_forecast, selected_magazin, selected_segment, forecast_days, 
                      total_forecast, avg_daily_forecast, forecast_revenue, confidence_score,
                      accuracy_metrics, insights, filtered_df, prophet_data):
    """–°–æ–∑–¥–∞–µ—Ç Word –æ—Ç—á–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        from docx import Document
        from docx.shared import Inches, Pt, RGBColor
        from docx.enum.text import WD_ALIGN_PARAGRAPH
        from io import BytesIO
        
        doc = Document()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        style = doc.styles['Normal']
        font = style.font
        font.name = 'Arial'
        font.size = Pt(11)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = doc.add_heading('–û–¢–ß–ï–¢ –ü–û –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Æ –ü–†–û–î–ê–ñ', 0)
        title.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        doc.add_paragraph()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥–Ω–æ–∑–µ
        doc.add_heading('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥–Ω–æ–∑–µ', level=1)
        
        info_table = doc.add_table(rows=4, cols=2)
        info_table.style = 'Light Grid Accent 1'
        
        info_data = [
            ('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', datetime.now().strftime('%Y-%m-%d %H:%M')),
            ('–ú–∞–≥–∞–∑–∏–Ω:', selected_magazin),
            ('–°–µ–≥–º–µ–Ω—Ç:', selected_segment),
            ('–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞:', f'{forecast_days} –¥–Ω–µ–π')
        ]
        
        for i, (label, value) in enumerate(info_data):
            info_table.rows[i].cells[0].text = label
            info_table.rows[i].cells[1].text = value
        
        doc.add_paragraph()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        doc.add_heading('–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏', level=1)
        
        metrics_table = doc.add_table(rows=5, cols=2)
        metrics_table.style = 'Light Grid Accent 1'
        
        metrics_data = [
            ('–û–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑', f'{total_forecast:.0f} –µ–¥–∏–Ω–∏—Ü'),
            ('–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏/–¥–µ–Ω—å', f'{avg_daily_forecast:.0f} –µ–¥–∏–Ω–∏—Ü'),
            ('–ü—Ä–æ–≥–Ω–æ–∑–Ω–∞—è –≤—ã—Ä—É—á–∫–∞', f'{forecast_revenue:,.0f} –ì–†–ù'),
            ('–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞', f'{confidence_score:.0f}%')
        ]
        
        metrics_table.rows[0].cells[0].text = '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å'
        metrics_table.rows[0].cells[1].text = '–ó–Ω–∞—á–µ–Ω–∏–µ'
        
        for i, (label, value) in enumerate(metrics_data, 1):
            metrics_table.rows[i].cells[0].text = label
            metrics_table.rows[i].cells[1].text = value
        
        doc.add_paragraph()
        
        # –ú–µ—Ç—Ä–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
        if accuracy_metrics:
            doc.add_heading('–ú–µ—Ç—Ä–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏', level=1)
            
            accuracy_table = doc.add_table(rows=5, cols=3)
            accuracy_table.style = 'Light Grid Accent 1'
            
            accuracy_table.rows[0].cells[0].text = '–ú–µ—Ç—Ä–∏–∫–∞'
            accuracy_table.rows[0].cells[1].text = '–ó–Ω–∞—á–µ–Ω–∏–µ'
            accuracy_table.rows[0].cells[2].text = '–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è'
            
            accuracy_data = [
                ('MAE', f"{accuracy_metrics['MAE']:.2f}", '–°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'),
                ('RMSE', f"{accuracy_metrics['RMSE']:.2f}", '–ö–æ—Ä–µ–Ω—å –∏–∑ —Å—Ä–µ–¥–Ω–µ–π –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π –æ—à–∏–±–∫–∏'),
                ('MAPE', f"{accuracy_metrics['MAPE']:.2f}%", '–°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'),
                ('R¬≤', f"{accuracy_metrics['R2']:.4f}", '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏')
            ]
            
            for i, (metric, value, interpretation) in enumerate(accuracy_data, 1):
                accuracy_table.rows[i].cells[0].text = metric
                accuracy_table.rows[i].cells[1].text = value
                accuracy_table.rows[i].cells[2].text = interpretation
            
            doc.add_paragraph()
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
        doc.add_heading('–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ (–ø–µ—Ä–≤—ã–µ 10 –¥–Ω–µ–π)', level=1)
        
        forecast_table = doc.add_table(rows=11, cols=4)
        forecast_table.style = 'Light Grid Accent 1'
        
        forecast_table.rows[0].cells[0].text = '–î–∞—Ç–∞'
        forecast_table.rows[0].cells[1].text = '–ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π'
        forecast_table.rows[0].cells[2].text = '–†–µ–∞–ª—å–Ω—ã–π'
        forecast_table.rows[0].cells[3].text = '–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π'
        
        for i, (idx, row) in enumerate(detailed_forecast.head(10).iterrows(), 1):
            forecast_table.rows[i].cells[0].text = row['üìÖ –î–∞—Ç–∞']
            forecast_table.rows[i].cells[1].text = str(row['üò∞ –ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π'])
            forecast_table.rows[i].cells[2].text = str(row['üéØ –†–µ–∞–ª—å–Ω—ã–π'])
            forecast_table.rows[i].cells[3].text = str(row['üöÄ –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π'])
        
        doc.add_page_break()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        doc.add_heading('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö', level=1)
        
        total_sales = filtered_df['Qty'].sum()
        total_revenue = filtered_df['Sum'].sum()
        avg_price = total_revenue / total_sales if total_sales > 0 else 0
        period_days = (filtered_df['Datasales'].max() - filtered_df['Datasales'].min()).days + 1
        
        stats_table = doc.add_table(rows=10, cols=2)
        stats_table.style = 'Light Grid Accent 1'
        
        stats_data = [
            ('–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–ó–Ω–∞—á–µ–Ω–∏–µ'),
            ('–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö', f"{filtered_df['Datasales'].min().strftime('%Y-%m-%d')} - {filtered_df['Datasales'].max().strftime('%Y-%m-%d')}"),
            ('–í—Å–µ–≥–æ –¥–Ω–µ–π', f'{period_days}'),
            ('–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ', f'{total_sales:,.0f} –µ–¥–∏–Ω–∏—Ü'),
            ('–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞', f'{total_revenue:,.0f} –ì–†–ù'),
            ('–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞', f'{avg_price:.2f} –ì–†–ù'),
            ('–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏/–¥–µ–Ω—å', f'{prophet_data["y"].mean():.1f} –µ–¥–∏–Ω–∏—Ü'),
            ('–ú–∞–∫—Å. –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –¥–µ–Ω—å', f'{prophet_data["y"].max():.0f} –µ–¥–∏–Ω–∏—Ü'),
            ('–ú–∏–Ω. –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –¥–µ–Ω—å', f'{prophet_data["y"].min():.0f} –µ–¥–∏–Ω–∏—Ü')
        ]
        
        for i, (label, value) in enumerate(stats_data):
            stats_table.rows[i].cells[0].text = label
            stats_table.rows[i].cells[1].text = value
        
        doc.add_paragraph()
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        doc.add_heading('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', level=1)
        
        for i, insight in enumerate(insights[:15], 1):
            # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏
            clean_insight = insight.replace('üéØ', '').replace('üìä', '').replace('üöÄ', '').replace('‚ö°', '').replace('üì¶', '').replace('üîç', '').replace('üìà', '').replace('üí°', '').replace('üî•', '').strip()
            p = doc.add_paragraph(f'{i}. {clean_insight}')
            p.style = 'List Number'
        
        doc.add_paragraph()
        
        # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
        doc.add_heading('–ó–∞–∫–ª—é—á–µ–Ω–∏–µ', level=1)
        
        conclusion_text = f"""
–î–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {filtered_df['Datasales'].min().strftime('%Y-%m-%d')} –ø–æ {filtered_df['Datasales'].max().strftime('%Y-%m-%d')}.

–ú–æ–¥–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ {confidence_score:.0f}%, —á—Ç–æ {"–≥–æ–≤–æ—Ä–∏—Ç –æ –≤—ã—Å–æ–∫–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏" if confidence_score > 70 else "—Ç—Ä–µ–±—É–µ—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è"} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.

–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã —Å –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
        """
        
        doc.add_paragraph(conclusion_text.strip())
        
        # –§—É—Ç–µ—Ä
        doc.add_paragraph()
        footer = doc.add_paragraph()
        footer.add_run(f'–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime("%Y-%m-%d %H:%M")}').italic = True
        footer.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ BytesIO
        buffer = BytesIO()
        doc.save(buffer)
        buffer.seek(0)
        
        return buffer.getvalue()
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Word –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")
        st.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É: pip install python-docx")
        return None

def main():
    st.markdown('<h1 class="main-header">üè™ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂</h1>', unsafe_allow_html=True)
    
    with st.sidebar:
        st.markdown("## ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        uploaded_file = st.file_uploader(
            "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª",
            type=['xlsx', 'xls'],
            help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: Magazin, Datasales, Art, Describe, Model, Segment, Price, Qty, Sum"
        )
        
        st.markdown("---")
        st.markdown("### üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≥–Ω–æ–∑–∞")
        
        forecast_days = st.slider(
            "üìÖ –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–¥–Ω–µ–π)",
            min_value=7,
            max_value=90,
            value=30,
            step=1
        )
        
        st.markdown("### üßπ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        
        remove_outliers = st.checkbox(
            "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–æ—Å—ã",
            value=True,
            help="–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ IQR –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"
        )
        
        smooth_method = st.selectbox(
            "–ú–µ—Ç–æ–¥ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è",
            options=['none', 'ma', 'ema', 'savgol'],
            format_func=lambda x: {
                'none': '–ë–µ–∑ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è',
                'ma': '–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ',
                'ema': '–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ',
                'savgol': '–§–∏–ª—å—Ç—Ä –°–∞–≤–∏—Ü–∫–æ–≥–æ-–ì–æ–ª–µ—è'
            }[x]
        )
        
        if smooth_method != 'none':
            smooth_window = st.slider(
                "–û–∫–Ω–æ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è",
                min_value=3,
                max_value=21,
                value=7,
                step=2
            )
        else:
            smooth_window = 7
    
    if uploaded_file is None:
        st.info("üëà –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        
        st.markdown("### üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º")
        st.markdown("""
        –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:
        - **Magazin**: –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
        - **Datasales**: –î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏
        - **Art**: –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞
        - **Describe**: –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        - **Model**: –ú–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–∞
        - **Segment**: –°–µ–≥–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–∞
        - **Price**: –¶–µ–Ω–∞
        - **Qty**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        - **Sum**: –°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏
        """)
        return
    
    df = load_and_validate_data(uploaded_file)
    
    if df is None:
        return
    
    show_data_statistics(df)
    
    st.markdown("---")
    st.markdown("## üéØ –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω–∞–ª–∏–∑–∞")
    
    col1, col2 = st.columns(2)
    
    with col1:
        available_magazins = ['–í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã'] + sorted(df['Magazin'].unique().tolist())
        selected_magazin = st.selectbox("üè™ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω", available_magazins)
    
    with col2:
        if selected_magazin == '–í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã':
            available_segments = ['–í—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã'] + sorted(df['Segment'].unique().tolist())
        else:
            magazin_df = df[df['Magazin'] == selected_magazin]
            available_segments = ['–í—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã'] + sorted(magazin_df['Segment'].unique().tolist())
        
        selected_segment = st.selectbox("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç", available_segments)
    
    if st.button("üöÄ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", type="primary", use_container_width=True):
        with st.spinner("üîÑ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏..."):
            filtered_df = df.copy()
            
            if selected_magazin != '–í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã':
                filtered_df = filtered_df[filtered_df['Magazin'] == selected_magazin]
            
            if selected_segment != '–í—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã':
                filtered_df = filtered_df[filtered_df['Segment'] == selected_segment]
            
            if len(filtered_df) < 10:
                st.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è (–º–∏–Ω–∏–º—É–º 10 –∑–∞–ø–∏—Å–µ–π)")
                return
            
            prophet_data, original_data = prepare_prophet_data(
                filtered_df, 
                remove_outliers=remove_outliers, 
                smooth_method=smooth_method if smooth_method != 'none' else None,
                smooth_window=smooth_window
            )
            
            if remove_outliers or (smooth_method and smooth_method != 'none'):
                st.markdown("## üßπ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                    st.metric("–°—Ä–µ–¥–Ω–µ–µ", f"{original_data['y'].mean():.2f}")
                    st.metric("Std. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", f"{original_data['y'].std():.2f}")
                    volatility_before = (original_data['y'].std()/original_data['y'].mean()*100) if original_data['y'].mean() > 0 else 0
                    st.metric("–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", f"{volatility_before:.1f}%")
                
                with col2:
                    st.markdown("### ‚ú® –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                    st.metric("–°—Ä–µ–¥–Ω–µ–µ", f"{prophet_data['y'].mean():.2f}", 
                             delta=f"{prophet_data['y'].mean() - original_data['y'].mean():.2f}")
                    st.metric("Std. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", f"{prophet_data['y'].std():.2f}", 
                             delta=f"{prophet_data['y'].std() - original_data['y'].std():.2f}")
                    volatility_after = (prophet_data['y'].std()/prophet_data['y'].mean()*100) if prophet_data['y'].mean() > 0 else 0
                    st.metric("–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", f"{volatility_after:.1f}%", 
                             delta=f"{volatility_after - volatility_before:.1f}%")
                
                fig_preprocessing = plot_data_preprocessing(original_data, prophet_data, "üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ vs –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                st.plotly_chart(fig_preprocessing, use_container_width=True, key="preprocessing")
            
            model, forecast = train_prophet_model(prophet_data, periods=forecast_days)
            
            if model is None or forecast is None:
                return
            
            st.success("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
            
            accuracy_metrics = calculate_model_accuracy(prophet_data, model)
            if accuracy_metrics:
                show_accuracy_table(accuracy_metrics)
            
            show_forecast_statistics(filtered_df, forecast, forecast_days, selected_magazin, selected_segment, df)
            
            st.markdown("## üìà –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂")
            
            fig_main = plot_forecast(
                prophet_data, 
                forecast, 
                f"–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ - {selected_magazin} / {selected_segment}"
            )
            st.plotly_chart(fig_main, use_container_width=True, key="main_forecast")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—è—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
            st.markdown("## üìä –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –≤—ã—Ä—É—á–∫–∏")
            plot_monthly_analysis_with_forecast(
                df, selected_magazin, selected_segment, model, 
                forecast_days, remove_outliers, smooth_method if smooth_method != 'none' else None
            )
            
            st.markdown("## üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
            
            fig_components = plot_prophet_components(model, forecast)
            st.plotly_chart(fig_components, use_container_width=True, key="prophet_components")
            
            # === –ê–ù–ê–õ–ò–ó –î–ù–Ø –ù–ï–î–ï–õ–ò ===
            st.markdown("### üìÖ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
            filtered_df_weekday = filtered_df.copy()
            filtered_df_weekday['Weekday'] = filtered_df_weekday['Datasales'].dt.dayofweek
            filtered_df_weekday['Weekday_Name'] = filtered_df_weekday['Datasales'].dt.day_name()
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π
            weekday_translation = {
                'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
                'Wednesday': '–°—Ä–µ–¥–∞',
                'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
                'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
                'Saturday': '–°—É–±–±–æ—Ç–∞',
                'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
            }
            filtered_df_weekday['Weekday_Name_RU'] = filtered_df_weekday['Weekday_Name'].map(weekday_translation)
            
            weekday_stats = filtered_df_weekday.groupby(['Weekday', 'Weekday_Name_RU']).agg({
                'Qty': 'sum',
                'Sum': 'sum'
            }).reset_index().sort_values('Weekday')
            
            weekday_stats['Avg_Price'] = weekday_stats['Sum'] / weekday_stats['Qty']
            weekday_stats['Qty_Percent'] = (weekday_stats['Qty'] / weekday_stats['Qty'].sum() * 100)
            
            col1, col2 = st.columns(2)
            
            with col1:
                # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
                fig_weekday1 = go.Figure()
                
                colors = ['#ff6b6b' if qty == weekday_stats['Qty'].max() else '#1f77b4' 
                         for qty in weekday_stats['Qty']]
                
                fig_weekday1.add_trace(go.Bar(
                    x=weekday_stats['Weekday_Name_RU'],
                    y=weekday_stats['Qty'],
                    marker_color=colors,
                    text=weekday_stats['Qty'].round(0),
                    textposition='outside',
                    texttemplate='%{text:,.0f}<br>(%{customdata:.1f}%)',
                    customdata=weekday_stats['Qty_Percent'],
                    name='–ü—Ä–æ–¥–∞–∂–∏'
                ))
                
                fig_weekday1.update_layout(
                    title="üì¶ –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏",
                    xaxis_title="–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏",
                    yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂",
                    height=400,
                    showlegend=False
                )
                
                st.plotly_chart(fig_weekday1, use_container_width=True, key="weekday_sales")
                
                # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –∏ —Ö—É–¥—à–∏–π –¥–µ–Ω—å
                best_day = weekday_stats.loc[weekday_stats['Qty'].idxmax(), 'Weekday_Name_RU']
                worst_day = weekday_stats.loc[weekday_stats['Qty'].idxmin(), 'Weekday_Name_RU']
                best_qty = weekday_stats['Qty'].max()
                worst_qty = weekday_stats['Qty'].min()
                
                st.success(f"üèÜ **–õ—É—á—à–∏–π –¥–µ–Ω—å**: {best_day} ({best_qty:,.0f} —à—Ç)")
                st.error(f"üìâ **–°–ª–∞–±—ã–π –¥–µ–Ω—å**: {worst_day} ({worst_qty:,.0f} —à—Ç)")
            
            with col2:
                # –ì—Ä–∞—Ñ–∏–∫ –≤—ã—Ä—É—á–∫–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
                fig_weekday2 = go.Figure()
                
                colors_revenue = ['#2ecc71' if rev == weekday_stats['Sum'].max() else '#3498db' 
                                 for rev in weekday_stats['Sum']]
                
                fig_weekday2.add_trace(go.Bar(
                    x=weekday_stats['Weekday_Name_RU'],
                    y=weekday_stats['Sum'],
                    marker_color=colors_revenue,
                    text=weekday_stats['Sum'].round(0),
                    textposition='outside',
                    texttemplate='%{text:,.0f}',
                    name='–í—ã—Ä—É—á–∫–∞'
                ))
                
                fig_weekday2.update_layout(
                    title="üí∞ –í—ã—Ä—É—á–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏",
                    xaxis_title="–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏",
                    yaxis_title="–í—ã—Ä—É—á–∫–∞ (–ì–†–ù)",
                    height=400,
                    showlegend=False
                )
                
                st.plotly_chart(fig_weekday2, use_container_width=True, key="weekday_revenue")
                
                best_revenue_day = weekday_stats.loc[weekday_stats['Sum'].idxmax(), 'Weekday_Name_RU']
                best_revenue = weekday_stats['Sum'].max()
                
                st.success(f"üíé **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞**: {best_revenue_day} ({best_revenue:,.0f} –ì–†–ù)")
            
            # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂
            st.markdown("### ü•ß –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏")
            
            fig_pie = go.Figure(data=[go.Pie(
                labels=weekday_stats['Weekday_Name_RU'],
                values=weekday_stats['Qty'],
                hole=.4,
                marker=dict(colors=['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40', '#FF6384']),
                textinfo='label+percent',
                textposition='outside'
            )])
            
            fig_pie.update_layout(
                title="–î–æ–ª—è –ø—Ä–æ–¥–∞–∂ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏",
                height=450,
                showlegend=True
            )
            
            st.plotly_chart(fig_pie, use_container_width=True, key="weekday_pie")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
            st.markdown("#### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:")
            
            avg_qty = weekday_stats['Qty'].mean()
            weak_days = weekday_stats[weekday_stats['Qty'] < avg_qty * 0.8]['Weekday_Name_RU'].tolist()
            strong_days = weekday_stats[weekday_stats['Qty'] > avg_qty * 1.2]['Weekday_Name_RU'].tolist()
            
            if weak_days:
                st.markdown(f'<div class="problem-card">üìâ –°–ª–∞–±—ã–µ –¥–Ω–∏ ({", ".join(weak_days)}): –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∞–∫—Ü–∏–∏ –∏–ª–∏ —Å–∫–∏–¥–∫–∏ –¥–ª—è —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂</div>', unsafe_allow_html=True)
            
            if strong_days:
                st.markdown(f'<div class="insight-card">üöÄ –°–∏–ª—å–Ω—ã–µ –¥–Ω–∏ ({", ".join(strong_days)}): –û–±–µ—Å–ø–µ—á—å—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –∑–∞–ø–∞—Å —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞</div>', unsafe_allow_html=True)
            
            # === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ì–†–ê–§–ò–ö–ò ===
            st.markdown("### üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
            
            # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–æ–¥–∞–∂: –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ x –Ω–µ–¥–µ–ª—è –º–µ—Å—è—Ü–∞
            filtered_df_heatmap = filtered_df.copy()
            filtered_df_heatmap['Week'] = filtered_df_heatmap['Datasales'].dt.isocalendar().week
            filtered_df_heatmap['Weekday'] = filtered_df_heatmap['Datasales'].dt.dayofweek
            
            heatmap_data = filtered_df_heatmap.groupby(['Week', 'Weekday'])['Qty'].sum().reset_index()
            heatmap_pivot = heatmap_data.pivot(index='Week', columns='Weekday', values='Qty').fillna(0)
            
            # –ù–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫
            day_names = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
            heatmap_pivot.columns = [day_names[i] if i < len(day_names) else str(i) for i in heatmap_pivot.columns]
            
            fig_heatmap = go.Figure(data=go.Heatmap(
                z=heatmap_pivot.values,
                x=heatmap_pivot.columns,
                y=[f'–ù–µ–¥–µ–ª—è {int(w)}' for w in heatmap_pivot.index],
                colorscale='Blues',
                text=heatmap_pivot.values.round(0),
                texttemplate='%{text}',
                textfont={"size": 12},
                colorbar=dict(title="–ü—Ä–æ–¥–∞–∂–∏")
            ))
            
            fig_heatmap.update_layout(
                title="üóìÔ∏è –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–æ–¥–∞–∂",
                xaxis_title="–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏",
                yaxis_title="–ù–µ–¥–µ–ª—è",
                height=500
            )
            
            st.plotly_chart(fig_heatmap, use_container_width=True, key="sales_heatmap")
            
            st.markdown("## üèÜ –¢–æ–ø-10 –º–æ–¥–µ–ª–µ–π –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º")
            
            segments_top_models = get_top_models_by_segment(df, selected_magazin)
            
            if segments_top_models:
                tabs = st.tabs([f"üì¶ {segment}" for segment in segments_top_models.keys()])
                
                for tab, (segment, top_models) in zip(tabs, segments_top_models.items()):
                    with tab:
                        if not top_models.empty:
                            display_df = top_models[['Model', 'Qty', 'Sum', 'Price']].rename(columns={
                                'Model': 'üè∑Ô∏è –ú–æ–¥–µ–ª—å',
                                'Qty': 'üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                                'Sum': 'üí∞ –í—ã—Ä—É—á–∫–∞ (–ì–†–ù)',
                                'Price': 'üíµ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞'
                            })
                            
                            st.dataframe(display_df, use_container_width=True, hide_index=True)
                        else:
                            st.info("üîç –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞")
            
            st.markdown("## üí° –ò–Ω—Å–∞–π—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            
            insights, problems = generate_insights(df, forecast, selected_magazin, selected_segment)
            
            if problems:
                st.markdown("### üö® –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
                for problem in problems:
                    st.markdown(f'<div class="problem-card">{problem}</div>', unsafe_allow_html=True)
            
            st.markdown("### üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for insight in insights:
                st.markdown(f'<div class="insight-card">{insight}</div>', unsafe_allow_html=True)
            
            st.markdown("## üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –¥–Ω—è–º")
            
            forecast_display = forecast.tail(forecast_days).copy()
            segment_volatility = calculate_segment_volatility(df, selected_magazin, selected_segment)
            
            realistic, optimistic, pessimistic = get_forecast_scenarios(forecast_display, segment_volatility)
            
            detailed_forecast = pd.DataFrame({
                'üìÖ –î–∞—Ç–∞': pd.to_datetime(forecast_display['ds']).dt.strftime('%Y-%m-%d (%A)'),
                'üò∞ –ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π': pessimistic.round(0).astype(int),
                'üéØ –†–µ–∞–ª—å–Ω—ã–π': realistic.round(0).astype(int),
                'üöÄ –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π': optimistic.round(0).astype(int),
                'üìä –¢—Ä–µ–Ω–¥': forecast_display['trend'].round(0).astype(int)
            })
            
            st.dataframe(detailed_forecast, use_container_width=True, hide_index=True)
            
            st.markdown("## üìà –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                avg_daily_forecast = realistic.mean()
                st.metric(
                    "üìä –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏/–¥–µ–Ω—å",
                    f"{avg_daily_forecast:.0f}",
                    delta=f"{avg_daily_forecast - prophet_data['y'].tail(30).mean():.0f}"
                )
            
            with col2:
                total_forecast = realistic.sum()
                st.metric(
                    "üì¶ –û–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑",
                    f"{total_forecast:.0f}",
                    delta=f"{total_forecast - prophet_data['y'].tail(forecast_days).sum():.0f}"
                )
            
            with col3:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
                if len(filtered_df) > 0 and filtered_df['Qty'].sum() > 0:
                    avg_price = filtered_df['Sum'].sum() / filtered_df['Qty'].sum()
                else:
                    avg_price = 0
                
                forecast_revenue = total_forecast * avg_price
                st.metric(
                    "üí∞ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏",
                    f"{forecast_revenue:,.0f} –ì–†–ù"
                )
            
            with col4:
                confidence_score = (1 - segment_volatility) * 100
                st.metric(
                    "üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞",
                    f"{confidence_score:.0f}%"
                )
            
            st.markdown("## üì• –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            # === –ò–¢–û–ì–û–í–´–ï –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===
            st.markdown("---")
            st.markdown("## üéì –ò—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            total_sales = filtered_df['Qty'].sum()
            total_revenue = filtered_df['Sum'].sum()
            avg_daily_sales = filtered_df.groupby('Datasales')['Qty'].sum().mean()
            
            # –¢—Ä–µ–Ω–¥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 30 –¥–Ω–µ–π
            last_30_days = filtered_df[filtered_df['Datasales'] >= filtered_df['Datasales'].max() - pd.Timedelta(days=30)]
            trend_last_month = last_30_days['Qty'].sum()
            
            # –ü—Ä–æ–≥–Ω–æ–∑
            forecast_total = realistic.sum()
            forecast_revenue = forecast_total * avg_price if avg_price > 0 else 0
            
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            daily_volatility = prophet_data['y'].std() / prophet_data['y'].mean() if prophet_data['y'].mean() > 0 else 0
            
            # –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∞–Ω–∞–ª–∏–∑
            filtered_df_weekday = filtered_df.copy()
            filtered_df_weekday['Weekday'] = filtered_df_weekday['Datasales'].dt.dayofweek
            best_weekday = filtered_df_weekday.groupby('Weekday')['Qty'].sum().idxmax()
            weekday_names = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
            best_day_name = weekday_names[best_weekday]
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–æ–≤
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown("### üìä –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
                st.markdown(f"""
                <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 20px; border-radius: 10px; color: white;">
                    <p style="font-size: 14px; margin: 5px 0;"><strong>üì¶ –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ:</strong> {total_sales:,.0f} —à—Ç</p>
                    <p style="font-size: 14px; margin: 5px 0;"><strong>üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:</strong> {total_revenue:,.0f} –ì–†–ù</p>
                    <p style="font-size: 14px; margin: 5px 0;"><strong>üìà –°—Ä–µ–¥–Ω–µ–µ/–¥–µ–Ω—å:</strong> {avg_daily_sales:.1f} —à—Ç</p>
                    <p style="font-size: 14px; margin: 5px 0;"><strong>üíµ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞:</strong> {avg_price:.2f} –ì–†–ù</p>
                    <p style="font-size: 14px; margin: 5px 0;"><strong>üìÖ –õ—É—á—à–∏–π –¥–µ–Ω—å:</strong> {best_day_name}</p>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                st.markdown("### üîÆ –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
                forecast_growth = ((forecast_total / prophet_data['y'].tail(forecast_days).sum()) - 1) * 100 if prophet_data['y'].tail(forecast_days).sum() > 0 else 0
                
                st.markdown(f"""
                <div style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); padding: 20px; border-radius: 10px; color: white;">
                    <p style="font-size: 14px; margin: 5px 0;"><strong>üìä –ü—Ä–æ–≥–Ω–æ–∑ ({forecast_days} –¥–Ω):</strong> {forecast_total:.0f} —à—Ç</p>
                    <p style="font-size: 14px; margin: 5px 0;"><strong>üí∞ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏:</strong> {forecast_revenue:,.0f} –ì–†–ù</p>
                    <p style="font-size: 14px; margin: 5px 0;"><strong>üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ:</strong> {forecast_growth:+.1f}%</p>
                    <p style="font-size: 14px; margin: 5px 0;"><strong>üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</strong> {confidence_score:.0f}%</p>
                    <p style="font-size: 14px; margin: 5px 0;"><strong>üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:</strong> {daily_volatility*100:.1f}%</p>
                </div>
                """, unsafe_allow_html=True)
            
            with col3:
                st.markdown("### ‚ö° –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏
                if accuracy_metrics:
                    mape = accuracy_metrics['MAPE']
                    r2 = accuracy_metrics['R2']
                    
                    if mape < 10 and r2 > 0.8:
                        model_quality = "üü¢ –û—Ç–ª–∏—á–Ω–æ–µ"
                        quality_color = "#2ecc71"
                    elif mape < 20 and r2 > 0.6:
                        model_quality = "üü° –•–æ—Ä–æ—à–µ–µ"
                        quality_color = "#f39c12"
                    else:
                        model_quality = "üî¥ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ"
                        quality_color = "#e74c3c"
                    
                    st.markdown(f"""
                    <div style="background: {quality_color}; padding: 20px; border-radius: 10px; color: white;">
                        <p style="font-size: 16px; margin: 5px 0; font-weight: bold;">{model_quality}</p>
                        <p style="font-size: 14px; margin: 5px 0;"><strong>MAE:</strong> {accuracy_metrics['MAE']:.2f}</p>
                        <p style="font-size: 14px; margin: 5px 0;"><strong>MAPE:</strong> {mape:.1f}%</p>
                        <p style="font-size: 14px; margin: 5px 0;"><strong>R¬≤:</strong> {r2:.3f}</p>
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    st.info("–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–µ –≤—ã–≤–æ–¥—ã
            st.markdown("### üìù –î–µ—Ç–∞–ª—å–Ω—ã–µ –≤—ã–≤–æ–¥—ã")
            
            conclusions = []
            
            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
            if forecast_growth > 10:
                conclusions.append({
                    'emoji': 'üöÄ',
                    'title': '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–Ω–¥',
                    'text': f'–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–æ—Å—Ç –ø—Ä–æ–¥–∞–∂ –Ω–∞ {forecast_growth:.1f}%. –≠—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è.',
                    'type': 'success'
                })
            elif forecast_growth < -10:
                conclusions.append({
                    'emoji': 'üìâ',
                    'title': '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–Ω–¥',
                    'text': f'–û–∂–∏–¥–∞–µ—Ç—Å—è —Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –Ω–∞ {abs(forecast_growth):.1f}%. –¢—Ä–µ–±—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è.',
                    'type': 'error'
                })
            else:
                conclusions.append({
                    'emoji': 'üìä',
                    'title': '–°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥',
                    'text': f'–ü—Ä–æ–¥–∞–∂–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω—ã–º–∏ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º {forecast_growth:+.1f}%.',
                    'type': 'info'
                })
            
            # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            if daily_volatility < 0.2:
                conclusions.append({
                    'emoji': '‚úÖ',
                    'title': '–ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å',
                    'text': f'–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {daily_volatility*100:.1f}% —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Å–ø—Ä–æ—Å. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∞—Å–æ–≤ —É–ø—Ä–æ—â–∞–µ—Ç—Å—è.',
                    'type': 'success'
                })
            elif daily_volatility > 0.5:
                conclusions.append({
                    'emoji': '‚ö†Ô∏è',
                    'title': '–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å',
                    'text': f'–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {daily_volatility*100:.1f}% —Ç—Ä–µ–±—É–µ—Ç –≥–∏–±–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∞—Å–∞–º–∏ –∏ –±—É—Ñ–µ—Ä–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–æ–≤.',
                    'type': 'warning'
                })
            
            # –ê–Ω–∞–ª–∏–∑ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
            if accuracy_metrics and accuracy_metrics['MAPE'] < 15:
                conclusions.append({
                    'emoji': 'üéØ',
                    'title': '–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞',
                    'text': f'MAPE {accuracy_metrics["MAPE"]:.1f}% –≥–æ–≤–æ—Ä–∏—Ç –æ –≤—ã—Å–æ–∫–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞. –ú–æ–∂–Ω–æ —É–≤–µ—Ä–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.',
                    'type': 'success'
                })
            elif accuracy_metrics and accuracy_metrics['MAPE'] > 25:
                conclusions.append({
                    'emoji': '‚ö°',
                    'title': '–£–º–µ—Ä–µ–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å',
                    'text': f'MAPE {accuracy_metrics["MAPE"]:.1f}% —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤.',
                    'type': 'warning'
                })
            
            # –ê–Ω–∞–ª–∏–∑ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            weekday_std = filtered_df_weekday.groupby('Weekday')['Qty'].sum().std()
            if weekday_std > avg_daily_sales * 0.3:
                conclusions.append({
                    'emoji': 'üìÖ',
                    'title': '–ù–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏',
                    'text': f'–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö –ø–æ –¥–Ω—è–º ({best_day_name} - –ª—É—á—à–∏–π). –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∞.',
                    'type': 'info'
                })
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–≤–æ–¥–æ–≤
            for conclusion in conclusions:
                if conclusion['type'] == 'success':
                    st.success(f"{conclusion['emoji']} **{conclusion['title']}**: {conclusion['text']}")
            
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            st.markdown("### üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            
            recommendations_strategic = []
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–∫—É–ø–∫–∞–º
            optimal_stock = forecast_total * 1.2  # +20% –±—É—Ñ–µ—Ä
            recommendations_strategic.append({
                'category': 'üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞–º–∏',
                'items': [
                    f"–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å –Ω–∞ {forecast_days} –¥–Ω–µ–π: {optimal_stock:.0f} –µ–¥–∏–Ω–∏—Ü",
                    f"–°—Ä–µ–¥–Ω–∏–π –¥–Ω–µ–≤–Ω–æ–π –∑–∞–ø–∞—Å: {optimal_stock/forecast_days:.0f} –µ–¥–∏–Ω–∏—Ü",
                    "–û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É ¬´—Ç–æ—á–Ω–æ –≤–æ–≤—Ä–µ–º—è¬ª –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ö–æ–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤" if daily_volatility < 0.3 else "–î–µ—Ä–∂–∏—Ç–µ –±—É—Ñ–µ—Ä–Ω—ã–π –∑–∞–ø–∞—Å 30-40% –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"
                ]
            })
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é
            price_recommendations = []
            if len(filtered_df) >= 30:
                recent_price = filtered_df.tail(30)['Sum'].sum() / filtered_df.tail(30)['Qty'].sum() if filtered_df.tail(30)['Qty'].sum() > 0 else 0
                older_price = filtered_df.head(30)['Sum'].sum() / filtered_df.head(30)['Qty'].sum() if filtered_df.head(30)['Qty'].sum() > 0 else 0
                
                if recent_price > older_price * 1.1:
                    price_recommendations.append("–¶–µ–Ω—ã —Ä–∞—Å—Ç—É—Ç - —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–µ–∞–∫—Ü–∏–µ–π —Å–ø—Ä–æ—Å–∞")
                elif recent_price < older_price * 0.9:
                    price_recommendations.append("–¶–µ–Ω—ã –ø–∞–¥–∞—é—Ç - –≤–æ–∑–º–æ–∂–Ω–∞ —Ü–µ–Ω–æ–≤–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è")
                else:
                    price_recommendations.append("–¶–µ–Ω—ã —Å—Ç–∞–±–∏–ª—å–Ω—ã - —Ö–æ—Ä–æ—à–æ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            price_recommendations.append(f"–¢–µ–∫—É—â–∞—è —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:.2f} –ì–†–ù")
            price_recommendations.append("–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Å–ø—Ä–æ—Å–∞ —Å A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ü–µ–Ω")
            
            recommendations_strategic.append({
                'category': 'üí∞ –¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
                'items': price_recommendations
            })
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É
            marketing_recommendations = []
            
            if best_weekday in [5, 6]:  # –°—É–±–±–æ—Ç–∞, –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                marketing_recommendations.append("–ü–∏–∫–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ - —É—Å–∏–ª—å—Ç–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –≤ —á–µ—Ç–≤–µ—Ä–≥-–ø—è—Ç–Ω–∏—Ü—É")
            else:
                marketing_recommendations.append(f"–ü–∏–∫ –ø—Ä–æ–¥–∞–∂ –≤ {best_day_name} - –ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∞–∫—Ü–∏–∏ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å")
            
            weak_days = filtered_df_weekday.groupby('Weekday')['Qty'].sum()
            if weak_days.min() < weak_days.mean() * 0.7:
                marketing_recommendations.append("–ü—Ä–æ–≤–æ–¥–∏—Ç–µ –∞–∫—Ü–∏–∏ ¬´—Å—á–∞—Å—Ç–ª–∏–≤—ã–µ —á–∞—Å—ã¬ª –≤ —Å–ª–∞–±—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏")
            
            if forecast_growth < 0:
                marketing_recommendations.append("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–º–æ-–∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø—Ä–æ—Å–∞")
            
            recommendations_strategic.append({
                'category': 'üì¢ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ –ø—Ä–æ–¥–∞–∂–∏',
                'items': marketing_recommendations
            })
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—É
            staff_recommendations = [
                f"–ú–∞–∫—Å–∏–º—É–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –≤ {best_day_name}",
                "–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –§–û–¢",
                f"–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ {int(optimal_stock/(forecast_days*8)):.0f} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —á–∞—Å –≤ –ø–∏–∫–æ–≤—ã–µ –¥–Ω–∏"
            ]
            
            recommendations_strategic.append({
                'category': 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º',
                'items': staff_recommendations
            })
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            for rec in recommendations_strategic:
                with st.expander(f"### {rec['category']}", expanded=True):
                    for item in rec['items']:
                        st.markdown(f"- {item}")
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
            st.markdown("### üéñÔ∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            
            if forecast_growth > 15:
                priority = "üöÄ **–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ**: –£–≤–µ–ª–∏—á—å—Ç–µ –∑–∞–∫—É–ø–∫–∏ –Ω–∞ 20-30% –∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ª–æ–≥–∏—Å—Ç–∏–∫—É –∫ —Ä–æ—Å—Ç—É —Å–ø—Ä–æ—Å–∞"
                priority_color = "#2ecc71"
            elif forecast_growth < -15:
                priority = "üî• **–ê–Ω—Ç–∏–∫—Ä–∏–∑–∏—Å–Ω—ã–µ –º–µ—Ä—ã**: –°—Ä–æ—á–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é –∏ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç"
                priority_color = "#e74c3c"
            elif daily_volatility > 0.5:
                priority = "‚öñÔ∏è **–°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è**: –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–∏ –∫–æ–ª–µ–±–∞–Ω–∏–π —Å–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–º–æ-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
                priority_color = "#f39c12"
            else:
                priority = "üìä **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è**: –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"
                priority_color = "#3498db"
            
            st.markdown(f"""
            <div style="background: {priority_color}; padding: 20px; border-radius: 10px; color: white; font-size: 18px; text-align: center; font-weight: bold; margin: 20px 0;">
                {priority}
            </div>
            """, unsafe_allow_html=True)
            
            st.markdown("---")
            st.markdown("## üì• –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            # === –ú–ê–†–ö–ï–¢–ò–ù–ì–û–í–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê ===
            st.markdown("---")
            st.markdown("## üì¢ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
            
            st.markdown("### üéØ –ö–ª—é—á–µ–≤—ã–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
            
            # –†–∞—Å—á–µ—Ç –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
            # 1. Customer Lifetime Value (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π)
            avg_transaction = filtered_df['Sum'].sum() / len(filtered_df) if len(filtered_df) > 0 else 0
            transactions_per_day = len(filtered_df) / ((filtered_df['Datasales'].max() - filtered_df['Datasales'].min()).days + 1)
            
            # 2. ABC –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤
            product_analysis = filtered_df.groupby('Model').agg({
                'Qty': 'sum',
                'Sum': 'sum'
            }).reset_index()
            product_analysis = product_analysis.sort_values('Sum', ascending=False)
            product_analysis['Cumulative_Revenue'] = product_analysis['Sum'].cumsum()
            product_analysis['Cumulative_Percent'] = (product_analysis['Cumulative_Revenue'] / product_analysis['Sum'].sum()) * 100
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è ABC
            product_analysis['Category'] = 'C'
            product_analysis.loc[product_analysis['Cumulative_Percent'] <= 80, 'Category'] = 'A'
            product_analysis.loc[(product_analysis['Cumulative_Percent'] > 80) & (product_analysis['Cumulative_Percent'] <= 95), 'Category'] = 'B'
            
            # 3. –ê–Ω–∞–ª–∏–∑ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–æ–≤–∞—Ä–∞
            first_sale = filtered_df.groupby('Model')['Datasales'].min()
            last_sale = filtered_df.groupby('Model')['Datasales'].max()
            product_lifecycle = pd.DataFrame({
                'First_Sale': first_sale,
                'Last_Sale': last_sale,
                'Days_Active': (last_sale - first_sale).dt.days
            })
            
            # 4. Conversion rate (—É—Å–ª–æ–≤–Ω—ã–π - –ø—Ä–æ–¥–∞–∂–∏ vs –ø—Ä–æ—Å–º–æ—Ç—Ä—ã)
            daily_products = filtered_df.groupby('Datasales')['Art'].nunique().mean()
            daily_sales = filtered_df.groupby('Datasales')['Qty'].sum().mean()
            conversion_rate = (daily_sales / daily_products) if daily_products > 0 else 0
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric(
                    "üí≥ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫",
                    f"{avg_transaction:,.0f} –ì–†–ù",
                    help="–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"
                )
            
            with col2:
                st.metric(
                    "üîÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π/–¥–µ–Ω—å",
                    f"{transactions_per_day:.1f}",
                    help="–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –¥–µ–Ω—å"
                )
            
            with col3:
                st.metric(
                    "üìä Conversion Rate",
                    f"{conversion_rate:.1f}x",
                    help="–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Ç–æ–≤–∞—Ä–∞–º"
                )
            
            with col4:
                category_a_count = (product_analysis['Category'] == 'A').sum()
                st.metric(
                    "‚≠ê –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ A",
                    f"{category_a_count}",
                    help="–¢–æ–≤–∞—Ä—ã, –¥–∞—é—â–∏–µ 80% –≤—ã—Ä—É—á–∫–∏"
                )
            
            # ABC –ê–Ω–∞–ª–∏–∑ - —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            st.markdown("### üìä ABC-–∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ (–ü—Ä–∞–≤–∏–ª–æ –ü–∞—Ä–µ—Ç–æ)")
            
            # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            abc_summary = product_analysis.groupby('Category').agg({
                'Model': 'count',
                'Sum': 'sum'
            }).reset_index()
            abc_summary.columns = ['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π', '–î–æ—Ö–æ–¥ (–ì–†–ù)']
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ –¥–æ—Ö–æ–¥–∞
            total_revenue = abc_summary['–î–æ—Ö–æ–¥ (–ì–†–ù)'].sum()
            abc_summary['–î–æ–ª—è –æ—Ç –æ–±—â–µ–≥–æ –¥–æ—Ö–æ–¥–∞ %'] = (abc_summary['–î–æ—Ö–æ–¥ (–ì–†–ù)'] / total_revenue * 100).round(2)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º A, B, C
            category_order = {'A': 0, 'B': 1, 'C': 2}
            abc_summary['sort_key'] = abc_summary['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].map(category_order)
            abc_summary = abc_summary.sort_values('sort_key').drop('sort_key', axis=1)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å —ç–º–æ–¥–∑–∏
            abc_summary['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] = abc_summary['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].map({
                'A': '‚≠ê –ö–∞—Ç–µ–≥–æ—Ä–∏—è A (80% –≤—ã—Ä—É—á–∫–∏)',
                'B': 'üî∂ –ö–∞—Ç–µ–≥–æ—Ä–∏—è B (15% –≤—ã—Ä—É—á–∫–∏)',
                'C': 'üîª –ö–∞—Ç–µ–≥–æ—Ä–∏—è C (5% –≤—ã—Ä—É—á–∫–∏)'
            })
            
            st.dataframe(
                abc_summary.style.format({
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π': '{:,.0f}',
                    '–î–æ—Ö–æ–¥ (–ì–†–ù)': '{:,.0f}',
                    '–î–æ–ª—è –æ—Ç –æ–±—â–µ–≥–æ –¥–æ—Ö–æ–¥–∞ %': '{:.2f}%'
                }).background_gradient(subset=['–î–æ—Ö–æ–¥ (–ì–†–ù)'], cmap='Greens'),
                use_container_width=True,
                hide_index=True
            )
            
            # –¢–æ–ø —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ A
            st.markdown("#### ‚≠ê –¢–æ–ø-10 —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ A (–ø—Ä–∏–Ω–æ—Å—è—Ç –Ω–∞–∏–±–æ–ª—å—à—É—é –≤—ã—Ä—É—á–∫—É)")
            
            top_a_products = product_analysis[product_analysis['Category'] == 'A'].head(10)
            top_a_display = top_a_products[['Model', 'Qty', 'Sum']].copy()
            top_a_display['Revenue_Share_%'] = (top_a_display['Sum'] / filtered_df['Sum'].sum() * 100).round(2)
            top_a_display = top_a_display.rename(columns={
                'Model': 'üè∑Ô∏è –ú–æ–¥–µ–ª—å',
                'Qty': 'üì¶ –ü—Ä–æ–¥–∞–Ω–æ',
                'Sum': 'üí∞ –í—ã—Ä—É—á–∫–∞ (–ì–†–ù)',
                'Revenue_Share_%': 'üìä –î–æ–ª—è –≤—ã—Ä—É—á–∫–∏ %'
            })
            
            st.dataframe(
                top_a_display.style.format({
                    'üì¶ –ü—Ä–æ–¥–∞–Ω–æ': '{:,.0f}',
                    'üí∞ –í—ã—Ä—É—á–∫–∞ (–ì–†–ù)': '{:,.0f}',
                    'üìä –î–æ–ª—è –≤—ã—Ä—É—á–∫–∏ %': '{:.2f}%'
                }).background_gradient(subset=['üí∞ –í—ã—Ä—É—á–∫–∞ (–ì–†–ù)'], cmap='Greens'),
                use_container_width=True,
                hide_index=True
            )
            
            # –¢–û–ü-20 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            st.markdown("### üèÜ –¢–û–ü-20 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞
            # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ 2 –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            mid_date = filtered_df['Datasales'].min() + (filtered_df['Datasales'].max() - filtered_df['Datasales'].min()) / 2
            
            period1 = filtered_df[filtered_df['Datasales'] < mid_date]
            period2 = filtered_df[filtered_df['Datasales'] >= mid_date]
            
            # –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
            sales_period1 = period1.groupby('Model')['Qty'].sum()
            sales_period2 = period2.groupby('Model')['Qty'].sum()
            
            # –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏
            total_sales_by_model = filtered_df.groupby('Model').agg({
                'Qty': 'sum',
                'Sum': 'sum'
            })
            
            # –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
            trend_data = pd.DataFrame({
                'Model': total_sales_by_model.index,
                'Total_Qty': total_sales_by_model['Qty'].values,
                'Total_Revenue': total_sales_by_model['Sum'].values,
                'Period1_Qty': sales_period1.reindex(total_sales_by_model.index, fill_value=0).values,
                'Period2_Qty': sales_period2.reindex(total_sales_by_model.index, fill_value=0).values
            })
            
            # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            trend_data["Change_%"] = np.where(
                trend_data["Period1_Qty"] > 0,
                ((trend_data["Period2_Qty"] - trend_data["Period1_Qty"]) / trend_data["Period1_Qty"]) * 100,
                0
            )
            # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            trend_data["Change_%"] = np.where(
                trend_data["Period1_Qty"] > 0,
                ((trend_data["Period2_Qty"] - trend_data["Period1_Qty"]) / trend_data["Period1_Qty"]) * 100,
                0
            )
            # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            trend_data["Change_%"] = np.where(
                trend_data["Period1_Qty"] > 0,
                ((trend_data["Period2_Qty"] - trend_data["Period1_Qty"]) / trend_data["Period1_Qty"]) * 100,
                0
            )
            
            # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (—á–µ–º –º–µ–Ω—å—à–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ, —Ç–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ)
            trend_data['Stability_Score'] = 100 - abs(trend_data['Change_%']).clip(upper=100)
            
            # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
            tab1, tab2, tab3 = st.tabs(["üèÜ –¢–û–ü-20 –õ—É—á—à–∏—Ö", "üìä –¢–û–ü-20 –°—Ç–∞–±–∏–ª—å–Ω—ã—Ö", "üìâ –¢–û–ü-20 –ü–∞–¥–µ–Ω–∏–µ"])
            
            # –¢–û–ü-20 –õ–£–ß–®–ò–•
            with tab1:
                st.markdown("#### üèÜ –¢–û–ü-20 –º–æ–¥–µ–ª–µ–π –ø–æ –≤—ã—Ä—É—á–∫–µ")
                
                top_20_best = trend_data.nlargest(20, 'Total_Revenue').copy()
                top_20_best['Avg_Price'] = top_20_best['Total_Revenue'] / top_20_best['Total_Qty']
                
                # –ì—Ä–∞—Ñ–∏–∫
                fig_best = go.Figure()
                
                fig_best.add_trace(go.Bar(
                    y=top_20_best['Model'],
                    x=top_20_best['Total_Revenue'],
                    orientation='h',
                    marker=dict(
                        color=top_20_best['Total_Revenue'],
                        colorscale='Greens',
                        showscale=True,
                        colorbar=dict(title="–í—ã—Ä—É—á–∫–∞<br>–ì–†–ù")
                    ),
                    text=top_20_best['Total_Revenue'].apply(lambda x: f'{x:,.0f}'),
                    textposition='outside',
                    hovertemplate='<b>%{y}</b><br>–í—ã—Ä—É—á–∫–∞: %{x:,.0f} –ì–†–ù<br><extra></extra>'
                ))
                
                fig_best.update_layout(
                    title="–¢–û–ü-20 –º–æ–¥–µ–ª–µ–π –ø–æ –≤—ã—Ä—É—á–∫–µ",
                    xaxis_title="–í—ã—Ä—É—á–∫–∞ (–ì–†–ù)",
                    yaxis_title="–ú–æ–¥–µ–ª—å",
                    height=600,
                    yaxis={'categoryorder': 'total ascending'}
                )
                
                st.plotly_chart(fig_best, use_container_width=True, key="top20_best")
                
                # –¢–∞–±–ª–∏—Ü–∞
                st.markdown("##### üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
                
                display_best = top_20_best[['Model', 'Total_Qty', 'Total_Revenue', 'Avg_Price', 'Change_%']].copy()
                display_best = display_best.reset_index(drop=True)
                display_best.index = display_best.index + 1
                display_best = display_best.rename(columns={
                    'Model': 'üè∑Ô∏è –ú–æ–¥–µ–ª—å',
                    'Total_Qty': 'üì¶ –ü—Ä–æ–¥–∞–Ω–æ',
                    'Total_Revenue': 'üí∞ –í—ã—Ä—É—á–∫–∞ (–ì–†–ù)',
                    'Avg_Price': 'üíµ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞',
                    'Change_%': 'üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ %'
                })
                
                st.dataframe(
                    display_best.style.format({
                        'üì¶ –ü—Ä–æ–¥–∞–Ω–æ': '{:,.0f}',
                        'üí∞ –í—ã—Ä—É—á–∫–∞ (–ì–†–ù)': '{:,.0f}',
                        'üíµ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞': '{:.2f}',
                        'üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ %': '{:+.1f}%'
                    }).background_gradient(subset=['üí∞ –í—ã—Ä—É—á–∫–∞ (–ì–†–ù)'], cmap='Greens')
                    .background_gradient(subset=['üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ %'], cmap='RdYlGn', vmin=-50, vmax=50),
                    use_container_width=True
                )
                
                # –ò–Ω—Å–∞–π—Ç—ã
                st.success(f"üíé **–õ–∏–¥–µ—Ä –ø—Ä–æ–¥–∞–∂**: {top_20_best.iloc[0]['Model']} - –≤—ã—Ä—É—á–∫–∞ {top_20_best.iloc[0]['Total_Revenue']:,.0f} –ì–†–ù")
                
                growth_products = top_20_best[top_20_best['Change_%'] > 20]
                if len(growth_products) > 0:
                    st.info(f"üöÄ **–†–∞—Å—Ç—É—â–∏–µ —Ö–∏—Ç—ã**: {len(growth_products)} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–æ—Å—Ç –±–æ–ª–µ–µ 20%")
            
            # –¢–û–ü-20 –°–¢–ê–ë–ò–õ–¨–ù–´–•
            with tab2:
                st.markdown("#### üìä –¢–û–ü-20 —Å–∞–º—ã—Ö —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
                st.caption("–¢–æ–≤–∞—Ä—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∫–æ–ª–µ–±–∞–Ω–∏—è–º–∏ –ø—Ä–æ–¥–∞–∂ –º–µ–∂–¥—É –ø–µ—Ä–∏–æ–¥–∞–º–∏")
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–¥–∞–≤–∞–ª–∏—Å—å –≤ –æ–±–æ–∏—Ö –ø–µ—Ä–∏–æ–¥–∞—Ö
                stable_products = trend_data[(trend_data['Period1_Qty'] > 0) & (trend_data['Period2_Qty'] > 0)].copy()
                top_20_stable = stable_products.nlargest(20, 'Stability_Score')
                top_20_stable['Avg_Price'] = top_20_stable['Total_Revenue'] / top_20_stable['Total_Qty']
                
                # –ì—Ä–∞—Ñ–∏–∫
                fig_stable = go.Figure()
                
                fig_stable.add_trace(go.Bar(
                    y=top_20_stable['Model'],
                    x=top_20_stable['Stability_Score'],
                    orientation='h',
                    marker=dict(
                        color=top_20_stable['Stability_Score'],
                        colorscale='Blues',
                        showscale=True,
                        colorbar=dict(title="–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å<br>%")
                    ),
                    text=top_20_stable['Stability_Score'].apply(lambda x: f'{x:.1f}'),
                    textposition='outside',
                    hovertemplate='<b>%{y}</b><br>–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: %{x:.1f}%<br><extra></extra>'
                ))
                
                fig_stable.update_layout(
                    title="–¢–û–ü-20 —Å–∞–º—ã—Ö —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π",
                    xaxis_title="–ò–Ω–¥–µ–∫—Å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ (%)",
                    yaxis_title="–ú–æ–¥–µ–ª—å",
                    height=600,
                    yaxis={'categoryorder': 'total ascending'}
                )
                
                st.plotly_chart(fig_stable, use_container_width=True, key="top20_stable")
                
                # –¢–∞–±–ª–∏—Ü–∞
                st.markdown("##### üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
                
                display_stable = top_20_stable[['Model', 'Total_Qty', 'Total_Revenue', 'Avg_Price', 'Change_%', 'Stability_Score']].copy()
                display_stable = display_stable.reset_index(drop=True)
                display_stable.index = display_stable.index + 1
                display_stable = display_stable.rename(columns={
                    'Model': 'üè∑Ô∏è –ú–æ–¥–µ–ª—å',
                    'Total_Qty': 'üì¶ –ü—Ä–æ–¥–∞–Ω–æ',
                    'Total_Revenue': 'üí∞ –í—ã—Ä—É—á–∫–∞ (–ì–†–ù)',
                    'Avg_Price': 'üíµ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞',
                    'Change_%': 'üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ %',
                    'Stability_Score': 'üìä –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å %'
                })
                
                st.dataframe(
                    display_stable.style.format({
                        'üì¶ –ü—Ä–æ–¥–∞–Ω–æ': '{:,.0f}',
                        'üí∞ –í—ã—Ä—É—á–∫–∞ (–ì–†–ù)': '{:,.0f}',
                        'üíµ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞': '{:.2f}',
                        'üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ %': '{:+.1f}%',
                        'üìä –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å %': '{:.1f}%'
                    }).background_gradient(subset=['üìä –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å %'], cmap='Blues'),
                    use_container_width=True
                )
                
                # –ò–Ω—Å–∞–π—Ç—ã
                st.success(f"üéØ **–°–∞–º—ã–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π**: {top_20_stable.iloc[0]['Model']} - —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å {top_20_stable.iloc[0]['Stability_Score']:.1f}%")
                st.info(f"üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: –°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–¥–µ–∞–ª—å–Ω—ã –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –Ω–∞–ª–∏—á–∏—è –Ω–∞ —Å–∫–ª–∞–¥–µ")
            
            # –¢–û–ü-20 –ü–ê–î–ï–ù–ò–ï
            with tab3:
                st.markdown("#### üìâ –¢–û–ü-20 –º–æ–¥–µ–ª–µ–π —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –ø–∞–¥–µ–Ω–∏–µ–º")
                st.caption("–¢–æ–≤–∞—Ä—ã, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂")
                
                # –¢–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å –ø–∞–¥–µ–Ω–∏–µ–º
                declining_products = trend_data[trend_data['Change_%'] < 0].copy()
                
                if len(declining_products) > 0:
                    top_20_declining = declining_products.nsmallest(20, 'Change_%')
                    top_20_declining['Avg_Price'] = top_20_declining['Total_Revenue'] / top_20_declining['Total_Qty']
                    
                    # –ì—Ä–∞—Ñ–∏–∫
                    fig_decline = go.Figure()
                    
                    fig_decline.add_trace(go.Bar(
                        y=top_20_declining['Model'],
                        x=top_20_declining['Change_%'],
                        orientation='h',
                        marker=dict(
                            color=top_20_declining['Change_%'],
                            colorscale='Reds_r',
                            showscale=True,
                            colorbar=dict(title="–ü–∞–¥–µ–Ω–∏–µ<br>%")
                        ),
                        text=top_20_declining['Change_%'].apply(lambda x: f'{x:.1f}%'),
                        textposition='outside',
                        hovertemplate='<b>%{y}</b><br>–ü–∞–¥–µ–Ω–∏–µ: %{x:.1f}%<br><extra></extra>'
                    ))
                    
                    fig_decline.update_layout(
                        title="–¢–û–ü-20 –º–æ–¥–µ–ª–µ–π —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –ø–∞–¥–µ–Ω–∏–µ–º –ø—Ä–æ–¥–∞–∂",
                        xaxis_title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)",
                        yaxis_title="–ú–æ–¥–µ–ª—å",
                        height=600,
                        yaxis={'categoryorder': 'total descending'}
                    )
                    
                    st.plotly_chart(fig_decline, use_container_width=True, key="top20_decline")
                    
                    # –¢–∞–±–ª–∏—Ü–∞
                    st.markdown("##### üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
                    
                    display_decline = top_20_declining[['Model', 'Total_Qty', 'Total_Revenue', 'Period1_Qty', 'Period2_Qty', 'Change_%']].copy()
                    display_decline = display_decline.reset_index(drop=True)
                    display_decline.index = display_decline.index + 1
                    display_decline = display_decline.rename(columns={
                        'Model': 'üè∑Ô∏è –ú–æ–¥–µ–ª—å',
                        'Total_Qty': 'üì¶ –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ',
                        'Total_Revenue': 'üí∞ –í—ã—Ä—É—á–∫–∞ (–ì–†–ù)',
                        'Period1_Qty': 'üìä 1-–π –ø–µ—Ä–∏–æ–¥',
                        'Period2_Qty': 'üìä 2-–π –ø–µ—Ä–∏–æ–¥',
                        'Change_%': 'üìâ –ü–∞–¥–µ–Ω–∏–µ %'
                    })
                    
                    st.dataframe(
                        display_decline.style.format({
                            'üì¶ –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ': '{:,.0f}',
                            'üí∞ –í—ã—Ä—É—á–∫–∞ (–ì–†–ù)': '{:,.0f}',
                            'üìä 1-–π –ø–µ—Ä–∏–æ–¥': '{:,.0f}',
                            'üìä 2-–π –ø–µ—Ä–∏–æ–¥': '{:,.0f}',
                            'üìâ –ü–∞–¥–µ–Ω–∏–µ %': '{:.1f}%'
                        }).background_gradient(subset=['üìâ –ü–∞–¥–µ–Ω–∏–µ %'], cmap='Reds_r'),
                        use_container_width=True
                    )
                    
                    # –ê–ª–µ—Ä—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    critical_decline = top_20_declining[top_20_declining['Change_%'] < -50]
                    
                    if len(critical_decline) > 0:
                        st.error(f"üö® **–ö–†–ò–¢–ò–ß–ù–û**: {len(critical_decline)} —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–¥–µ–Ω–∏–µ–º –±–æ–ª–µ–µ 50%!")
                    
                    st.warning(f"‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Ç–æ–≤–∞—Ä**: {top_20_declining.iloc[0]['Model']} - –ø–∞–¥–µ–Ω–∏–µ {top_20_declining.iloc[0]['Change_%']:.1f}%")
                    
                    st.markdown("##### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º —Ç–æ–≤–∞—Ä–∞–º:")
                    recommendations = [
                        "üéØ –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –ø–∞–¥–µ–Ω–∏—è (–∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è, —Ü–µ–Ω–∞, –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å)",
                        "üî• –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏ —Å–æ —Å–∫–∏–¥–∫–∞–º–∏ 20-30%",
                        "üì¢ –£—Å–∏–ª–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ —Ä–µ–∫–ª–∞–º—É",
                        "üí° –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –∏–ª–∏ –∑–∞–º–µ–Ω—É —Ç–æ–≤–∞—Ä–∞",
                        "üì¶ –°–Ω–∏–∑–∏—Ç—å –∑–∞–∫—É–ø–∫–∏ –¥–æ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Ç—É–∞—Ü–∏–∏"
                    ]
                    
                    for rec in recommendations:
                        st.markdown(f'<div class="insight-card">{rec}</div>', unsafe_allow_html=True)
                    
                else:
                    st.success("‚úÖ –û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–¥–µ–Ω–∏–µ–º –ø—Ä–æ–¥–∞–∂")
                    st.balloons()
            
            # –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            st.markdown("### üéØ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            
            # –¢–∞–±–ª–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            st.markdown("#### üìä –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞")
            
            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
            top_5_revenue = trend_data.nlargest(5, 'Total_Revenue')
            total_revenue_all = trend_data['Total_Revenue'].sum()
            top_5_share = (top_5_revenue['Total_Revenue'].sum() / total_revenue_all) * 100
            top_10_share = (trend_data.nlargest(10, 'Total_Revenue')['Total_Revenue'].sum() / total_revenue_all) * 100
            
            declining_count = len(trend_data[trend_data['Change_%'] < -20])
            growing_count = len(trend_data[trend_data['Change_%'] > 20])
            stable_count = len(trend_data[(trend_data['Change_%'] >= -20) & (trend_data['Change_%'] <= 20)])
            
            avg_transaction = filtered_df['Sum'].sum() / len(filtered_df) if len(filtered_df) > 0 else 0
            avg_price = filtered_df['Price'].mean()
            avg_qty_per_transaction = filtered_df.groupby('Datasales')['Qty'].sum().mean()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –º–µ—Ç—Ä–∏–∫
            metrics_data = {
                '–ú–µ—Ç—Ä–∏–∫–∞': [
                    '–î–æ–ª—è –¢–û–ü-5 —Ç–æ–≤–∞—Ä–æ–≤',
                    '–î–æ–ª—è –¢–û–ü-10 —Ç–æ–≤–∞—Ä–æ–≤',
                    '–¢–æ–≤–∞—Ä–æ–≤ —Å —Ä–æ—Å—Ç–æ–º >20%',
                    '–¢–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–¥–µ–Ω–∏–µ–º >20%',
                    '–°—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤',
                    '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫',
                    '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞',
                    '–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏/–¥–µ–Ω—å'
                ],
                '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                    f'{top_5_share:.1f}%',
                    f'{top_10_share:.1f}%',
                    f'{growing_count} —à—Ç.',
                    f'{declining_count} —à—Ç.',
                    f'{stable_count} —à—Ç.',
                    f'{avg_transaction:.0f} –ì–†–ù',
                    f'{avg_price:.0f} –ì–†–ù',
                    f'{avg_qty_per_transaction:.1f} —à—Ç.'
                ],
                '–°—Ç–∞—Ç—É—Å': [
                    '‚ö†Ô∏è –†–∏—Å–∫' if top_5_share > 50 else '‚úÖ –ù–æ—Ä–º–∞',
                    '‚ö†Ô∏è –†–∏—Å–∫' if top_10_share > 70 else '‚úÖ –ù–æ—Ä–º–∞',
                    '‚úÖ –†–æ—Å—Ç' if growing_count > 10 else '‚ö†Ô∏è –ú–∞–ª–æ',
                    'üö® –ö—Ä–∏—Ç–∏—á–Ω–æ' if declining_count > 10 else ('‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ' if declining_count > 0 else '‚úÖ OK'),
                    '‚úÖ –•–æ—Ä–æ—à–æ' if stable_count > 20 else '‚ö†Ô∏è –ú–∞–ª–æ',
                    '‚ö†Ô∏è –ù–∏–∑–∫–∏–π' if avg_transaction < filtered_df['Sum'].mean() * 0.8 else '‚úÖ –ù–æ—Ä–º–∞',
                    '‚úÖ –ù–æ—Ä–º–∞',
                    '‚úÖ –ù–æ—Ä–º–∞'
                ]
            }
            
            metrics_df = pd.DataFrame(metrics_data)
            st.dataframe(metrics_df, use_container_width=True, hide_index=True)
            
            # –í—ã–≤–æ–¥—ã –∏ –∏–≤–µ–Ω—Ç—ã
            st.markdown("#### üí° –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã")
            
            conclusions = []
            events = []
            
            # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏
            if top_5_share > 50:
                conclusions.append("üéØ **–í—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –≤—ã—Ä—É—á–∫–∏** - –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —É–∑–∫–æ–≥–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞")
                events.append(f"üìå –°–û–ë–´–¢–ò–ï: –¢–û–ü-5 —Ç–æ–≤–∞—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç {top_5_share:.1f}% –≤—ã—Ä—É—á–∫–∏")
            
            # –ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏
            if declining_count > 10:
                conclusions.append("üìâ **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–Ω–∞–º–∏–∫–∞** - –º–∞—Å—Å–æ–≤–æ–µ –ø–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä–æ–≤")
                events.append(f"üö® –°–û–ë–´–¢–ò–ï: {declining_count} —Ç–æ–≤–∞—Ä–æ–≤ —Ç–µ—Ä—è—é—Ç –ø—Ä–æ–¥–∞–∂–∏ (>20% –ø–∞–¥–µ–Ω–∏—è)")
            elif declining_count > 0:
                conclusions.append("‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏** - –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –ø–∞–¥–µ–Ω–∏–µ–º –ø—Ä–æ–¥–∞–∂")
                events.append(f"‚ö†Ô∏è –°–û–ë–´–¢–ò–ï: {declining_count} —Ç–æ–≤–∞—Ä–æ–≤ —Ç—Ä–µ–±—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
            
            if growing_count > 10:
                conclusions.append("üìà **–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–Ω–¥** - –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ç—É—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤")
                events.append(f"‚úÖ –°–û–ë–´–¢–ò–ï: {growing_count} —Ç–æ–≤–∞—Ä–æ–≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç —Ä–æ—Å—Ç (>20%)")
            
            # –ê–Ω–∞–ª–∏–∑ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞
            if avg_transaction < filtered_df['Sum'].mean() * 0.8:
                conclusions.append("üí≥ **–ù–∏–∑–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫** - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —É–≤–µ–ª–∏—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ cross-sell")
                events.append(f"üí∞ –°–û–ë–´–¢–ò–ï: –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ {avg_transaction:.0f} –ì–†–ù –Ω–∏–∂–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            if total_revenue_all > 0:
                top_product = trend_data.nlargest(1, 'Total_Revenue').iloc[0]
                events.append(f"üèÜ –õ–ò–î–ï–†: {top_product['Model']} - {top_product['Total_Revenue']:,.0f} –ì–†–ù –≤—ã—Ä—É—á–∫–∏")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–≤–æ–¥–æ–≤
            for conclusion in conclusions:
                st.markdown(f'<div class="insight-card">{conclusion}</div>', unsafe_allow_html=True)
            
            st.markdown("#### üìÖ –í–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–∏–æ–¥–∞")
            for event in events:
                st.info(event)
            
            # –ò–Ω—Å–∞–π—Ç—ã
            marketing_insights = []
            
            if top_5_share > 50:
                marketing_insights.append({
                    'type': 'warning',
                    'title': '‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è',
                    'text': f"–¢–û–ü-5 —Ç–æ–≤–∞—Ä–æ–≤ –¥–∞—é—Ç {top_5_share:.1f}% –≤—ã—Ä—É—á–∫–∏. –≠—Ç–æ —Ä–∏—Å–∫! –î–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å."
                })
            else:
                marketing_insights.append({
                    'type': 'success',
                    'title': '‚úÖ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å',
                    'text': f"–¢–û–ü-5 —Ç–æ–≤–∞—Ä–æ–≤ –¥–∞—é—Ç {top_5_share:.1f}% –≤—ã—Ä—É—á–∫–∏. –•–æ—Ä–æ—à–∞—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è."
                })
            
            if declining_count > 10:
                marketing_insights.append({
                    'type': 'error',
                    'title': 'üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è',
                    'text': f"{declining_count} —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–¥–µ–Ω–∏–µ–º >20%. –°—Ä–æ—á–Ω–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é!"
                })
            elif declining_count > 0:
                marketing_insights.append({
                    'type': 'warning',
                    'title': 'üìâ –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ',
                    'text': f"{declining_count} —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–¥–µ–Ω–∏–µ–º >20%. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∏ –∞–∫—Ü–∏–∏."
                })
            
            if avg_transaction < filtered_df['Sum'].mean() * 0.8:
                marketing_insights.append({
                    'type': 'info',
                    'title': 'üí≥ –ù–∏–∑–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫',
                    'text': f"–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ {avg_transaction:.0f} –ì–†–ù. –í–Ω–µ–¥—Ä–∏—Ç–µ cross-sell –∏ –±–∞–Ω–¥–ª—ã —Ç–æ–≤–∞—Ä–æ–≤."
                })
            
            st.markdown("#### üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            for insight in marketing_insights:
                if insight['type'] == 'success':
                    st.success(f"**{insight['title']}**: {insight['text']}")
                elif insight['type'] == 'warning':
                    st.warning(f"**{insight['title']}**: {insight['text']}")
                elif insight['type'] == 'error':
                    st.error(f"**{insight['title']}**: {insight['text']}")
                else:
                    st.info(f"**{insight['title']}**: {insight['text']}")
            
            # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            st.markdown("#### üìã –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π")
            
            top_20_best_count = len(trend_data.nlargest(20, 'Total_Revenue'))
            declining_count_action = len(trend_data[trend_data['Change_%'] < -20])
            
            action_plan = [
                f"1Ô∏è‚É£ **–¢–û–ü —Ç–æ–≤–∞—Ä—ã**: –£–≤–µ–ª–∏—á–∏—Ç—å –±—é–¥–∂–µ—Ç –Ω–∞ —Ä–µ–∫–ª–∞–º—É –¢–û–ü-{top_20_best_count} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ 30%",
                f"2Ô∏è‚É£ **–ü–∞–¥–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã**: –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂—É —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–¥–µ–Ω–∏–µ–º —Å–æ —Å–∫–∏–¥–∫–æ–π 20-30%",
                f"3Ô∏è‚É£ **Cross-sell**: –°–æ–∑–¥–∞—Ç—å 5 —Ç–æ–≤–∞—Ä–Ω—ã—Ö –±–∞–Ω–¥–ª–æ–≤ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞",
                f"4Ô∏è‚É£ **–°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã**: –û–±–µ—Å–ø–µ—á–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ —Å–∫–ª–∞–¥–µ",
                f"5Ô∏è‚É£ **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥**: –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –ø–∞–¥–∞—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤"
            ]
            
            for action in action_plan:
                st.markdown(f'<div class="insight-card">{action}</div>', unsafe_allow_html=True)
            
            # –ê–Ω–∞–ª–∏–∑ —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ —Å–ø—Ä–æ—Å–∞
            st.markdown("### üìê –ê–Ω–∞–ª–∏–∑ —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ —Å–ø—Ä–æ—Å–∞")
            st.markdown("–û—Ü–µ–Ω–∫–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–ø—Ä–æ—Å–∞ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ü–µ–Ω—ã (–∞–Ω–∞–ª–∏–∑ –ø–æ –≤—Å–µ–º—É –¥–∞—Ç–∞—Å–µ—Ç—É)")
            
            # –†–∞—Å—á–µ—Ç —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            elasticity_data = []
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å –¥–∞—Ç–∞—Å–µ—Ç df –≤–º–µ—Å—Ç–æ filtered_df
            all_models = df['Model'].unique()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö
            for model in all_models:
                model_data = df[df['Model'] == model].copy()
                
                if len(model_data) >= 10:  # –ú–∏–Ω–∏–º—É–º 10 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–æ–≤—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º
                    try:
                        model_data['Price_Group'] = pd.qcut(model_data['Price'], q=3, labels=['–ù–∏–∑–∫–∞—è', '–°—Ä–µ–¥–Ω—è—è', '–í—ã—Å–æ–∫–∞—è'], duplicates='drop')
                    except:
                        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ä–∞–∑–±–∏—Ç—å –Ω–∞ 3 –≥—Ä—É–ø–ø—ã, –ø—Ä–æ–±—É–µ–º –Ω–∞ 2
                        try:
                            model_data['Price_Group'] = pd.qcut(model_data['Price'], q=2, labels=['–ù–∏–∑–∫–∞—è', '–í—ã—Å–æ–∫–∞—è'], duplicates='drop')
                        except:
                            continue
                    
                    price_analysis = model_data.groupby('Price_Group').agg({
                        'Price': 'mean',
                        'Qty': 'sum'
                    }).reset_index()
                    
                    if len(price_analysis) >= 2:
                        # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É –∫—Ä–∞–π–Ω–∏–º–∏ –≥—Ä—É–ø–ø–∞–º–∏
                        if price_analysis.iloc[0]['Price'] != price_analysis.iloc[-1]['Price']:
                            price_change_pct = ((price_analysis.iloc[-1]['Price'] - price_analysis.iloc[0]['Price']) / 
                                              price_analysis.iloc[0]['Price']) * 100
                            qty_change_pct = ((price_analysis.iloc[-1]['Qty'] - price_analysis.iloc[0]['Qty']) / 
                                            price_analysis.iloc[0]['Qty']) * 100
                            
                            if price_change_pct != 0:
                                elasticity = qty_change_pct / price_change_pct
                                
                                # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
                                if abs(elasticity) > 1:
                                    elasticity_type = "–≠–ª–∞—Å—Ç–∏—á–Ω—ã–π"
                                    recommendation = "–°–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã —É–≤–µ–ª–∏—á–∏—Ç –≤—ã—Ä—É—á–∫—É"
                                elif abs(elasticity) < 1:
                                    elasticity_type = "–ù–µ—ç–ª–∞—Å—Ç–∏—á–Ω—ã–π"
                                    recommendation = "–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω—ã —É–≤–µ–ª–∏—á–∏—Ç –≤—ã—Ä—É—á–∫—É"
                                else:
                                    elasticity_type = "–ï–¥–∏–Ω–∏—á–Ω—ã–π"
                                    recommendation = "–¶–µ–Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞"
                                
                                total_revenue = model_data['Sum'].sum()
                                avg_price = model_data['Price'].mean()
                                total_qty = model_data['Qty'].sum()
                                
                                elasticity_data.append({
                                    'Model': model,
                                    'Elasticity': elasticity,
                                    'Type': elasticity_type,
                                    'Avg_Price': avg_price,
                                    'Total_Revenue': total_revenue,
                                    'Total_Qty': total_qty,
                                    'Price_Change_%': price_change_pct,
                                    'Qty_Change_%': qty_change_pct,
                                    'Recommendation': recommendation
                                })
            
            if len(elasticity_data) > 0:
                elasticity_df = pd.DataFrame(elasticity_data)
                elasticity_df = elasticity_df.sort_values('Total_Revenue', ascending=False)
                
                # –ú–µ—Ç—Ä–∏–∫–∏ —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
                col1, col2, col3, col4 = st.columns(4)
                
                elastic_count = len(elasticity_df[elasticity_df['Type'] == '–≠–ª–∞—Å—Ç–∏—á–Ω—ã–π'])
                inelastic_count = len(elasticity_df[elasticity_df['Type'] == '–ù–µ—ç–ª–∞—Å—Ç–∏—á–Ω—ã–π'])
                unit_count = len(elasticity_df[elasticity_df['Type'] == '–ï–¥–∏–Ω–∏—á–Ω—ã–π'])
                
                with col1:
                    st.metric("üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤", len(elasticity_df))
                with col2:
                    st.metric("‚ö° –≠–ª–∞—Å—Ç–∏—á–Ω—ã—Ö", elastic_count)
                with col3:
                    st.metric("üîí –ù–µ—ç–ª–∞—Å—Ç–∏—á–Ω—ã—Ö", inelastic_count)
                with col4:
                    st.metric("‚öñÔ∏è –ï–¥–∏–Ω–∏—á–Ω—ã—Ö", unit_count)
                
                # –ì—Ä–∞—Ñ–∏–∫ —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
                st.markdown("#### üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏")
                
                fig_elasticity = go.Figure()
                
                colors = elasticity_df['Type'].map({
                    '–≠–ª–∞—Å—Ç–∏—á–Ω—ã–π': '#ff6b6b',
                    '–ù–µ—ç–ª–∞—Å—Ç–∏—á–Ω—ã–π': '#51cf66',
                    '–ï–¥–∏–Ω–∏—á–Ω—ã–π': '#ffd43b'
                })
                
                fig_elasticity.add_trace(go.Bar(
                    y=elasticity_df['Model'].head(20),
                    x=elasticity_df['Elasticity'].head(20),
                    orientation='h',
                    marker=dict(
                        color=colors.head(20),
                        line=dict(color='white', width=1)
                    ),
                    text=elasticity_df['Elasticity'].head(20).apply(lambda x: f'{x:.2f}'),
                    textposition='outside',
                    hovertemplate='<b>%{y}</b><br>–≠–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å: %{x:.2f}<extra></extra>'
                ))
                
                fig_elasticity.add_vline(x=-1, line_dash="dash", line_color="red", 
                                        annotation_text="–ì—Ä–∞–Ω–∏—Ü–∞ —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏")
                fig_elasticity.add_vline(x=1, line_dash="dash", line_color="red")
                
                fig_elasticity.update_layout(
                    title="–¢–û–ü-20 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ (–≤–µ—Å—å –¥–∞—Ç–∞—Å–µ—Ç)",
                    xaxis_title="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏",
                    yaxis_title="–ú–æ–¥–µ–ª—å",
                    height=600,
                    showlegend=False
                )
                
                st.plotly_chart(fig_elasticity, use_container_width=True)
                
                # –¢–∞–±–ª–∏—Ü–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
                st.markdown("#### üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                
                display_elasticity = elasticity_df.head(20)[['Model', 'Type', 'Elasticity', 
                                                             'Avg_Price', 'Total_Revenue', 'Total_Qty',
                                                             'Price_Change_%', 'Qty_Change_%', 
                                                             'Recommendation']].copy()
                
                display_elasticity = display_elasticity.rename(columns={
                    'Model': 'üè∑Ô∏è –ú–æ–¥–µ–ª—å',
                    'Type': 'üìä –¢–∏–ø',
                    'Elasticity': 'üìê –≠–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å',
                    'Avg_Price': 'üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞',
                    'Total_Revenue': 'üíµ –í—ã—Ä—É—á–∫–∞',
                    'Total_Qty': 'üì¶ –ü—Ä–æ–¥–∞–Ω–æ —à—Ç.',
                    'Price_Change_%': 'üìà –ò–∑–º. —Ü–µ–Ω—ã %',
                    'Qty_Change_%': 'üìä –ò–∑–º. –æ–±—ä–µ–º–∞ %',
                    'Recommendation': 'üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è'
                })
                
                st.dataframe(
                    display_elasticity.style.format({
                        'üìê –≠–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å': '{:.2f}',
                        'üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞': '{:,.0f} –ì–†–ù',
                        'üíµ –í—ã—Ä—É—á–∫–∞': '{:,.0f} –ì–†–ù',
                        'üì¶ –ü—Ä–æ–¥–∞–Ω–æ —à—Ç.': '{:,.0f}',
                        'üìà –ò–∑–º. —Ü–µ–Ω—ã %': '{:.1f}%',
                        'üìä –ò–∑–º. –æ–±—ä–µ–º–∞ %': '{:.1f}%'
                    }).applymap(
                        lambda x: 'background-color: #ffebee' if x == '–≠–ª–∞—Å—Ç–∏—á–Ω—ã–π' else 
                                 ('background-color: #e8f5e9' if x == '–ù–µ—ç–ª–∞—Å—Ç–∏—á–Ω—ã–π' else 
                                  ('background-color: #fff9c4' if x == '–ï–¥–∏–Ω–∏—á–Ω—ã–π' else '')),
                        subset=['üìä –¢–∏–ø']
                    ),
                    use_container_width=True
                )
                
                # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                st.markdown("#### üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é")
                
                elastic_revenue = elasticity_df[elasticity_df['Type'] == '–≠–ª–∞—Å—Ç–∏—á–Ω—ã–π']['Total_Revenue'].sum()
                inelastic_revenue = elasticity_df[elasticity_df['Type'] == '–ù–µ—ç–ª–∞—Å—Ç–∏—á–Ω—ã–π']['Total_Revenue'].sum()
                total_analyzed_revenue = elastic_revenue + inelastic_revenue
                
                pricing_recommendations = []
                
                if elastic_count > 0:
                    elastic_share = (elastic_revenue / total_analyzed_revenue * 100) if total_analyzed_revenue > 0 else 0
                    pricing_recommendations.append(
                        f"üî¥ **–≠–ª–∞—Å—Ç–∏—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ({elastic_count} —à—Ç., {elastic_share:.1f}% –≤—ã—Ä—É—á–∫–∏)**: "
                        f"–°–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ 10-15% –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂ –Ω–∞ >10%. "
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ü–∏–∏ –∏ –ø—Ä–æ–º–æ –¥–ª—è —Ä–æ—Å—Ç–∞ –≤—ã—Ä—É—á–∫–∏."
                    )
                
                if inelastic_count > 0:
                    inelastic_share = (inelastic_revenue / total_analyzed_revenue * 100) if total_analyzed_revenue > 0 else 0
                    pricing_recommendations.append(
                        f"üü¢ **–ù–µ—ç–ª–∞—Å—Ç–∏—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ({inelastic_count} —à—Ç., {inelastic_share:.1f}% –≤—ã—Ä—É—á–∫–∏)**: "
                        f"–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ 5-10% –Ω–µ –ø–æ–≤–ª–∏—è–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ –Ω–∞ —Å–ø—Ä–æ—Å. "
                        f"–ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å."
                    )
                
                if unit_count > 0:
                    pricing_recommendations.append(
                        f"üü° **–ï–¥–∏–Ω–∏—á–Ω–æ-—ç–ª–∞—Å—Ç–∏—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ({unit_count} —à—Ç.)**: "
                        f"–¶–µ–Ω–∞ –±–ª–∏–∑–∫–∞ –∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π. –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π."
                    )
                
                for rec in pricing_recommendations:
                    st.markdown(f'<div class="insight-card">{rec}</div>', unsafe_allow_html=True)
                
                # –û–±—â–∏–µ –≤—ã–≤–æ–¥—ã –ø–æ —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
                st.info(
                    f"üí° **–ö–ª—é—á–µ–≤–æ–π –≤—ã–≤–æ–¥**: –ò–∑ {len(elasticity_df)} –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ "
                    f"{elastic_count} —è–≤–ª—è—é—Ç—Å—è —ç–ª–∞—Å—Ç–∏—á–Ω—ã–º–∏ (—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∫ —Ü–µ–Ω–µ), "
                    f"{inelastic_count} - –Ω–µ—ç–ª–∞—Å—Ç–∏—á–Ω—ã–º–∏ (–Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∫ —Ü–µ–Ω–µ). "
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."
                )
                
            else:
                st.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ —Å–ø—Ä–æ—Å–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –≤–∞—Ä–∏–∞—Ü–∏–µ–π —Ü–µ–Ω.")
            
            st.markdown("---")
            st.markdown("## üì• –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            col1, col2 = st.columns(2)
            
            with col1:
                export_data = detailed_forecast.copy()
                export_data['–ú–∞–≥–∞–∑–∏–Ω'] = selected_magazin
                export_data['–°–µ–≥–º–µ–Ω—Ç'] = selected_segment
                
                csv = export_data.to_csv(index=False)
                st.download_button(
                    label="üìä –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ (CSV)",
                    data=csv,
                    file_name=f"forecast_{selected_magazin}_{selected_segment}_{forecast_days}days.csv",
                    mime="text/csv",
                    use_container_width=True
                )
            
            with col2:
                # Word –æ—Ç—á–µ—Ç
                word_data = create_word_report(
                    detailed_forecast, selected_magazin, selected_segment, forecast_days,
                    total_forecast, avg_daily_forecast, forecast_revenue, confidence_score,
                    accuracy_metrics, insights, filtered_df, prophet_data
                )
                
                if word_data:
                    st.download_button(
                        label="üìÑ –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç (WORD)",
                        data=word_data,
                        file_name=f"report_{selected_magazin}_{selected_segment}.docx",
                        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                        use_container_width=True
                    )
                else:
                    st.info("Word –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-docx")

if __name__ == "__main__":
    main()
