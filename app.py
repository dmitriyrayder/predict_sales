import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from prophet import Prophet
from catboost import CatBoostRegressor
import warnings
warnings.filterwarnings('ignore')

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂", layout="wide", initial_sidebar_state="expanded")

# --- –°—Ç–∏–ª–∏ –∏ —Ñ–æ–Ω ---
def set_background():
    """ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. """
    page_bg_img = '''
    <style>
    .stApp {
        background-image: linear-gradient(to right top, #d16ba5, #c777b9, #ba83ca, #aa8fd8, #9a9ae1, #8aa7ec, #79b3f4, #69bff8, #52cffe, #41dfff, #46eefa, #5ffbf1);
        background-size: cover;
    }
    .st-emotion-cache-16txtl3 {
        padding: 2rem 2rem;
    }
    </style>
    '''
    st.markdown(page_bg_img, unsafe_allow_html=True)

set_background()

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ ---
@st.cache_data
def load_and_validate_data(uploaded_file):
    """ –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞. """
    try:
        df = pd.read_excel(uploaded_file)
        required_cols = ['Magazin', 'Datasales', 'Art', 'Describe', 'Model', 'Segment', 'Price', 'Qty', 'Sum']
        missing_cols = [col for col in required_cols if col not in df.columns]
        if missing_cols:
            st.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_cols}")
            return None
        df['Datasales'] = pd.to_datetime(df['Datasales'], errors='coerce', dayfirst=True)
        df = df.dropna(subset=['Datasales']).sort_values('Datasales')
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return None

def show_data_statistics(df):
    """ –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞–Ω–Ω—ã–º. """
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", f"{len(df):,}")
    with col2:
        st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤", f"{df['Art'].nunique():,}")
    with col3:
        st.metric("–ú–∞–≥–∞–∑–∏–Ω–æ–≤", f"{df['Magazin'].nunique():,}")
    with col4:
        st.metric("–°–µ–≥–º–µ–Ω—Ç–æ–≤", f"{df['Segment'].nunique():,}")
    st.write(f"**–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö:** —Å {df['Datasales'].min().date()} –ø–æ {df['Datasales'].max().date()}")

def create_features(df):
    """ –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ CatBoost. """
    df = df.copy().sort_values(['Magazin', 'Segment', 'Art', 'Datasales']).reset_index(drop=True)
    df['year'] = df['Datasales'].dt.year
    df['month'] = df['Datasales'].dt.month
    df['dayofweek'] = df['Datasales'].dt.dayofweek
    df['quarter'] = df['Datasales'].dt.quarter
    df['is_weekend'] = (df['Datasales'].dt.dayofweek >= 5).astype(int)
    for col in ['Qty', 'Sum']:
        for lag in [1, 7, 30]:
            df[f'{col}_lag_{lag}'] = df.groupby(['Magazin', 'Segment', 'Art'])[col].shift(lag)
        for window in [7, 30]:
            df[f'{col}_ma_{window}'] = df.groupby(['Magazin', 'Segment', 'Art'])[col].transform(lambda x: x.rolling(window).mean())
    return df

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–µ–π ---
def prepare_prophet_data(df, target_col='Qty'):
    """ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏ Prophet. """
    prophet_df = df.groupby('Datasales')[target_col].sum().reset_index()
    prophet_df.columns = ['ds', 'y']
    return prophet_df

@st.cache_resource
def train_prophet_model(train_data, periods=30):
    """ –û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å Prophet –∏ –¥–µ–ª–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ. """
    model = Prophet(yearly_seasonality=True, weekly_seasonality=True, daily_seasonality=False)
    model.fit(train_data)
    future = model.make_future_dataframe(periods=periods)
    forecast = model.predict(future)
    return model, forecast

def prepare_catboost_data(df):
    """ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏ CatBoost. """
    df_features = create_features(df)
    daily_data = df_features.groupby('Datasales').agg({
        'Qty': 'sum', 'Sum': 'sum', 'Price': 'mean',
        'year': 'first', 'month': 'first', 'dayofweek': 'first',
        'quarter': 'first', 'is_weekend': 'first'
    }).reset_index()
    for lag in [1, 7, 30]:
        daily_data[f'Qty_lag_{lag}'] = daily_data['Qty'].shift(lag)
    for window in [7, 30]:
        daily_data[f'Qty_ma_{window}'] = daily_data['Qty'].rolling(window).mean()
    return daily_data

@st.cache_resource
def train_catboost_model(data, periods=30):
    """ –û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å CatBoost –∏ –¥–µ–ª–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ. """
    feature_cols = ['year', 'month', 'dayofweek', 'quarter', 'is_weekend', 'Price',
                   'Qty_lag_1', 'Qty_lag_7', 'Qty_lag_30', 'Qty_ma_7', 'Qty_ma_30']
    clean_data = data.dropna()
    if len(clean_data) < 30:
        raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è CatBoost")
    X, y = clean_data[feature_cols], clean_data['Qty']
    model = CatBoostRegressor(iterations=500, learning_rate=0.1, depth=6,
                             loss_function='RMSE', random_seed=42, verbose=False)
    model.fit(X, y)
    last_date = data['Datasales'].iloc[-1]
    future_dates = pd.date_range(start=last_date + pd.Timedelta(days=1), periods=periods, freq='D')
    forecast_data = []
    last_row = clean_data.iloc[-1].copy()
    for i, date in enumerate(future_dates):
        last_row.update({
            'year': date.year, 'month': date.month, 'dayofweek': date.dayofweek,
            'quarter': date.quarter, 'is_weekend': 1 if date.dayofweek >= 5 else 0
        })
        pred = max(0, model.predict([last_row[feature_cols]])[0])
        forecast_data.append({'ds': date, 'yhat': pred})
        if i < periods - 1:
            last_row['Qty_lag_30'] = last_row['Qty_lag_7'] if i >= 23 else last_row['Qty_lag_30']
            last_row['Qty_lag_7'] = last_row['Qty_lag_1'] if i >= 6 else last_row['Qty_lag_7']
            last_row['Qty_lag_1'] = pred
            if i >= 6:
                last_row['Qty_ma_7'] = (last_row['Qty_ma_7'] * 6 + pred) / 7
            if i >= 29:
                last_row['Qty_ma_30'] = (last_row['Qty_ma_30'] * 29 + pred) / 30
    return model, pd.DataFrame(forecast_data)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ ---
def plot_forecast(df, forecast, model_type, title):
    """ –°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞. """
    fig = go.Figure()

    # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    fig.add_trace(go.Scatter(
        x=df['ds'], y=df['y'], mode='lines+markers', name='–§–∞–∫—Ç',
        line=dict(color='#1f77b4', width=2), marker=dict(size=5)
    ))

    # –ü—Ä–æ–≥–Ω–æ–∑
    fig.add_trace(go.Scatter(
        x=forecast['ds'], y=forecast['yhat'], mode='lines', name='–ü—Ä–æ–≥–Ω–æ–∑',
        line=dict(color='#ff7f0e', width=3, dash='dash')
    ))

    # –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è Prophet
    if model_type == 'Prophet' and 'yhat_lower' in forecast.columns:
        fig.add_trace(go.Scatter(
            x=forecast['ds'], y=forecast['yhat_upper'], fill=None, mode='lines',
            line_color='rgba(255,127,14,0.3)', showlegend=False
        ))
        fig.add_trace(go.Scatter(
            x=forecast['ds'], y=forecast['yhat_lower'], fill='tonexty', mode='lines',
            line_color='rgba(255,127,14,0.3)', name='–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª'
        ))

    fig.update_layout(
        title={'text': title, 'y':0.9, 'x':0.5, 'xanchor': 'center', 'yanchor': 'top'},
        xaxis_title='–î–∞—Ç–∞', yaxis_title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        hovermode='x unified', legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
        plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)'
    )
    return fig

def plot_kpi(df):
    """ –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç KPI-–º–µ—Ç—Ä–∏–∫–∏. """
    st.subheader("üöÄ –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    total_sales = df['Sum'].sum()
    avg_receipt = df['Sum'].mean()
    unique_products = df['Art'].nunique()

    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–û–±—â–∏–π –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂ (–≥—Ä–Ω)", f"{total_sales:,.0f}")
    with col2:
        st.metric("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (–≥—Ä–Ω)", f"{avg_receipt:,.2f}")
    with col3:
        st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤", f"{unique_products:,}")

def plot_segment_distribution(df):
    """ –°—Ç—Ä–æ–∏—Ç –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º. """
    st.subheader("üç© –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º")
    segment_sales = df.groupby('Segment')['Sum'].sum().reset_index()
    fig = px.pie(segment_sales, values='Sum', names='Segment', title='–î–æ–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ –≤ –æ–±—â–µ–π –≤—ã—Ä—É—á–∫–µ',
                 color_discrete_sequence=px.colors.sequential.RdBu)
    fig.update_layout(paper_bgcolor='rgba(0,0,0,0)')
    st.plotly_chart(fig, use_container_width=True)

def plot_weekday_sales(df):
    """ –°—Ç—Ä–æ–∏—Ç –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏. """
    st.subheader("üìÖ –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏")
    df['weekday'] = df['Datasales'].dt.day_name()
    weekday_order = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
    weekday_sales = df.groupby('weekday')['Qty'].sum().reindex(weekday_order).reset_index()
    fig = px.bar(weekday_sales, x='weekday', y='Qty', title='–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏',
                 labels={'weekday': '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏', 'Qty': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'})
    fig.update_layout(plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)')
    st.plotly_chart(fig, use_container_width=True)


# --- –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
st.title("üè™ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂")
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª", type=['xlsx', 'xls'])

if uploaded_file:
    df = load_and_validate_data(uploaded_file)
    if df is not None:
        show_data_statistics(df)
        plot_kpi(df)

        col1, col2 = st.columns(2)
        with col1:
            plot_segment_distribution(df)
        with col2:
            plot_weekday_sales(df)

        st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≥–Ω–æ–∑–∞")
        selected_magazin = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω", ['–í—Å–µ'] + list(df['Magazin'].unique()))
        selected_segment = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç", ['–í—Å–µ'] + list(df['Segment'].unique()))
        model_type = st.sidebar.selectbox("–ú–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è", ['Prophet', 'CatBoost'])
        forecast_days = st.sidebar.slider("–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–¥–Ω–µ–π)", 7, 90, 30)

        if st.sidebar.button("üîÆ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", type="primary"):
            filtered_df = df.copy()
            if selected_magazin != '–í—Å–µ':
                filtered_df = filtered_df[filtered_df['Magazin'] == selected_magazin]
            if selected_segment != '–í—Å–µ':
                filtered_df = filtered_df[filtered_df['Segment'] == selected_segment]

            if len(filtered_df) < 10:
                st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è (–º–∏–Ω–∏–º—É–º 10 –∑–∞–ø–∏—Å–µ–π)")
            else:
                with st.spinner(f'–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ {model_type}...'):
                    try:
                        if model_type == 'Prophet':
                            prophet_data = prepare_prophet_data(filtered_df)
                            model, forecast = train_prophet_model(prophet_data, periods=forecast_days)
                        else:
                            catboost_data = prepare_catboost_data(filtered_df)
                            model, forecast = train_catboost_model(catboost_data, periods=forecast_days)
                            prophet_data = prepare_prophet_data(filtered_df)
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
                        st.stop()

                st.subheader(f"üìä –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ –Ω–∞ {forecast_days} –¥–Ω–µ–π")
                fig = plot_forecast(prophet_data, forecast, model_type, f"–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ - {model_type}")
                st.plotly_chart(fig, use_container_width=True)

else:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
    st.subheader("üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞–Ω–Ω—ã—Ö")
    st.markdown("""
    **–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:**
    - `Magazin` - –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    - `Datasales` - –¥–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏
    - `Art` - –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞
    - `Describe` - –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    - `Model` - –º–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–∞
    - `Segment` - —Å–µ–≥–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–∞
    - `Price` - —Ü–µ–Ω–∞
    - `Qty` - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    - `Sum` - —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏

    **–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:**
    - **Prophet** - —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤.
    - **CatBoost** - –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è.
    """)
