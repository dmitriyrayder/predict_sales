import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from prophet import Prophet
from sklearn.metrics import mean_absolute_error, mean_squared_error, mean_absolute_percentage_error, r2_score
from scipy.signal import savgol_filter
from io import BytesIO
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(
    page_title="üè™ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—ñ–≤",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª—ñ
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        background: linear-gradient(120deg, #1f77b4, #667eea);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-align: center;
        margin-bottom: 2rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }
    
    .metric-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1.5rem;
        border-radius: 15px;
        color: white;
        text-align: center;
        margin: 0.5rem 0;
        box-shadow: 0 8px 16px rgba(0,0,0,0.2);
        transition: transform 0.3s ease;
    }
    
    .metric-container:hover {
        transform: translateY(-5px);
        box-shadow: 0 12px 24px rgba(0,0,0,0.3);
    }
    
    .insight-card {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        padding: 1.2rem;
        border-radius: 12px;
        color: white;
        margin: 0.5rem 0;
        box-shadow: 0 6px 12px rgba(0,0,0,0.15);
        border-left: 5px solid #fff;
    }
    
    .problem-card {
        background: linear-gradient(135deg, #ff6b6b 0%, #feca57 100%);
        padding: 1.2rem;
        border-radius: 12px;
        margin: 0.5rem 0;
        border-left: 5px solid #ee5a6f;
        box-shadow: 0 6px 12px rgba(0,0,0,0.15);
        color: white;
        font-weight: 500;
    }
    
    .accuracy-card {
        background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        box-shadow: 0 8px 16px rgba(0,0,0,0.2);
        color: white;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data
def load_and_validate_data(uploaded_file):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ç–∞ –≤–∞–ª—ñ–¥—É—î –¥–∞–Ω—ñ –∑ Excel —Ñ–∞–π–ª—É"""
    try:
        progress_bar = st.progress(0)
        progress_bar.progress(25)
        
        df = pd.read_excel(uploaded_file)
        progress_bar.progress(50)
        
        required_cols = ['Magazin', 'Datasales', 'Art', 'Describe', 'Model', 'Segment', 'Price', 'Qty', 'Sum']
        missing_cols = [col for col in required_cols if col not in df.columns]
        
        if missing_cols:
            st.error(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏: {missing_cols}")
            return None
            
        progress_bar.progress(75)
        
        df['Datasales'] = pd.to_datetime(df['Datasales'], errors='coerce', dayfirst=True)
        df = df.dropna(subset=['Datasales']).sort_values('Datasales')
        df = df[(df['Qty'] >= 0) & (df['Price'] > 0)]
        
        progress_bar.progress(100)
        progress_bar.empty()
        
        st.success(f"‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ! –û–±—Ä–æ–±–ª–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å—ñ–≤")
        return df
        
    except Exception as e:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É: {str(e)}")
        return None

def show_data_statistics(df):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞–Ω–∏—Ö"""
    st.markdown("## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–∏—Ö")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown(
            f"""<div class="metric-container">
                <h3>üì¶ –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤</h3>
                <h2>{len(df):,}</h2>
            </div>""", 
            unsafe_allow_html=True
        )
        
    with col2:
        st.markdown(
            f"""<div class="metric-container">
                <h3>üè∑Ô∏è –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤</h3>
                <h2>{df['Art'].nunique():,}</h2>
            </div>""", 
            unsafe_allow_html=True
        )
        
    with col3:
        st.markdown(
            f"""<div class="metric-container">
                <h3>üè™ –ú–∞–≥–∞–∑–∏–Ω—ñ–≤</h3>
                <h2>{df['Magazin'].nunique()}</h2>
            </div>""", 
            unsafe_allow_html=True
        )
        
    with col4:
        st.markdown(
            f"""<div class="metric-container">
                <h3>üìÇ –°–µ–≥–º–µ–Ω—Ç—ñ–≤</h3>
                <h2>{df['Segment'].nunique()}</h2>
            </div>""", 
            unsafe_allow_html=True
        )
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.info(f"üìÖ **–ü–µ—Ä—ñ–æ–¥ –¥–∞–Ω–∏—Ö**: {df['Datasales'].min().date()} - {df['Datasales'].max().date()}")
    with col2:
        st.info(f"üí∞ **–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∏—Ä—É—á–∫–∞**: {df['Sum'].sum():,.0f} –ì–†–ù")
    with col3:
        st.info(f"üìà **–°–µ—Ä–µ–¥–Ω—ñ –ø—Ä–æ–¥–∞–∂—ñ/–¥–µ–Ω—å**: {df.groupby('Datasales')['Qty'].sum().mean():.1f} —à—Ç.")

def remove_outliers_iqr(data, multiplier=1.5):
    """–í–∏–¥–∞–ª—è—î –≤–∏–∫–∏–¥–∏ –º–µ—Ç–æ–¥–æ–º IQR –∑ –∫–æ—Ä–µ–∫—Ç–Ω–∏–º —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–º –≥—Ä–∞–Ω–∏—Ü—å"""
    if len(data) < 4:
        return data
    
    Q1 = data.quantile(0.25)
    Q3 = data.quantile(0.75)
    IQR = Q3 - Q1
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≥—Ä–∞–Ω–∏—Ü—å
    lower_bound = Q1 - multiplier * IQR
    upper_bound = Q3 + multiplier * IQR
    
    return data.clip(lower=lower_bound, upper=upper_bound)

def smooth_data(data, method='ma', window=7):
    """–ó–≥–ª–∞–¥–∂—É—î –¥–∞–Ω—ñ —Ä—ñ–∑–Ω–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
    if method == 'ma':
        return data.rolling(window=window, min_periods=1, center=True).mean()
    elif method == 'ema':
        return data.ewm(span=window, adjust=False).mean()
    elif method == 'savgol' and len(data) >= window:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–Ω–æ—Å—Ç—ñ –≤—ñ–∫–Ω–∞ –¥–ª—è Savitzky-Golay
        if window % 2 == 0:
            window += 1
        return pd.Series(savgol_filter(data, window, 3), index=data.index)
    return data

def create_prophet_forecast(df, periods=30):
    """–°—Ç–≤–æ—Ä—é—î –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Prophet"""
    prophet_df = df.copy()
    prophet_df = prophet_df.rename(columns={'Datasales': 'ds', 'Qty': 'y'})
    prophet_df = prophet_df.groupby('ds')['y'].sum().reset_index()
    
    model = Prophet(
        changepoint_prior_scale=0.05,
        seasonality_prior_scale=10,
        seasonality_mode='multiplicative',
        yearly_seasonality=True,
        weekly_seasonality=True,
        daily_seasonality=False
    )
    
    model.fit(prophet_df)
    future = model.make_future_dataframe(periods=periods)
    forecast = model.predict(future)
    
    return forecast, model

def calculate_accuracy(actual, predicted):
    """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –º–µ—Ç—Ä–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç—ñ –ø—Ä–æ–≥–Ω–æ–∑—É"""
    mask = actual > 0
    actual_filtered = actual[mask]
    predicted_filtered = predicted[mask]
    
    if len(actual_filtered) == 0:
        return None
    
    mae = mean_absolute_error(actual_filtered, predicted_filtered)
    rmse = np.sqrt(mean_squared_error(actual_filtered, predicted_filtered))
    mape = mean_absolute_percentage_error(actual_filtered, predicted_filtered) * 100
    r2 = r2_score(actual_filtered, predicted_filtered)
    
    return {
        'MAE': mae,
        'RMSE': rmse,
        'MAPE': mape,
        'R2': r2,
        'Accuracy': max(0, 100 - mape)
    }

def create_word_report(forecast_data, magazin, segment, days, total, avg_daily, revenue, confidence, metrics, insights, df, prophet_data):
    """–°—Ç–≤–æ—Ä—é—î –∑–≤—ñ—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ Word"""
    try:
        from docx import Document
        from docx.shared import Inches, Pt, RGBColor
        from docx.enum.text import WD_ALIGN_PARAGRAPH
        
        doc = Document()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = doc.add_heading(f'–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂—ñ–≤: {magazin} / {segment}', 0)
        title.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        doc.add_heading('–û—Å–Ω–æ–≤–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏', level=1)
        p = doc.add_paragraph()
        p.add_run(f'–ü–µ—Ä—ñ–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑—É: {days} –¥–Ω—ñ–≤\n').bold = True
        p.add_run(f'–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂—ñ–≤: {total:,.0f} —à—Ç.\n')
        p.add_run(f'–°–µ—Ä–µ–¥–Ω—å–æ–¥–æ–±–æ–≤—ñ –ø—Ä–æ–¥–∞–∂—ñ: {avg_daily:,.1f} —à—Ç.\n')
        p.add_run(f'–û—á—ñ–∫—É–≤–∞–Ω–∞ –≤–∏—Ä—É—á–∫–∞: {revenue:,.0f} –ì–†–ù\n')
        p.add_run(f'–†—ñ–≤–µ–Ω—å –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ: {confidence:.1f}%\n')
        
        # –ú–µ—Ç—Ä–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç—ñ
        if metrics:
            doc.add_heading('–ú–µ—Ç—Ä–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç—ñ', level=1)
            table = doc.add_table(rows=5, cols=2)
            table.style = 'Light Grid Accent 1'
            
            metrics_data = [
                ('MAE', f"{metrics['MAE']:.2f}"),
                ('RMSE', f"{metrics['RMSE']:.2f}"),
                ('MAPE', f"{metrics['MAPE']:.2f}%"),
                ('R¬≤', f"{metrics['R2']:.4f}"),
                ('–¢–æ—á–Ω—ñ—Å—Ç—å', f"{metrics['Accuracy']:.2f}%")
            ]
            
            for i, (metric, value) in enumerate(metrics_data):
                table.rows[i].cells[0].text = metric
                table.rows[i].cells[1].text = value
        
        # –Ü–Ω—Å–∞–π—Ç–∏
        doc.add_heading('–ö–ª—é—á–æ–≤—ñ —ñ–Ω—Å–∞–π—Ç–∏', level=1)
        for insight in insights:
            doc.add_paragraph(insight, style='List Bullet')
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ BytesIO
        buffer = BytesIO()
        doc.save(buffer)
        buffer.seek(0)
        return buffer.getvalue()
        
    except ImportError:
        return None

def main():
    st.markdown('<h1 class="main-header">üè™ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—ñ–≤</h1>', unsafe_allow_html=True)
    
    # –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        
        uploaded_file = st.file_uploader(
            "üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ Excel —Ñ–∞–π–ª",
            type=['xlsx', 'xls'],
            help="–§–∞–π–ª –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏: Magazin, Datasales, Art, Model, Segment, Price, Qty, Sum"
        )
        
        if uploaded_file:
            st.success("‚úÖ –§–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
    
    if not uploaded_file:
        st.info("üëÜ –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏")
        
        st.markdown("""
        ### üìã –í–∏–º–æ–≥–∏ –¥–æ —Ñ–∞–π–ª—É:
        - –§–æ—Ä–º–∞—Ç: Excel (.xlsx, .xls)
        - –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏:
          - `Magazin` - –Ω–∞–∑–≤–∞ –º–∞–≥–∞–∑–∏–Ω—É
          - `Datasales` - –¥–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂—É
          - `Art` - –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä—É
          - `Model` - –º–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä—É
          - `Segment` - —Å–µ–≥–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä—É
          - `Price` - —Ü—ñ–Ω–∞
          - `Qty` - –∫—ñ–ª—å–∫—ñ—Å—Ç—å
          - `Sum` - —Å—É–º–∞
        """)
        return
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    df = load_and_validate_data(uploaded_file)
    
    if df is None:
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–∏—Ö
    show_data_statistics(df)
    
    st.markdown("---")
    
    # –§—ñ–ª—å—Ç—Ä–∏
    st.markdown("## üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑—É")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        magazines = ['–í—Å—ñ –º–∞–≥–∞–∑–∏–Ω–∏'] + sorted(df['Magazin'].unique().tolist())
        selected_magazin = st.selectbox("üè™ –û–±–µ—Ä—ñ—Ç—å –º–∞–≥–∞–∑–∏–Ω", magazines)
    
    with col2:
        segments = ['–í—Å—ñ —Å–µ–≥–º–µ–Ω—Ç–∏'] + sorted(df['Segment'].unique().tolist())
        selected_segment = st.selectbox("üìÇ –û–±–µ—Ä—ñ—Ç—å —Å–µ–≥–º–µ–Ω—Ç", segments)
    
    with col3:
        forecast_days = st.slider("üìÖ –ü–µ—Ä—ñ–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑—É (–¥–Ω—ñ–≤)", 7, 90, 30)
    
    # –†–æ–∑—à–∏—Ä–µ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    with st.expander("‚öôÔ∏è –†–æ–∑—à–∏—Ä–µ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"):
        col1, col2 = st.columns(2)
        
        with col1:
            remove_outliers = st.checkbox("üéØ –í–∏–¥–∞–ª–∏—Ç–∏ –≤–∏–∫–∏–¥–∏", value=True)
            outlier_multiplier = st.slider("–ú–Ω–æ–∂–Ω–∏–∫ IQR", 1.0, 3.0, 1.5, 0.1) if remove_outliers else 1.5
        
        with col2:
            smooth_method = st.selectbox(
                "üìä –ú–µ—Ç–æ–¥ –∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è",
                ['ma', 'ema', 'savgol'],
                format_func=lambda x: {'ma': '–ö–æ–≤–∑–Ω–µ —Å–µ—Ä–µ–¥–Ω—î', 'ema': '–ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–µ –∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è', 'savgol': 'Savitzky-Golay'}[x]
            )
            smooth_window = st.slider("–í—ñ–∫–Ω–æ –∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è", 3, 21, 7, 2)
    
    # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
    filtered_df = df.copy()
    
    if selected_magazin != '–í—Å—ñ –º–∞–≥–∞–∑–∏–Ω–∏':
        filtered_df = filtered_df[filtered_df['Magazin'] == selected_magazin]
    
    if selected_segment != '–í—Å—ñ —Å–µ–≥–º–µ–Ω—Ç–∏':
        filtered_df = filtered_df[filtered_df['Segment'] == selected_segment]
    
    if len(filtered_df) == 0:
        st.warning("‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤")
        return
    
    # –ê–≥—Ä–µ–≥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –ø–æ –¥–∞—Ç–∞—Ö
    daily_sales = filtered_df.groupby('Datasales').agg({
        'Qty': 'sum',
        'Sum': 'sum'
    }).reset_index()
    
    # –û–±—Ä–æ–±–∫–∞ –≤–∏–∫–∏–¥—ñ–≤ —Ç–∞ –∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è
    if remove_outliers:
        daily_sales['Qty'] = remove_outliers_iqr(daily_sales['Qty'], outlier_multiplier)
    
    daily_sales['Qty_smooth'] = smooth_data(daily_sales['Qty'], smooth_method, smooth_window)
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É Prophet
    forecast, prophet_model = create_prophet_forecast(daily_sales, forecast_days)
    
    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–µ—Ç—Ä–∏–∫
    historical_dates = daily_sales['Datasales']
    forecast_historical = forecast[forecast['ds'].isin(historical_dates)]
    
    if len(forecast_historical) > 0:
        merged = daily_sales.merge(forecast_historical[['ds', 'yhat']], left_on='Datasales', right_on='ds')
        accuracy_metrics = calculate_accuracy(merged['Qty'], merged['yhat'])
    else:
        accuracy_metrics = None
    
    # –ü—Ä–æ–≥–Ω–æ–∑–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
    future_forecast = forecast[forecast['ds'] > daily_sales['Datasales'].max()].head(forecast_days)
    
    total_forecast = future_forecast['yhat'].sum()
    avg_daily_forecast = future_forecast['yhat'].mean()
    avg_price = filtered_df['Price'].mean()
    forecast_revenue = total_forecast * avg_price
    
    # –†—ñ–≤–µ–Ω—å –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ
    if accuracy_metrics:
        confidence_score = accuracy_metrics['Accuracy']
    else:
        confidence_score = 85.0
    
    # –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–≥–Ω–æ–∑—É
    st.markdown("## üìà –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂—ñ–≤")
    
    fig = go.Figure()
    
    # –Ü—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ
    fig.add_trace(go.Scatter(
        x=daily_sales['Datasales'],
        y=daily_sales['Qty'],
        name='–§–∞–∫—Ç–∏—á–Ω—ñ –ø—Ä–æ–¥–∞–∂—ñ',
        mode='lines',
        line=dict(color='blue', width=2)
    ))
    
    # –ü—Ä–æ–≥–Ω–æ–∑
    fig.add_trace(go.Scatter(
        x=future_forecast['ds'],
        y=future_forecast['yhat'],
        name='–ü—Ä–æ–≥–Ω–æ–∑',
        mode='lines',
        line=dict(color='red', width=2, dash='dash')
    ))
    
    # –î–æ–≤—ñ—Ä—á–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
    fig.add_trace(go.Scatter(
        x=future_forecast['ds'],
        y=future_forecast['yhat_upper'],
        name='–í–µ—Ä—Ö–Ω—è –º–µ–∂–∞',
        mode='lines',
        line=dict(width=0),
        showlegend=False
    ))
    
    fig.add_trace(go.Scatter(
        x=future_forecast['ds'],
        y=future_forecast['yhat_lower'],
        name='–î–æ–≤—ñ—Ä—á–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª',
        mode='lines',
        line=dict(width=0),
        fillcolor='rgba(255, 0, 0, 0.2)',
        fill='tonexty'
    ))
    
    fig.update_layout(
        title=f"–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂—ñ–≤ –Ω–∞ {forecast_days} –¥–Ω—ñ–≤",
        xaxis_title="–î–∞—Ç–∞",
        yaxis_title="–ö—ñ–ª—å–∫—ñ—Å—Ç—å (—à—Ç.)",
        height=500,
        hovermode='x unified'
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑—É
    st.markdown("## üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑—É")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown(
            f"""<div class="metric-container">
                <h3>üì¶ –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂—ñ–≤</h3>
                <h2>{total_forecast:,.0f} —à—Ç.</h2>
            </div>""",
            unsafe_allow_html=True
        )
    
    with col2:
        st.markdown(
            f"""<div class="metric-container">
                <h3>üìà –°–µ—Ä–µ–¥–Ω—å–æ–¥–æ–±–æ–≤—ñ</h3>
                <h2>{avg_daily_forecast:,.1f} —à—Ç.</h2>
            </div>""",
            unsafe_allow_html=True
        )
    
    with col3:
        st.markdown(
            f"""<div class="metric-container">
                <h3>üí∞ –û—á—ñ–∫—É–≤–∞–Ω–∞ –≤–∏—Ä—É—á–∫–∞</h3>
                <h2>{forecast_revenue:,.0f} –ì–†–ù</h2>
            </div>""",
            unsafe_allow_html=True
        )
    
    with col4:
        st.markdown(
            f"""<div class="metric-container">
                <h3>üéØ –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å</h3>
                <h2>{confidence_score:.1f}%</h2>
            </div>""",
            unsafe_allow_html=True
        )
    
    # –ú–µ—Ç—Ä–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç—ñ
    if accuracy_metrics:
        st.markdown("### üìè –ú–µ—Ç—Ä–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç—ñ –º–æ–¥–µ–ª—ñ")
        
        col1, col2, col3, col4 = st.columns(4)
        
        metrics_display = [
            ("MAE", accuracy_metrics['MAE'], "üìä"),
            ("RMSE", accuracy_metrics['RMSE'], "üìà"),
            ("MAPE", f"{accuracy_metrics['MAPE']:.2f}%", "üéØ"),
            ("R¬≤", accuracy_metrics['R2'], "üìê")
        ]
        
        cols = [col1, col2, col3, col4]
        for col, (name, value, emoji) in zip(cols, metrics_display):
            with col:
                if name == "MAPE":
                    st.metric(f"{emoji} {name}", value)
                elif name == "R¬≤":
                    st.metric(f"{emoji} {name}", f"{value:.4f}")
                else:
                    st.metric(f"{emoji} {name}", f"{value:.2f}")
    
    # –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤
    st.markdown("## üìâ –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤")
    
    with st.expander("üîç –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—ñ–≤"):
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üìÖ –û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥–∏ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è")
            
            min_date = df['Datasales'].min()
            max_date = df['Datasales'].max()
            
            period1_start = st.date_input("–ü–æ—á–∞—Ç–æ–∫ 1-–≥–æ –ø–µ—Ä—ñ–æ–¥—É", min_date)
            period1_end = st.date_input("–ö—ñ–Ω–µ—Ü—å 1-–≥–æ –ø–µ—Ä—ñ–æ–¥—É", min_date + pd.Timedelta(days=30))
        
        with col2:
            st.markdown("#### ")
            st.write("")
            period2_start = st.date_input("–ü–æ—á–∞—Ç–æ–∫ 2-–≥–æ –ø–µ—Ä—ñ–æ–¥—É", max_date - pd.Timedelta(days=30))
            period2_end = st.date_input("–ö—ñ–Ω–µ—Ü—å 2-–≥–æ –ø–µ—Ä—ñ–æ–¥—É", max_date)
        
        if st.button("üîç –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ –ø–µ—Ä—ñ–æ–¥–∏", use_container_width=True):
            # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö
            period1_data = filtered_df[
                (filtered_df['Datasales'] >= pd.Timestamp(period1_start)) &
                (filtered_df['Datasales'] <= pd.Timestamp(period1_end))
            ]
            
            period2_data = filtered_df[
                (filtered_df['Datasales'] >= pd.Timestamp(period2_start)) &
                (filtered_df['Datasales'] <= pd.Timestamp(period2_end))
            ]
            
            if len(period1_data) == 0 or len(period2_data) == 0:
                st.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è")
            else:
                # –ê–≥—Ä–µ–≥–∞—Ü—ñ—è –ø–æ –º–æ–¥–µ–ª—è—Ö
                period1_agg = period1_data.groupby('Model').agg({
                    'Qty': 'sum',
                    'Sum': 'sum'
                }).reset_index()
                period1_agg.columns = ['Model', 'Period1_Qty', 'Period1_Revenue']
                
                period2_agg = period2_data.groupby('Model').agg({
                    'Qty': 'sum',
                    'Sum': 'sum'
                }).reset_index()
                period2_agg.columns = ['Model', 'Period2_Qty', 'Period2_Revenue']
                
                # –û–±'—î–¥–Ω–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
                trend_data = period1_agg.merge(period2_agg, on='Model', how='outer').fillna(0)
                
                trend_data['Total_Qty'] = trend_data['Period1_Qty'] + trend_data['Period2_Qty']
                trend_data['Total_Revenue'] = trend_data['Period1_Revenue'] + trend_data['Period2_Revenue']
                
                # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–º—ñ–Ω–∏
                trend_data['Change_%'] = ((trend_data['Period2_Qty'] - trend_data['Period1_Qty']) / 
                                          trend_data['Period1_Qty'].replace(0, 1)) * 100
                
                # –§—ñ–ª—å—Ç—Ä —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏
                trend_data = trend_data[trend_data['Total_Qty'] >= 5]
                
                # –¢–û–ü-20 —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—é
                st.markdown("### üöÄ –¢–û–ü-20 –º–æ–¥–µ–ª–µ–π —ñ–∑ –Ω–∞–π–±—ñ–ª—å—à–∏–º –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º")
                
                growing_products = trend_data[trend_data['Change_%'] > 0].copy()
                
                if len(growing_products) > 0:
                    top_20_growing = growing_products.nlargest(20, 'Change_%')
                    top_20_growing['–°–µ—Ä–µ–¥–Ω—è_—Ü—ñ–Ω–∞'] = top_20_growing['Total_Revenue'] / top_20_growing['Total_Qty']
                    
                    # –ì—Ä–∞—Ñ—ñ–∫
                    fig_growth = go.Figure()
                    
                    fig_growth.add_trace(go.Bar(
                        y=top_20_growing['Model'],
                        x=top_20_growing['Change_%'],
                        orientation='h',
                        marker=dict(
                            color=top_20_growing['Change_%'],
                            colorscale='Greens',
                            showscale=True,
                            colorbar=dict(title="–ó—Ä–æ—Å—Ç–∞–Ω–Ω—è<br>%")
                        ),
                        text=top_20_growing['Change_%'].apply(lambda x: f'+{x:.1f}%'),
                        textposition='outside',
                        hovertemplate='<b>%{y}</b><br>–ó—Ä–æ—Å—Ç–∞–Ω–Ω—è: %{x:.1f}%<br><extra></extra>'
                    ))
                    
                    fig_growth.update_layout(
                        title="–¢–û–ü-20 –º–æ–¥–µ–ª–µ–π –∑ –Ω–∞–π–±—ñ–ª—å—à–∏–º –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º –ø—Ä–æ–¥–∞–∂—ñ–≤",
                        xaxis_title="–ó–º—ñ–Ω–∞ (%)",
                        yaxis_title="–ú–æ–¥–µ–ª—å",
                        height=600,
                        yaxis={'categoryorder': 'total ascending'}
                    )
                    
                    st.plotly_chart(fig_growth, use_container_width=True, key="top20_growth")
                    
                    # –¢–∞–±–ª–∏—Ü—è
                    st.markdown("##### üìã –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
                    
                    display_growth = top_20_growing[['Model', 'Total_Qty', 'Total_Revenue', 'Period1_Qty', 'Period2_Qty', 'Change_%']].copy()
                    display_growth = display_growth.reset_index(drop=True)
                    display_growth.index = display_growth.index + 1
                    display_growth = display_growth.rename(columns={
                        'Model': 'üè∑Ô∏è –ú–æ–¥–µ–ª—å',
                        'Total_Qty': 'üì¶ –í—Å—å–æ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ',
                        'Total_Revenue': 'üí∞ –í–∏—Ä—É—á–∫–∞ (–ì–†–ù)',
                        'Period1_Qty': 'üìä 1-–π –ø–µ—Ä—ñ–æ–¥',
                        'Period2_Qty': 'üìä 2-–π –ø–µ—Ä—ñ–æ–¥',
                        'Change_%': 'üìà –ó—Ä–æ—Å—Ç–∞–Ω–Ω—è %'
                    })
                    
                    st.dataframe(
                        display_growth.style.format({
                            'üì¶ –í—Å—å–æ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ': '{:,.0f}',
                            'üí∞ –í–∏—Ä—É—á–∫–∞ (–ì–†–ù)': '{:,.0f}',
                            'üìä 1-–π –ø–µ—Ä—ñ–æ–¥': '{:,.0f}',
                            'üìä 2-–π –ø–µ—Ä—ñ–æ–¥': '{:,.0f}',
                            'üìà –ó—Ä–æ—Å—Ç–∞–Ω–Ω—è %': '{:.1f}%'
                        }).background_gradient(subset=['üìà –ó—Ä–æ—Å—Ç–∞–Ω–Ω—è %'], cmap='Greens'),
                        use_container_width=True
                    )
                    
                    # –Ü–Ω—Å–∞–π—Ç–∏
                    st.success(f"üéØ **–õ—ñ–¥–µ—Ä –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è**: {top_20_growing.iloc[0]['Model']} - –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è {top_20_growing.iloc[0]['Change_%']:.1f}%")
                    
                    insights = []
                    
                    avg_growth = top_20_growing['Change_%'].mean()
                    if avg_growth > 50:
                        insights.append("üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è**: –ó–±—ñ–ª—å—à—Ç–µ –∑–∞–∫—É–ø—ñ–≤–ª—ñ —Ç–æ–≤–∞—Ä—ñ–≤-–ª—ñ–¥–µ—Ä—ñ–≤ –Ω–∞ 30-50%")
                    
                    high_revenue_growth = top_20_growing[top_20_growing['Total_Revenue'] > top_20_growing['Total_Revenue'].median()]
                    if len(high_revenue_growth) >= 5:
                        insights.append(f"üí∞ **–Ü–Ω—Å–∞–π—Ç**: {len(high_revenue_growth)} —Ç–æ–≤–∞—Ä—ñ–≤ —ñ–∑ –≤–∏—Å–æ–∫–æ—é –≤–∏—Ä—É—á–∫–æ—é –ø–æ–∫–∞–∑—É—é—Ç—å –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è")
                    
                    for insight in insights:
                        st.markdown(f'<div class="insight-card">{insight}</div>', unsafe_allow_html=True)
                    
                else:
                    st.info("‚ÑπÔ∏è –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ —ñ–∑ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º –ø—Ä–æ–¥–∞–∂—ñ–≤")
                
                # –¢–û–ü-20 —Ç–æ–≤–∞—Ä—ñ–≤ —ñ–∑ –ø–∞–¥—ñ–Ω–Ω—è–º
                st.markdown("### üìâ –¢–û–ü-20 –º–æ–¥–µ–ª–µ–π —ñ–∑ –Ω–∞–π–±—ñ–ª—å—à–∏–º –ø–∞–¥—ñ–Ω–Ω—è–º")
                
                # –¢—ñ–ª—å–∫–∏ —Ç–æ–≤–∞—Ä–∏ –∑ –ø–∞–¥—ñ–Ω–Ω—è–º
                declining_products = trend_data[trend_data['Change_%'] < 0].copy()
                
                if len(declining_products) > 0:
                    top_20_declining = declining_products.nsmallest(20, 'Change_%')
                    top_20_declining['–°–µ—Ä–µ–¥–Ω—è_—Ü—ñ–Ω–∞'] = top_20_declining['Total_Revenue'] / top_20_declining['Total_Qty']
                    
                    # –ì—Ä–∞—Ñ—ñ–∫
                    fig_decline = go.Figure()
                    
                    fig_decline.add_trace(go.Bar(
                        y=top_20_declining['Model'],
                        x=top_20_declining['Change_%'],
                        orientation='h',
                        marker=dict(
                            color=top_20_declining['Change_%'],
                            colorscale='Reds_r',
                            showscale=True,
                            colorbar=dict(title="–ü–∞–¥—ñ–Ω–Ω—è<br>%")
                        ),
                        text=top_20_declining['Change_%'].apply(lambda x: f'{x:.1f}%'),
                        textposition='outside',
                        hovertemplate='<b>%{y}</b><br>–ü–∞–¥—ñ–Ω–Ω—è: %{x:.1f}%<br><extra></extra>'
                    ))
                    
                    fig_decline.update_layout(
                        title="–¢–û–ü-20 –º–æ–¥–µ–ª–µ–π –∑ –Ω–∞–π–±—ñ–ª—å—à–∏–º –ø–∞–¥—ñ–Ω–Ω—è–º –ø—Ä–æ–¥–∞–∂—ñ–≤",
                        xaxis_title="–ó–º—ñ–Ω–∞ (%)",
                        yaxis_title="–ú–æ–¥–µ–ª—å",
                        height=600,
                        yaxis={'categoryorder': 'total descending'}
                    )
                    
                    st.plotly_chart(fig_decline, use_container_width=True, key="top20_decline")
                    
                    # –¢–∞–±–ª–∏—Ü—è
                    st.markdown("##### üìã –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
                    
                    display_decline = top_20_declining[['Model', 'Total_Qty', 'Total_Revenue', 'Period1_Qty', 'Period2_Qty', 'Change_%']].copy()
                    display_decline = display_decline.reset_index(drop=True)
                    display_decline.index = display_decline.index + 1
                    display_decline = display_decline.rename(columns={
                        'Model': 'üè∑Ô∏è –ú–æ–¥–µ–ª—å',
                        'Total_Qty': 'üì¶ –í—Å—å–æ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ',
                        'Total_Revenue': 'üí∞ –í–∏—Ä—É—á–∫–∞ (–ì–†–ù)',
                        'Period1_Qty': 'üìä 1-–π –ø–µ—Ä—ñ–æ–¥',
                        'Period2_Qty': 'üìä 2-–π –ø–µ—Ä—ñ–æ–¥',
                        'Change_%': 'üìâ –ü–∞–¥—ñ–Ω–Ω—è %'
                    })
                    
                    st.dataframe(
                        display_decline.style.format({
                            'üì¶ –í—Å—å–æ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ': '{:,.0f}',
                            'üí∞ –í–∏—Ä—É—á–∫–∞ (–ì–†–ù)': '{:,.0f}',
                            'üìä 1-–π –ø–µ—Ä—ñ–æ–¥': '{:,.0f}',
                            'üìä 2-–π –ø–µ—Ä—ñ–æ–¥': '{:,.0f}',
                            'üìâ –ü–∞–¥—ñ–Ω–Ω—è %': '{:.1f}%'
                        }).background_gradient(subset=['üìâ –ü–∞–¥—ñ–Ω–Ω—è %'], cmap='Reds_r'),
                        use_container_width=True
                    )
                    
                    # –ê–ª–µ—Ä—Ç–∏ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
                    critical_decline = top_20_declining[top_20_declining['Change_%'] < -50]
                    
                    if len(critical_decline) > 0:
                        st.error(f"üö® **–ö–†–ò–¢–ò–ß–ù–û**: {len(critical_decline)} —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –ø–∞–¥—ñ–Ω–Ω—è–º –±—ñ–ª—å—à–µ 50%!")
                    
                    st.warning(f"‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º–Ω–∏–π —Ç–æ–≤–∞—Ä**: {top_20_declining.iloc[0]['Model']} - –ø–∞–¥—ñ–Ω–Ω—è {top_20_declining.iloc[0]['Change_%']:.1f}%")
                    
                    st.markdown("##### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∑–∞ –ø—Ä–æ–±–ª–µ–º–Ω–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏:")
                    recommendations = [
                        "üéØ –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª—ñ–∑ –ø—Ä–∏—á–∏–Ω –ø–∞–¥—ñ–Ω–Ω—è (–∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—è, —Ü—ñ–Ω–∞, –∞–∫—Ç—É–∞–ª—å–Ω—ñ—Å—Ç—å)",
                        "üî• –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø—Ä–æ–º–æ-–∞–∫—Ü—ñ—ó –∑—ñ –∑–Ω–∏–∂–∫–∞–º–∏ 20-30%",
                        "üì¢ –ü–æ—Å–∏–ª–∏—Ç–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ —Ç–∞ —Ä–µ–∫–ª–∞–º—É",
                        "üí° –†–æ–∑–≥–ª—è–Ω—É—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É –∞–±–æ –∑–∞–º—ñ–Ω—É —Ç–æ–≤–∞—Ä—É",
                        "üì¶ –ó–Ω–∏–∑–∏—Ç–∏ –∑–∞–∫—É–ø—ñ–≤–ª—ñ –¥–æ —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó —Å–∏—Ç—É–∞—Ü—ñ—ó"
                    ]
                    
                    for rec in recommendations:
                        st.markdown(f'<div class="insight-card">{rec}</div>', unsafe_allow_html=True)
                    
                else:
                    st.success("‚úÖ –ß—É–¥–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏! –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –ø–∞–¥—ñ–Ω–Ω—è–º –ø—Ä–æ–¥–∞–∂—ñ–≤")
                    st.balloons()
            
            # –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
            st.markdown("### üéØ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó")
            
            marketing_insights = []
            
            # –ê–Ω–∞–ª—ñ–∑ —Ç–æ–ø —Ç–æ–≤–∞—Ä—ñ–≤
            top_5_revenue = trend_data.nlargest(5, 'Total_Revenue')
            total_revenue_all = trend_data['Total_Revenue'].sum()
            top_5_share = (top_5_revenue['Total_Revenue'].sum() / total_revenue_all) * 100
            
            if top_5_share > 50:
                marketing_insights.append({
                    'type': 'warning',
                    'title': '‚ö†Ô∏è –í–∏—Å–æ–∫–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è',
                    'text': f"–¢–û–ü-5 —Ç–æ–≤–∞—Ä—ñ–≤ –¥–∞—é—Ç—å {top_5_share:.1f}% –≤–∏—Ä—É—á–∫–∏. –¶–µ —Ä–∏–∑–∏–∫! –î–∏–≤–µ—Ä—Å–∏—Ñ—ñ–∫—É–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å."
                })
            else:
                marketing_insights.append({
                    'type': 'success',
                    'title': '‚úÖ –ó–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å',
                    'text': f"–¢–û–ü-5 —Ç–æ–≤–∞—Ä—ñ–≤ –¥–∞—é—Ç—å {top_5_share:.1f}% –≤–∏—Ä—É—á–∫–∏. –ì–∞—Ä–Ω–∞ –¥–∏–≤–µ—Ä—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è."
                })
            
            # –ê–Ω–∞–ª—ñ–∑ —Ç–æ–≤–∞—Ä—ñ–≤, —â–æ –ø–∞–¥–∞—é—Ç—å
            declining_count = len(trend_data[trend_data['Change_%'] < -20])
            if declining_count > 10:
                marketing_insights.append({
                    'type': 'error',
                    'title': 'üö® –ö—Ä–∏—Ç–∏—á–Ω–∞ —Å–∏—Ç—É–∞—Ü—ñ—è',
                    'text': f"{declining_count} —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –ø–∞–¥—ñ–Ω–Ω—è–º >20%. –¢–µ—Ä–º—ñ–Ω–æ–≤–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é!"
                })
            elif declining_count > 0:
                marketing_insights.append({
                    'type': 'warning',
                    'title': 'üìâ –ü–æ—Ç—Ä—ñ–±–Ω–∞ —É–≤–∞–≥–∞',
                    'text': f"{declining_count} —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –ø–∞–¥—ñ–Ω–Ω—è–º >20%. –ü—Ä–æ–≤–µ–¥—ñ—Ç—å –∞–Ω–∞–ª—ñ–∑ —Ç–∞ –∞–∫—Ü—ñ—ó."
                })
            
            # –ê–Ω–∞–ª—ñ–∑ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —á–µ–∫–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫)
            avg_transaction = filtered_df['Sum'].sum() / len(filtered_df) if len(filtered_df) > 0 else 0
            median_transaction = filtered_df['Sum'].median() if len(filtered_df) > 0 else 0
            
            if avg_transaction > 0 and median_transaction > 0 and avg_transaction < median_transaction * 0.7:
                marketing_insights.append({
                    'type': 'info',
                    'title': 'üí≥ –ù–∏–∑—å–∫–∏–π —Å–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫',
                    'text': f"–°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫ {avg_transaction:.0f} –ì–†–ù –Ω–∏–∂—á–µ –º–µ–¥—ñ–∞–Ω–∏ ({median_transaction:.0f} –ì–†–ù). –í–ø—Ä–æ–≤–∞–¥—å—Ç–µ cross-sell —Ç–∞ –±–∞–Ω–¥–ª–∏ —Ç–æ–≤–∞—Ä—ñ–≤."
                })
            
            # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∏—Ö —ñ–Ω—Å–∞–π—Ç—ñ–≤
            for insight in marketing_insights:
                if insight['type'] == 'success':
                    st.success(f"**{insight['title']}**: {insight['text']}")
                elif insight['type'] == 'warning':
                    st.warning(f"**{insight['title']}**: {insight['text']}")
                elif insight['type'] == 'error':
                    st.error(f"**{insight['title']}**: {insight['text']}")
                else:
                    st.info(f"**{insight['title']}**: {insight['text']}")
            
            # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –¥—ñ—ó
            st.markdown("#### üìã –ü–ª–∞–Ω –¥—ñ–π –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á—ñ 30 –¥–Ω—ñ–≤")
            
            top_20_best_count = len(trend_data.nlargest(20, 'Total_Revenue'))
            declining_count_action = len(trend_data[trend_data['Change_%'] < -20])
            
            action_plan = [
                f"1Ô∏è‚É£ **–¢–û–ü —Ç–æ–≤–∞—Ä–∏**: –ó–±—ñ–ª—å—à–∏—Ç–∏ –±—é–¥–∂–µ—Ç –Ω–∞ —Ä–µ–∫–ª–∞–º—É –¢–û–ü-{top_20_best_count} —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ 30%",
                f"2Ô∏è‚É£ **–¢–æ–≤–∞—Ä–∏, —â–æ –ø–∞–¥–∞—é—Ç—å**: –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑–ø—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –ø–∞–¥—ñ–Ω–Ω—è–º –∑—ñ –∑–Ω–∏–∂–∫–æ—é 20-30%",
                f"3Ô∏è‚É£ **Cross-sell**: –°—Ç–≤–æ—Ä–∏—Ç–∏ 5 —Ç–æ–≤–∞—Ä–Ω–∏—Ö –±–∞–Ω–¥–ª—ñ–≤ –¥–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —á–µ–∫—É",
                f"4Ô∏è‚É£ **–°—Ç–∞–±—ñ–ª—å–Ω—ñ —Ç–æ–≤–∞—Ä–∏**: –ó–∞–±–µ–∑–ø–µ—á–∏—Ç–∏ –ø–æ—Å—Ç—ñ–π–Ω—É –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å—Ç–∞–±—ñ–ª—å–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –Ω–∞ —Å–∫–ª–∞–¥—ñ",
                f"5Ô∏è‚É£ **–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥**: –©–æ—Ç–∏–∂–Ω—è –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –¥–∏–Ω–∞–º—ñ–∫—É —Ç–æ–≤–∞—Ä—ñ–≤, —â–æ –ø–∞–¥–∞—é—Ç—å"
            ]
            
            for action in action_plan:
                st.markdown(f'<div class="insight-card">{action}</div>', unsafe_allow_html=True)
            
            st.markdown("---")
            st.markdown("## üì• –ï–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")
            
            # Word –∑–≤—ñ—Ç
            prophet_data = {
                'historical': daily_sales,
                'forecast': future_forecast
            }
            
            insights = [
                f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {forecast_days} –¥–Ω—ñ–≤: {total_forecast:,.0f} —à—Ç.",
                f"–û—á—ñ–∫—É–≤–∞–Ω–∞ –≤–∏—Ä—É—á–∫–∞: {forecast_revenue:,.0f} –ì–†–ù",
                f"–†—ñ–≤–µ–Ω—å –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ: {confidence_score:.1f}%"
            ]
            
            word_data = create_word_report(
                future_forecast, selected_magazin, selected_segment, forecast_days,
                total_forecast, avg_daily_forecast, forecast_revenue, confidence_score,
                accuracy_metrics, insights, filtered_df, prophet_data
            )
            
            if word_data:
                st.download_button(
                    label="üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–≤—ñ—Ç (WORD)",
                    data=word_data,
                    file_name=f"report_{selected_magazin}_{selected_segment}.docx",
                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                    use_container_width=True
                )
            else:
                st.info("Word –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install python-docx")

if __name__ == "__main__":
    main()
