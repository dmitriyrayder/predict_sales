import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from prophet import Prophet
import warnings
warnings.filterwarnings('ignore')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üè™ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }
    
    .metric-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin: 0.5rem 0;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    
    .insight-card {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        margin: 0.5rem 0;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    
    .problem-card {
        background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
        border-left: 4px solid #ff6b6b;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data
def load_and_validate_data(uploaded_file):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞"""
    try:
        progress_bar = st.progress(0)
        progress_bar.progress(25)
        
        df = pd.read_excel(uploaded_file)
        progress_bar.progress(50)
        
        required_cols = ['Magazin', 'Datasales', 'Art', 'Describe', 'Model', 'Segment', 'Price', 'Qty', 'Sum']
        missing_cols = [col for col in required_cols if col not in df.columns]
        
        if missing_cols:
            st.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_cols}")
            return None
            
        progress_bar.progress(75)
        
        df['Datasales'] = pd.to_datetime(df['Datasales'], errors='coerce', dayfirst=True)
        df = df.dropna(subset=['Datasales']).sort_values('Datasales')
        df = df[(df['Qty'] >= 0) & (df['Price'] > 0)]
        
        progress_bar.progress(100)
        progress_bar.empty()
        
        st.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
        return df
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        return None

def show_data_statistics(df):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞–Ω–Ω—ã—Ö"""
    st.markdown("## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown(
            f"""<div class="metric-container">
                <h3>üì¶ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π</h3>
                <h2>{len(df):,}</h2>
            </div>""", 
            unsafe_allow_html=True
        )
        
    with col2:
        st.markdown(
            f"""<div class="metric-container">
                <h3>üè∑Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤</h3>
                <h2>{df['Art'].nunique():,}</h2>
            </div>""", 
            unsafe_allow_html=True
        )
        
    with col3:
        st.markdown(
            f"""<div class="metric-container">
                <h3>üè™ –ú–∞–≥–∞–∑–∏–Ω–æ–≤</h3>
                <h2>{df['Magazin'].nunique()}</h2>
            </div>""", 
            unsafe_allow_html=True
        )
        
    with col4:
        st.markdown(
            f"""<div class="metric-container">
                <h3>üìÇ –°–µ–≥–º–µ–Ω—Ç–æ–≤</h3>
                <h2>{df['Segment'].nunique()}</h2>
            </div>""", 
            unsafe_allow_html=True
        )
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.info(f"üìÖ **–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö**: {df['Datasales'].min().date()} - {df['Datasales'].max().date()}")
    with col2:
        st.info(f"üí∞ **–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞**: {df['Sum'].sum():,.0f} –ì–†–ù")
    with col3:
        st.info(f"üìà **–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏/–¥–µ–Ω—å**: {df.groupby('Datasales')['Qty'].sum().mean():.1f} —à—Ç.")

def prepare_prophet_data(df, target_col='Qty'):
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è Prophet"""
    prophet_df = df.groupby('Datasales')[target_col].sum().reset_index()
    prophet_df.columns = ['ds', 'y']
    return prophet_df

def train_prophet_model(train_data, periods=30):
    """–û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å Prophet"""
    try:
        model = Prophet(
            yearly_seasonality=True,
            weekly_seasonality=True,
            daily_seasonality=False,
            seasonality_mode='multiplicative',
            changepoint_prior_scale=0.05,
            interval_width=0.8
        )
        
        model.add_country_holidays(country_name='UA')
        
        with st.spinner('ü§ñ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ Prophet...'):
            model.fit(train_data)
            
        future = model.make_future_dataframe(periods=periods)
        forecast = model.predict(future)
        
        return model, forecast
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
        return None, None

def calculate_segment_volatility(df, selected_magazin, selected_segment):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞"""
    filtered = df.copy()
    if selected_magazin != '–í—Å–µ':
        filtered = filtered[filtered['Magazin'] == selected_magazin]
    if selected_segment != '–í—Å–µ':
        filtered = filtered[filtered['Segment'] == selected_segment]
        
    daily_sales = filtered.groupby('Datasales')['Qty'].sum()
    if len(daily_sales) < 2:
        return 0.2
        
    volatility = daily_sales.std() / daily_sales.mean() if daily_sales.mean() > 0 else 0.2
    return max(0.1, min(0.5, volatility))

def get_forecast_scenarios(forecast, segment_volatility=0.2):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    realistic = forecast['yhat'].values
    
    if 'yhat_lower' in forecast.columns and 'yhat_upper' in forecast.columns:
        optimistic = forecast['yhat_upper'].values
        pessimistic = forecast['yhat_lower'].values
    else:
        pessimistic = realistic * (1 - segment_volatility)
        optimistic = realistic * (1 + segment_volatility * 0.7)
        
    return realistic, optimistic, np.maximum(pessimistic, 0)

def plot_forecast(df, forecast, title):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    fig = go.Figure()
    
    fig.add_trace(go.Scatter(
        x=df['ds'], 
        y=df['y'],
        mode='lines+markers',
        name='üìä –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ',
        line=dict(color='#636EFA', width=3),
        marker=dict(size=6, symbol='circle'),
        hovertemplate='<b>–î–∞—Ç–∞:</b> %{x}<br><b>–ü—Ä–æ–¥–∞–∂–∏:</b> %{y}<extra></extra>'
    ))
    
    forecast_data = forecast[forecast['ds'] > df['ds'].max()]
    
    fig.add_trace(go.Scatter(
        x=forecast_data['ds'], 
        y=forecast_data['yhat'],
        mode='lines+markers',
        name='üîÆ –ü—Ä–æ–≥–Ω–æ–∑',
        line=dict(color='#00CC96', width=4, dash='dash'),
        marker=dict(size=8, symbol='diamond'),
        hovertemplate='<b>–î–∞—Ç–∞:</b> %{x}<br><b>–ü—Ä–æ–≥–Ω–æ–∑:</b> %{y:.0f}<extra></extra>'
    ))
    
    if 'yhat_lower' in forecast_data.columns:
        fig.add_trace(go.Scatter(
            x=forecast_data['ds'],
            y=forecast_data['yhat_upper'],
            fill=None,
            mode='lines',
            line_color='rgba(0,0,0,0)',
            showlegend=False
        ))
        
        fig.add_trace(go.Scatter(
            x=forecast_data['ds'],
            y=forecast_data['yhat_lower'],
            fill='tonexty',
            mode='lines',
            fillcolor='rgba(0, 204, 150, 0.2)',
            line_color='rgba(0,0,0,0)',
            name='üìà –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª',
            hovertemplate='<b>–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞:</b> %{y:.0f}<extra></extra>'
        ))
    
    fig.update_layout(
        title={'text': f'<b>{title}</b>', 'y': 0.95, 'x': 0.5, 'xanchor': 'center', 'yanchor': 'top', 'font': {'size': 24, 'color': '#1f77b4'}},
        xaxis=dict(title='<b>–î–∞—Ç–∞</b>', showgrid=True, gridwidth=1, gridcolor='rgba(128,128,128,0.2)', tickformat='%Y-%m-%d'),
        yaxis=dict(title='<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂</b>', showgrid=True, gridwidth=1, gridcolor='rgba(128,128,128,0.2)'),
        hovermode='x unified',
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1, bgcolor='rgba(255,255,255,0.8)'),
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='rgba(0,0,0,0)',
        font=dict(family="Arial", size=12)
    )
    
    return fig

def plot_prophet_components(model, forecast):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Prophet"""
    from prophet.plot import plot_components_plotly
    fig = plot_components_plotly(model, forecast)
    fig.update_layout(
        title_text="<b>üìà –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞</b>",
        title_x=0.5,
        font=dict(family="Arial", size=12),
        plot_bgcolor='rgba(0,0,0,0)'
    )
    return fig

def plot_monthly_analysis_with_forecast(df, selected_magazin, selected_segment, model, forecast_days):
    """–°–æ–∑–¥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ—Å—è—Ü–∞–º —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º"""
    filtered_df = df.copy()
    if selected_magazin != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['Magazin'] == selected_magazin]
    if selected_segment != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['Segment'] == selected_segment]
    
    # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    filtered_df['year_month'] = filtered_df['Datasales'].dt.to_period('M')
    monthly_data = filtered_df.groupby('year_month').agg({'Sum': 'sum', 'Qty': 'sum'}).reset_index()
    monthly_data['year_month'] = monthly_data['year_month'].astype(str)
    monthly_data['type'] = '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ'
    
    # –ü—Ä–æ–≥–Ω–æ–∑
    if model is not None:
        prophet_data = prepare_prophet_data(filtered_df)
        future = model.make_future_dataframe(periods=forecast_days)
        forecast_full = model.predict(future)
        
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã
        forecast_future = forecast_full[forecast_full['ds'] > prophet_data['ds'].max()].copy()
        forecast_future['year_month'] = pd.to_datetime(forecast_future['ds']).dt.to_period('M')
        
        # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—ã—Ä—É—á–∫–∏
        avg_price = filtered_df['Price'].mean() if not filtered_df.empty else 0
        
        forecast_monthly = forecast_future.groupby('year_month').agg({'yhat': 'sum'}).reset_index()
        forecast_monthly['Sum'] = forecast_monthly['yhat'] * avg_price
        forecast_monthly['Qty'] = forecast_monthly['yhat']
        forecast_monthly['year_month'] = forecast_monthly['year_month'].astype(str)
        forecast_monthly['type'] = '–ü—Ä–æ–≥–Ω–æ–∑'
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º
        combined_data = pd.concat([
            monthly_data[['year_month', 'Sum', 'type']],
            forecast_monthly[['year_month', 'Sum', 'type']]
        ], ignore_index=True)
    else:
        combined_data = monthly_data[['year_month', 'Sum', 'type']]
    
    # –ì—Ä–∞—Ñ–∏–∫
    fig = go.Figure()
    
    hist_data = combined_data[combined_data['type'] == '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ']
    fig.add_trace(go.Bar(
        x=hist_data['year_month'],
        y=hist_data['Sum'],
        name='üí∞ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –≤—ã—Ä—É—á–∫–∞',
        marker_color='#636EFA',
        text=hist_data['Sum'].round(0),
        texttemplate='%{text:,.0f}',
        textposition='outside',
        hovertemplate='<b>–ú–µ—Å—è—Ü:</b> %{x}<br><b>–í—ã—Ä—É—á–∫–∞:</b> %{y:,.0f} –ì–†–ù<extra></extra>'
    ))
    
    if model is not None:
        forecast_data = combined_data[combined_data['type'] == '–ü—Ä–æ–≥–Ω–æ–∑']
        fig.add_trace(go.Bar(
            x=forecast_data['year_month'],
            y=forecast_data['Sum'],
            name='üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏',
            marker_color='#00CC96',
            marker_pattern_shape="/",
            text=forecast_data['Sum'].round(0),
            texttemplate='%{text:,.0f}',
            textposition='outside',
            hovertemplate='<b>–ú–µ—Å—è—Ü:</b> %{x}<br><b>–ü—Ä–æ–≥–Ω–æ–∑:</b> %{y:,.0f} –ì–†–ù<extra></extra>'
        ))
    
    fig.update_layout(
        title=f'<b>üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ—Å—è—Ü–∞–º —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º - {selected_segment}</b>',
        title_x=0.5,
        xaxis_title='<b>–ú–µ—Å—è—Ü</b>',
        yaxis_title='<b>–í—ã—Ä—É—á–∫–∞ (–ì–†–ù)</b>',
        plot_bgcolor='rgba(0,0,0,0)',
        font=dict(family="Arial", size=12),
        barmode='group'
    )
    
    return fig

def get_top_models_by_segment(df, selected_magazin):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø –º–æ–¥–µ–ª–µ–π –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º"""
    if selected_magazin != '–í—Å–µ':
        df = df[df['Magazin'] == selected_magazin]
        
    segments_top_models = {}
    
    for segment in df['Segment'].unique():
        segment_data = df[df['Segment'] == segment]
        
        model_stats = segment_data.groupby('Model').agg({
            'Qty': 'sum',
            'Sum': 'sum',
            'Price': 'mean'
        }).reset_index()
        
        top_models = model_stats.nlargest(10, 'Qty')
        top_models['Price'] = top_models['Price'].round(0)
        top_models['Qty'] = top_models['Qty'].astype(int)
        top_models['Sum'] = top_models['Sum'].round(0)
        
        segments_top_models[segment] = top_models
        
    return segments_top_models

def generate_insights(df, forecast_data, selected_magazin, selected_segment):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Å–∞–π—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    insights = []
    problems = []
    
    filtered_df = df.copy()
    if selected_magazin != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['Magazin'] == selected_magazin]
    if selected_segment != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['Segment'] == selected_segment]
    
    prophet_data = prepare_prophet_data(filtered_df)
    
    if len(prophet_data) >= 30:
        recent_data = prophet_data.tail(30)['y'].mean()
        older_data = prophet_data.iloc[-60:-30]['y'].mean() if len(prophet_data) >= 60 else recent_data
        
        growth_rate = (recent_data / older_data - 1) * 100 if older_data > 0 else 0
        
        if growth_rate > 10:
            insights.append(f"üìà **–†–û–°–¢ –ü–†–û–î–ê–ñ**: –ù–∞–±–ª—é–¥–∞–µ—Ç—Å—è —Ä–æ—Å—Ç –Ω–∞ {growth_rate:.1f}%. –£–≤–µ–ª–∏—á—å—Ç–µ –∑–∞–∫—É–ø–∫–∏!")
        elif growth_rate < -10:
            insights.append(f"üìâ **–°–ù–ò–ñ–ï–ù–ò–ï –ü–†–û–î–ê–ñ**: –ü–∞–¥–µ–Ω–∏–µ –Ω–∞ {abs(growth_rate):.1f}%. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏!")
            problems.append("‚ö†Ô∏è **–ü–†–û–ë–õ–ï–ú–ê**: –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂")
    
    if len(prophet_data) > 1:
        volatility = prophet_data['y'].std() / prophet_data['y'].mean() if prophet_data['y'].mean() > 0 else 0
        
        if volatility > 0.5:
            insights.append("‚ö° **–í–´–°–û–ö–ê–Ø –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–¨**: –£–≤–µ–ª–∏—á—å—Ç–µ —Å—Ç—Ä–∞—Ö–æ–≤—ã–µ –∑–∞–ø–∞—Å—ã –Ω–∞ 30%")
            problems.append("üéØ **–ù–ï–°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–¨**: –°–ª–æ–∂–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏")
        elif volatility < 0.1:
            insights.append("‚úÖ **–°–¢–ê–ë–ò–õ–¨–ù–´–ï –ü–†–û–î–ê–ñ–ò**: –ú–æ–∂–Ω–æ —Ç–æ—á–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫—É–ø–∫–∏")
    
    if len(forecast_data) > 7:
        forecast_trend = forecast_data.iloc[-7:]['yhat'].mean() / forecast_data.iloc[:7]['yhat'].mean()
        
        if forecast_trend > 1.05:
            insights.append("üöÄ **–ü–†–û–ì–ù–û–ó –†–û–°–¢–ê**: –û–∂–∏–¥–∞–µ—Ç—Å—è —Ä–æ—Å—Ç. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—é —Å–ø—Ä–æ—Å–∞!")
        elif forecast_trend < 0.95:
            insights.append("‚¨áÔ∏è **–ü–†–û–ì–ù–û–ó –°–ü–ê–î–ê**: –í–æ–∑–º–æ–∂–Ω–æ —Å–Ω–∏–∂–µ–Ω–∏–µ. –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–æ-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    if not insights:
        insights.append("üìä **–°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø**: –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
    
    return insights, problems

def show_forecast_statistics(filtered_df, forecast, forecast_days, selected_magazin, selected_segment, df):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    st.markdown("## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞")
    
    historical_data = filtered_df.groupby('Datasales')['Qty'].sum().reset_index()
    
    if len(historical_data) >= forecast_days:
        hist_qty = historical_data.tail(forecast_days)['Qty'].sum()
    else:
        daily_avg = historical_data['Qty'].mean() if len(historical_data) > 0 else 0
        hist_qty = daily_avg * forecast_days
    
    avg_price = filtered_df['Price'].mean() if not filtered_df.empty else 0
    hist_sum = hist_qty * avg_price
    
    segment_volatility = calculate_segment_volatility(df, selected_magazin, selected_segment)
    forecast_period = forecast.tail(forecast_days) if len(forecast) > forecast_days else forecast
    
    realistic, optimistic, pessimistic = get_forecast_scenarios(forecast_period, segment_volatility)
    
    realistic_qty = realistic.sum()
    optimistic_qty = optimistic.sum()
    pessimistic_qty = pessimistic.sum()
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### üì¶ –ü—Ä–æ–≥–Ω–æ–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")
        
        scenarios_df = pd.DataFrame({
            '–°—Ü–µ–Ω–∞—Ä–∏–π': ['üìä –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π', 'üò∞ –ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π', 'üéØ –†–µ–∞–ª—å–Ω—ã–π', 'üöÄ –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π'],
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': [f"{int(hist_qty):,}", f"{int(pessimistic_qty):,}", 
                          f"{int(realistic_qty):,}", f"{int(optimistic_qty):,}"],
            '–ò–∑–º–µ–Ω–µ–Ω–∏–µ': [
                '‚Äî',
                f"{((pessimistic_qty/hist_qty - 1) * 100):+.1f}%" if hist_qty > 0 else '‚Äî',
                f"{((realistic_qty/hist_qty - 1) * 100):+.1f}%" if hist_qty > 0 else '‚Äî',
                f"{((optimistic_qty/hist_qty - 1) * 100):+.1f}%" if hist_qty > 0 else '‚Äî'
            ]
        })
        
        st.dataframe(scenarios_df, use_container_width=True, hide_index=True)
    
    with col2:
        st.markdown("### üí∞ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏")
        
        revenue_df = pd.DataFrame({
            '–°—Ü–µ–Ω–∞—Ä–∏–π': ['üìä –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π', 'üò∞ –ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π', 'üéØ –†–µ–∞–ª—å–Ω—ã–π', 'üöÄ –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π'],
            '–í—ã—Ä—É—á–∫–∞ (–ì–†–ù)': [
                f"{hist_sum:,.0f}",
                f"{pessimistic_qty * avg_price:,.0f}",
                f"{realistic_qty * avg_price:,.0f}",
                f"{optimistic_qty * avg_price:,.0f}"
            ]
        })
        
        st.dataframe(revenue_df, use_container_width=True, hide_index=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.info(f"üìä **–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å**: {segment_volatility:.1%}")
    with col2:
        st.info(f"üí∞ **–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞**: {avg_price:.0f} –ì–†–ù")
    with col3:
        st.info(f"üìÖ **–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞**: {forecast_days} –¥–Ω–µ–π")

def main():
    st.markdown('<h1 class="main-header">üè™ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂</h1>', unsafe_allow_html=True)
    
    with st.sidebar:
        st.markdown("## ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        uploaded_file = st.file_uploader(
            "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", 
            type=['xlsx', 'xls'],
            help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: Magazin, Datasales, Art, Describe, Model, Segment, Price, Qty, Sum"
        )
    
    if uploaded_file is None:
        st.markdown("""
        ## üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂!
        
        ### üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:
        
        1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel** —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
        2. **–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã** –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–º–∞–≥–∞–∑–∏–Ω, —Å–µ–≥–º–µ–Ω—Ç, –ø–µ—Ä–∏–æ–¥)
        3. **–ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑** —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏ Prophet
        4. **–ò–∑—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏** –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂
        
        ### üìä –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º:
        """)
        
        required_columns = pd.DataFrame({
            '–ö–æ–ª–æ–Ω–∫–∞': ['Magazin', 'Datasales', 'Art', 'Describe', 'Model', 'Segment', 'Price', 'Qty', 'Sum'],
            '–û–ø–∏—Å–∞–Ω–∏–µ': [
                '–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞',
                '–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏',
                '–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞',
                '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
                '–ú–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–∞',
                '–°–µ–≥–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–∞',
                '–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É',
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                '–û–±—â–∞—è —Å—É–º–º–∞'
            ],
            '–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö': ['–¢–µ–∫—Å—Ç', '–î–∞—Ç–∞', '–¢–µ–∫—Å—Ç', '–¢–µ–∫—Å—Ç', '–¢–µ–∫—Å—Ç', '–¢–µ–∫—Å—Ç', '–ß–∏—Å–ª–æ', '–ß–∏—Å–ª–æ', '–ß–∏—Å–ª–æ']
        })
        
        st.dataframe(required_columns, use_container_width=True, hide_index=True)
        
        st.markdown("""
        ### üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:
        - üìà **–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ** –ø—Ä–æ–¥–∞–∂ –Ω–∞ 7, 14 –∏–ª–∏ 30 –¥–Ω–µ–π
        - üéØ **–¢—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è** –ø—Ä–æ–≥–Ω–æ–∑–∞ (–ø–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π, —Ä–µ–∞–ª—å–Ω—ã–π, –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π)
        - üìä **–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤** –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
        - üèÜ **–¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤** –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
        - üí° **–£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏** –¥–ª—è –±–∏–∑–Ω–µ—Å–∞
        """)
        
        return
    
    df = load_and_validate_data(uploaded_file)
    
    if df is None:
        return
    
    show_data_statistics(df)
    
    st.markdown("## üéõÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        selected_magazin = st.selectbox(
            "üè™ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω",
            ['–í—Å–µ'] + sorted(df['Magazin'].unique().tolist()),
            help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –∏–ª–∏ '–í—Å–µ' –¥–ª—è –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
        )
    
    with col2:
        selected_segment = st.selectbox(
            "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç",
            ['–í—Å–µ'] + sorted(df['Segment'].unique().tolist()),
            help="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        )
    
    with col3:
        forecast_days = st.selectbox(
            "üìÖ –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞",
            [7, 14, 30],
            index=1,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"
        )
    
    if st.button("üîÆ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", type="primary", use_container_width=True):
        filtered_df = df.copy()
        
        if selected_magazin != '–í—Å–µ':
            filtered_df = filtered_df[filtered_df['Magazin'] == selected_magazin]
        
        if selected_segment != '–í—Å–µ':
            filtered_df = filtered_df[filtered_df['Segment'] == selected_segment]
        
        if len(filtered_df) < 10:
            st.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è (–º–∏–Ω–∏–º—É–º 10 –∑–∞–ø–∏—Å–µ–π)")
            return
        
        prophet_data = prepare_prophet_data(filtered_df)
        model, forecast = train_prophet_model(prophet_data, periods=forecast_days)
        
        if model is None or forecast is None:
            return
        
        st.success("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
        
        show_forecast_statistics(filtered_df, forecast, forecast_days, selected_magazin, selected_segment, df)
        
        st.markdown("## üìà –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂")
        
        fig_main = plot_forecast(
            prophet_data, 
            forecast, 
            f"–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ - {selected_magazin} / {selected_segment}"
        )
        st.plotly_chart(fig_main, use_container_width=True)
        
        st.markdown("## üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        
        fig_components = plot_prophet_components(model, forecast)
        st.plotly_chart(fig_components, use_container_width=True)
        
        st.markdown("## üìä –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –≤—ã—Ä—É—á–∫–∏")
        fig_monthly = plot_monthly_analysis_with_forecast(df, selected_magazin, selected_segment, model, forecast_days)
        st.plotly_chart(fig_monthly, use_container_width=True)
        
        st.markdown("## üèÜ –¢–æ–ø-10 –º–æ–¥–µ–ª–µ–π –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º")
        
        segments_top_models = get_top_models_by_segment(df, selected_magazin)
        
        if segments_top_models:
            tabs = st.tabs([f"üì¶ {segment}" for segment in segments_top_models.keys()])
            
            for tab, (segment, top_models) in zip(tabs, segments_top_models.items()):
                with tab:
                    if not top_models.empty:
                        display_df = top_models[['Model', 'Qty', 'Sum', 'Price']].rename(columns={
                            'Model': 'üè∑Ô∏è –ú–æ–¥–µ–ª—å',
                            'Qty': 'üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                            'Sum': 'üí∞ –í—ã—Ä—É—á–∫–∞ (–ì–†–ù)',
                            'Price': 'üíµ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞'
                        })
                        
                        st.dataframe(display_df, use_container_width=True, hide_index=True)
                    else:
                        st.info("üîç –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞")
        
        st.markdown("## üí° –ò–Ω—Å–∞–π—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        
        insights, problems = generate_insights(df, forecast, selected_magazin, selected_segment)
        
        if problems:
            st.markdown("### üö® –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
            for problem in problems:
                st.markdown(f'<div class="problem-card">{problem}</div>', unsafe_allow_html=True)
        
        st.markdown("### üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for insight in insights:
            st.markdown(f'<div class="insight-card">{insight}</div>', unsafe_allow_html=True)
        
        st.markdown("## üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –¥–Ω—è–º")
        
        forecast_display = forecast.tail(forecast_days).copy()
        segment_volatility = calculate_segment_volatility(df, selected_magazin, selected_segment)
        
        realistic, optimistic, pessimistic = get_forecast_scenarios(forecast_display, segment_volatility)
        
        detailed_forecast = pd.DataFrame({
            'üìÖ –î–∞—Ç–∞': pd.to_datetime(forecast_display['ds']).dt.strftime('%Y-%m-%d (%A)'),
            'üò∞ –ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π': pessimistic.round(0).astype(int),
            'üéØ –†–µ–∞–ª—å–Ω—ã–π': realistic.round(0).astype(int),
            'üöÄ –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π': optimistic.round(0).astype(int),
            'üìä –¢—Ä–µ–Ω–¥': forecast_display['trend'].round(0).astype(int)
        })
        
        st.dataframe(detailed_forecast, use_container_width=True, hide_index=True)
        
        st.markdown("## üìà –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            avg_daily_forecast = realistic.mean()
            st.metric(
                "üìä –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏/–¥–µ–Ω—å",
                f"{avg_daily_forecast:.0f}",
                delta=f"{avg_daily_forecast - prophet_data['y'].tail(30).mean():.0f}"
            )
        
        with col2:
            total_forecast = realistic.sum()
            st.metric(
                "üì¶ –û–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑",
                f"{total_forecast:.0f}",
                delta=f"{total_forecast - prophet_data['y'].tail(forecast_days).sum():.0f}"
            )
        
        with col3:
            avg_price = filtered_df['Price'].mean() if not filtered_df.empty else 0
            forecast_revenue = total_forecast * avg_price
            st.metric(
                "üí∞ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏",
                f"{forecast_revenue:,.0f} –ì–†–ù"
            )
        
        with col4:
            confidence_score = (1 - segment_volatility) * 100
            st.metric(
                "üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞",
                f"{confidence_score:.0f}%"
            )
        
        st.markdown("## üì• –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        col1, col2 = st.columns(2)
        
        with col1:
            export_data = detailed_forecast.copy()
            export_data['–ú–∞–≥–∞–∑–∏–Ω'] = selected_magazin
            export_data['–°–µ–≥–º–µ–Ω—Ç'] = selected_segment
            
            csv = export_data.to_csv(index=False)
            st.download_button(
                label="üìä –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ (CSV)",
                data=csv,
                file_name=f"forecast_{selected_magazin}_{selected_segment}_{forecast_days}days.csv",
                mime="text/csv",
                use_container_width=True
            )
        
        with col2:
            report = f"""
# –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–æ–¥–∞–∂

**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M')}
**–ú–∞–≥–∞–∑–∏–Ω:** {selected_magazin}
**–°–µ–≥–º–µ–Ω—Ç:** {selected_segment}
**–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞:** {forecast_days} –¥–Ω–µ–π

## –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
- **–û–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑:** {total_forecast:.0f} –µ–¥–∏–Ω–∏—Ü
- **–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏/–¥–µ–Ω—å:** {avg_daily_forecast:.0f} –µ–¥–∏–Ω–∏—Ü
- **–ü—Ä–æ–≥–Ω–æ–∑–Ω–∞—è –≤—ã—Ä—É—á–∫–∞:** {forecast_revenue:,.0f} –ì–†–ù
- **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞:** {confidence_score:.0f}%

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
{chr(10).join([f"- {insight}" for insight in insights])}
            """
            
            st.download_button(
                label="üìÑ –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç (TXT)",
                data=report,
                file_name=f"report_{selected_magazin}_{selected_segment}.txt",
                mime="text/plain",
                use_container_width=True
            )

if __name__ == "__main__":
    main()
