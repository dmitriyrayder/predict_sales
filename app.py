import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from prophet import Prophet
from catboost import CatBoostRegressor
import warnings
warnings.filterwarnings('ignore')

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –±–æ–ª–µ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–∞
st.set_page_config(
    page_title="–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂",
    page_icon="üîÆ",
    layout="wide",
    initial_sidebar_state="expanded",
)

# --- –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ –∏ —Ç–µ–º—ã ---
def local_css(file_name):
    with open(file_name) as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª style.css –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ –≤–∞—à —Å–∫—Ä–∏–ø—Ç
with open("style.css", "w") as f:
    f.write("""
    /* –ò–º–ø–æ—Ä—Ç —à—Ä–∏—Ñ—Ç–æ–≤ */
    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap');

    body {
        font-family: 'Roboto', sans-serif;
    }

    /* –°—Ç–∏–ª—å –¥–ª—è –º–µ—Ç—Ä–∏–∫ */
    .stMetric {
        background-color: #2E2E3A;
        border-radius: 10px;
        padding: 15px;
        color: white;
    }
    
    .stMetric .st-ae { /* –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏ */
        color: #00BFFF;
    }

    /* –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫ */
    .stButton>button {
        background-color: #00BFFF;
        color: white;
        border-radius: 5px;
        border: none;
        padding: 10px 20px;
        font-size: 16px;
    }
    .stButton>button:hover {
        background-color: #009ACD;
    }

    /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
    h1, h2, h3 {
        color: #00BFFF;
    }
    """)
local_css("style.css")


def load_and_validate_data(uploaded_file):
    try:
        df = pd.read_excel(uploaded_file)
        required_cols = ['Magazin', 'Datasales', 'Art', 'Describe', 'Model', 'Segment', 'Price', 'Qty', 'Sum']
        missing_cols = [col for col in required_cols if col not in df.columns]
        if missing_cols:
            st.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_cols}")
            return None
        df['Datasales'] = pd.to_datetime(df['Datasales'], errors='coerce', dayfirst=True)
        df = df.dropna(subset=['Datasales']).sort_values('Datasales')
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return None

def show_data_statistics(df):
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", f"{len(df):,}")
    with col2:
        st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤", f"{df['Art'].nunique():,}")
    with col3:
        st.metric("–ú–∞–≥–∞–∑–∏–Ω–æ–≤", df['Magazin'].nunique())
    with col4:
        st.metric("–°–µ–≥–º–µ–Ω—Ç–æ–≤", df['Segment'].nunique())
    st.info(f"**–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö:** {df['Datasales'].min().date()} - {df['Datasales'].max().date()}")

def create_features(df):
    df = df.copy().sort_values(['Magazin', 'Segment', 'Art', 'Datasales']).reset_index(drop=True)
    df['year'] = df['Datasales'].dt.year
    df['month'] = df['Datasales'].dt.month
    df['dayofweek'] = df['Datasales'].dt.dayofweek
    df['quarter'] = df['Datasales'].dt.quarter
    df['is_weekend'] = (df['Datasales'].dt.dayofweek >= 5).astype(int)
    for col in ['Qty', 'Sum']:
        for lag in [1, 7, 30]:
            df[f'{col}_lag_{lag}'] = df.groupby(['Magazin', 'Segment', 'Art'])[col].shift(lag)
        for window in [7, 30]:
            df[f'{col}_ma_{window}'] = df.groupby(['Magazin', 'Segment', 'Art'])[col].transform(lambda x: x.rolling(window).mean())
    return df

def prepare_prophet_data(df, target_col='Qty'):
    prophet_df = df.groupby('Datasales')[target_col].sum().reset_index()
    prophet_df.columns = ['ds', 'y']
    return prophet_df

def train_prophet_model(train_data, periods=30):
    model = Prophet(yearly_seasonality=True, weekly_seasonality=False, daily_seasonality=False)
    model.fit(train_data)
    future = model.make_future_dataframe(periods=periods)
    forecast = model.predict(future)
    return model, forecast

def prepare_catboost_data(df):
    df_features = create_features(df)
    daily_data = df_features.groupby('Datasales').agg({
        'Qty': 'sum', 'Sum': 'sum', 'Price': 'mean',
        'year': 'first', 'month': 'first', 'dayofweek': 'first',
        'quarter': 'first', 'is_weekend': 'first'
    }).reset_index()
    for lag in [1, 7, 30]:
        daily_data[f'Qty_lag_{lag}'] = daily_data['Qty'].shift(lag)
    for window in [7, 30]:
        daily_data[f'Qty_ma_{window}'] = daily_data['Qty'].rolling(window).mean()
    return daily_data

def train_catboost_model(data, periods=30):
    feature_cols = ['year', 'month', 'dayofweek', 'quarter', 'is_weekend', 'Price',
                   'Qty_lag_1', 'Qty_lag_7', 'Qty_lag_30', 'Qty_ma_7', 'Qty_ma_30']
    clean_data = data.dropna()
    if len(clean_data) < 30:
        raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è CatBoost")
    X, y = clean_data[feature_cols], clean_data['Qty']
    model = CatBoostRegressor(iterations=500, learning_rate=0.1, depth=6, 
                             loss_function='RMSE', random_seed=42, verbose=False)
    model.fit(X, y)
    last_date = data['Datasales'].iloc[-1]
    future_dates = pd.date_range(start=last_date + pd.Timedelta(days=1), periods=periods, freq='D')
    forecast_data = []
    last_row = clean_data.iloc[-1].copy()
    for i, date in enumerate(future_dates):
        last_row.update({
            'year': date.year, 'month': date.month, 'dayofweek': date.dayofweek,
            'quarter': date.quarter, 'is_weekend': 1 if date.dayofweek >= 5 else 0
        })
        pred = max(0, model.predict([last_row[feature_cols]])[0])
        forecast_data.append({'ds': date, 'yhat': pred})
        if i < periods - 1:
            last_row['Qty_lag_30'] = last_row['Qty_lag_7'] if i >= 23 else last_row['Qty_lag_30']
            last_row['Qty_lag_7'] = last_row['Qty_lag_1'] if i >= 6 else last_row['Qty_lag_7']
            last_row['Qty_lag_1'] = pred
            if i >= 6:
                last_row['Qty_ma_7'] = (last_row['Qty_ma_7'] * 6 + pred) / 7
            if i >= 29:
                last_row['Qty_ma_30'] = (last_row['Qty_ma_30'] * 29 + pred) / 30
    return model, pd.DataFrame(forecast_data)

def calculate_segment_volatility(df, selected_magazin, selected_segment):
    filtered = df.copy()
    if selected_magazin != '–í—Å–µ':
        filtered = filtered[filtered['Magazin'] == selected_magazin]
    if selected_segment != '–í—Å–µ':
        filtered = filtered[filtered['Segment'] == selected_segment]
    daily_sales = filtered.groupby('Datasales')['Qty'].sum()
    if len(daily_sales) < 2:
        return 0.2
    volatility = daily_sales.std() / daily_sales.mean() if daily_sales.mean() > 0 else 0.2
    return max(0.1, min(0.5, volatility))

def get_forecast_scenarios(forecast, model_type, segment_volatility=0.2):
    realistic = forecast['yhat'].values
    if model_type == 'Prophet' and 'yhat_lower' in forecast.columns and 'yhat_upper' in forecast.columns:
        optimistic = forecast['yhat_upper'].values
        pessimistic = forecast['yhat_lower'].values
    else:
        pessimistic = realistic * (1 - segment_volatility)
        optimistic = realistic * (1 + segment_volatility * 0.7)
    return realistic, optimistic, np.maximum(pessimistic, 0)

def get_top_models_by_segment(df, selected_magazin):
    if selected_magazin != '–í—Å–µ':
        df = df[df['Magazin'] == selected_magazin]
    segments_top_models = {}
    for segment in df['Segment'].unique():
        segment_data = df[df['Segment'] == segment]
        model_stats = segment_data.groupby('Model').agg({
            'Qty': 'sum',
            'Sum': 'sum',
            'Price': 'mean'
        }).reset_index()
        top_models = model_stats.nlargest(10, 'Qty')
        top_models['Price'] = top_models['Price'].round(0)
        top_models['Qty'] = top_models['Qty'].astype(int)
        top_models['Sum'] = top_models['Sum'].round(0)
        segments_top_models[segment] = top_models
    return segments_top_models

def show_forecast_statistics(filtered_df, forecast, forecast_days, selected_magazin, selected_segment, model_type, df):
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞")
    historical_data = filtered_df.groupby('Datasales')['Qty'].sum().reset_index()
    
    if len(historical_data) >= forecast_days:
        hist_qty = historical_data.tail(forecast_days)['Qty'].sum()
        period_start = historical_data.tail(forecast_days)['Datasales'].min().date()
        period_end = historical_data.tail(forecast_days)['Datasales'].max().date()
    else:
        daily_avg = historical_data['Qty'].mean() if len(historical_data) > 0 else 0
        hist_qty = daily_avg * forecast_days
        period_start = historical_data['Datasales'].min().date() if len(historical_data) > 0 else "N/A"
        period_end = historical_data['Datasales'].max().date() if len(historical_data) > 0 else "N/A"

    avg_price = filtered_df['Price'].mean()
    hist_sum = hist_qty * avg_price
    segment_volatility = calculate_segment_volatility(df, selected_magazin, selected_segment)
    forecast_period = forecast.tail(forecast_days) if len(forecast) > forecast_days else forecast
    realistic, optimistic, pessimistic = get_forecast_scenarios(forecast_period, model_type, segment_volatility)
    realistic_qty, optimistic_qty, pessimistic_qty = realistic.sum(), optimistic.sum(), pessimistic.sum()
    realistic_sum, optimistic_sum, pessimistic_sum = realistic_qty * avg_price, optimistic_qty * avg_price, pessimistic_qty * avg_price

    col1, col2 = st.columns(2)
    with col1:
        st.markdown("### üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (—à—Ç.)")
        qty_data = pd.DataFrame({
            '–°—Ü–µ–Ω–∞—Ä–∏–π': ['–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π', '–ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π', '–†–µ–∞–ª—å–Ω—ã–π', '–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π'],
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': [int(hist_qty), int(pessimistic_qty), int(realistic_qty), int(optimistic_qty)],
            '–ò–∑–º–µ–Ω–µ–Ω–∏–µ': ['-'] + [f"{((qty/hist_qty - 1) * 100):+.1f}%" if hist_qty > 0 else '-' 
                                 for qty in [pessimistic_qty, realistic_qty, optimistic_qty]]
        })
        st.dataframe(qty_data, hide_index=True)
    
    with col2:
        st.markdown("### üí∞ –°—É–º–º–∞ (–ì–†–ù.)")
        sum_data = pd.DataFrame({
            '–°—Ü–µ–Ω–∞—Ä–∏–π': ['–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π', '–ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π', '–†–µ–∞–ª—å–Ω—ã–π', '–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π'],
            '–°—É–º–º–∞': [f"{hist_sum:,.0f}", f"{pessimistic_sum:,.0f}", f"{realistic_sum:,.0f}", f"{optimistic_sum:,.0f}"],
            '–ò–∑–º–µ–Ω–µ–Ω–∏–µ': ['-'] + [f"{((sum_val/hist_sum - 1) * 100):+.1f}%" if hist_sum > 0 else '-' 
                                 for sum_val in [pessimistic_sum, realistic_sum, optimistic_sum]]
        })
        st.dataframe(sum_data, hide_index=True)
    
    st.info(f"üìä **–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞**: {segment_volatility:.1%}")
    st.info(f"üìÖ **–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥**: {period_start} - {period_end} ({forecast_days} –¥–Ω–µ–π)")
    st.markdown(f"**–§–∏–ª—å—Ç—Ä—ã:** –ú–∞–≥–∞–∑–∏–Ω: {selected_magazin}, –°–µ–≥–º–µ–Ω—Ç: {selected_segment}, –ü–µ—Ä–∏–æ–¥: {forecast_days} –¥–Ω–µ–π")

def generate_insights_for_magazin(df, forecast_data, model_type, selected_magazin):
    insights = []
    problems = []
    if selected_magazin != '–í—Å–µ':
        magazin_df = df[df['Magazin'] == selected_magazin]
    else:
        magazin_df = df
    magazin_prophet_data = prepare_prophet_data(magazin_df)
    if len(magazin_prophet_data) >= 30:
        recent_data = magazin_prophet_data.tail(30)['y'].mean()
        older_data = magazin_prophet_data.iloc[-60:-30]['y'].mean() if len(magazin_prophet_data) >= 60 else recent_data
        if recent_data > older_data * 1.1:
            insights.append("üìà **–†–û–°–¢ –ü–†–û–î–ê–ñ**: –ù–∞–±–ª—é–¥–∞–µ—Ç—Å—è —Ä–æ—Å—Ç –ø—Ä–æ–¥–∞–∂ –Ω–∞ 10%+. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å –∑–∞–∫—É–ø–∫–∏.")
    if len(magazin_prophet_data) > 1:
        volatility = magazin_prophet_data['y'].std() / magazin_prophet_data['y'].mean() if magazin_prophet_data['y'].mean() > 0 else 0
        if volatility > 0.5:
            insights.append("‚ö†Ô∏è **–í–´–°–û–ö–ê–Ø –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–¨**: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤—ã–µ –∑–∞–ø–∞—Å—ã.")
            problems.append("‚ö†Ô∏è **–ü–†–û–ë–õ–ï–ú–ê**: –í—ã—Å–æ–∫–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        elif volatility < 0.1:
            insights.append("‚úÖ **–°–¢–ê–ë–ò–õ–¨–ù–´–ï –ü–†–û–î–ê–ñ–ò**: –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ç–æ—á–Ω–µ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.")
    if len(forecast_data) > 14:
        forecast_start = forecast_data.iloc[:7]['yhat'].mean()
        forecast_end = forecast_data.iloc[-7:]['yhat'].mean()
        forecast_trend = forecast_end / forecast_start if forecast_start > 0 else 1
        if forecast_trend > 1.05:
            insights.append("üöÄ **–ü–†–û–ì–ù–û–ó –†–û–°–¢–ê**: –û–∂–∏–¥–∞–µ—Ç—Å—è —Ä–æ—Å—Ç –ø—Ä–æ–¥–∞–∂. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—é —Å–ø—Ä–æ—Å–∞.")
        elif forecast_trend < 0.95:
            insights.append("‚¨áÔ∏è **–ü–†–û–ì–ù–û–ó –°–ù–ò–ñ–ï–ù–ò–Ø**: –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–æ–º–æ-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
            problems.append("üìâ **–ë–£–î–£–©–ê–Ø –ü–†–û–ë–õ–ï–ú–ê**: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç—Å—è —Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂")
    if not insights:
        insights.append("üìä **–ú–û–ù–ò–¢–û–†–ò–ù–ì**: –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ–∫–∞–∑–µ—Ç–µ–ª–∏ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤.")
    return insights, problems

def plot_forecast(df, forecast, model_type, title):
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=df['ds'], y=df['y'], mode='lines+markers', name='–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ', line=dict(color='#00BFFF', width=2), marker=dict(size=4)))
    fig.add_trace(go.Scatter(x=forecast['ds'], y=forecast['yhat'], mode='lines', name='–ü—Ä–æ–≥–Ω–æ–∑', line=dict(color='#FF4500', dash='dash', width=3)))
    if model_type == 'Prophet' and 'yhat_lower' in forecast.columns:
        fig.add_trace(go.Scatter(x=forecast['ds'], y=forecast['yhat_upper'], fill=None, mode='lines', line_color='rgba(0,0,0,0)', showlegend=False))
        fig.add_trace(go.Scatter(x=forecast['ds'], y=forecast['yhat_lower'], fill='tonexty', mode='lines', line_color='rgba(0,0,0,0)', name='–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª', fillcolor='rgba(255, 69, 0, 0.2)'))
    fig.update_layout(
        title=title, 
        xaxis_title='–î–∞—Ç–∞', 
        yaxis_title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 
        hovermode='x unified',
        template='plotly_dark',
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
    )
    return fig

def plot_prophet_components(model, forecast):
    from prophet.plot import plot_components_plotly
    fig = plot_components_plotly(model, forecast)
    fig.update_layout(template='plotly_dark')
    return fig

def plot_prophet_seasonality(forecast):
    fig = go.Figure()
    if 'weekly' in forecast.columns:
        fig.add_trace(go.Scatter(x=forecast['ds'], y=forecast['weekly'], mode='lines', name='–ù–µ–¥–µ–ª—å–Ω–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å', line=dict(color='#00FF7F')))
    if 'yearly' in forecast.columns:
        fig.add_trace(go.Scatter(x=forecast['ds'], y=forecast['yearly'], mode='lines', name='–ì–æ–¥–æ–≤–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å', line=dict(color='#FFD700')))
    fig.update_layout(title='–ö–æ–º–ø–æ–Ω–µ—Ç—ã —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ Prophet', xaxis_title='–î–∞—Ç–∞', yaxis_title='–í–ª–∏—è–Ω–∏–µ', hovermode='x unified', template='plotly_dark')
    return fig

def plot_monthly_revenue_by_segment(df, selected_magazin, selected_segment):
    filtered_df = df.copy()
    if selected_magazin != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['Magazin'] == selected_magazin]
    if selected_segment != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['Segment'] == selected_segment]
    
    filtered_df['year_month'] = filtered_df['Datasales'].dt.to_period('M')
    monthly_revenue = filtered_df.groupby('year_month')['Sum'].sum().reset_index()
    monthly_revenue['year_month'] = monthly_revenue['year_month'].astype(str)
    
    fig = px.bar(monthly_revenue, x='year_month', y='Sum', 
                title=f'–ü—Ä–æ–¥–∞–∂–∏ –≤ –¥–µ–Ω—å–≥–∞—Ö –ø–æ –º–µ—Å—è—Ü–∞–º - {selected_segment}',
                labels={'year_month': '–ú–µ—Å—è—Ü', 'Sum': '–í—ã—Ä—É—á–∫–∞ (–ì–†–ù.)'},
                text='Sum', color='Sum', color_continuous_scale=px.colors.sequential.Viridis)
    
    fig.update_traces(texttemplate='%{text:,.0f}', textposition='outside')
    fig.update_layout(xaxis_title='–ú–µ—Å—è—Ü', yaxis_title='–í—ã—Ä—É—á–∫–∞ (–ì–†–ù.)', hovermode='x unified', template='plotly_dark')
    return fig

# --- –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
st.title("üè™ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂")
st.sidebar.header("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
uploaded_file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª", type=['xlsx', 'xls'])

if uploaded_file:
    df = load_and_validate_data(uploaded_file)
    if df is not None:
        show_data_statistics(df)
        
        selected_magazin = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω", ['–í—Å–µ'] + list(df['Magazin'].unique()))
        selected_segment = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç", ['–í—Å–µ'] + list(df['Segment'].unique()))
        model_type = st.sidebar.selectbox("–ú–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è", ['Prophet', 'CatBoost'])
        forecast_days = st.sidebar.selectbox("–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞", [7, 14, 30])
        
        if st.sidebar.button("üîÆ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", type="primary"):
            filtered_df = df.copy()
            if selected_magazin != '–í—Å–µ':
                filtered_df = filtered_df[filtered_df['Magazin'] == selected_magazin]
            if selected_segment != '–í—Å–µ':
                filtered_df = filtered_df[filtered_df['Segment'] == selected_segment]
            
            if len(filtered_df) < 10:
                st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è (–º–∏–Ω–∏–º—É–º 10 –∑–∞–ø–∏—Å–µ–π)")
            else:
                with st.spinner(f'–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ {model_type}...'):
                    try:
                        if model_type == 'Prophet':
                            prophet_data = prepare_prophet_data(filtered_df)
                            model, forecast = train_prophet_model(prophet_data, periods=forecast_days)
                        else:
                            catboost_data = prepare_catboost_data(filtered_df) 
                            model, forecast = train_catboost_model(catboost_data, periods=forecast_days)
                            prophet_data = prepare_prophet_data(filtered_df)
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
                        st.stop()
                
                show_forecast_statistics(filtered_df, forecast, forecast_days, selected_magazin, selected_segment, model_type, df)
                
                st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏")
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("–ú–æ–¥–µ–ª—å", model_type)
                with col2:
                    st.metric("–¢–∏–ø –º–æ–¥–µ–ª–∏", "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ" if model_type == 'CatBoost' else "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã")
                
                st.subheader("üìä –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂")
                fig = plot_forecast(prophet_data, forecast, model_type, f"–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ - {model_type}")
                st.plotly_chart(fig, use_container_width=True)
                
                # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                tab1, tab2, tab3 = st.tabs(["–ê–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–∏", "–ü–æ–º–µ—Å—è—á–Ω–∞—è –≤—ã—Ä—É—á–∫–∞", "–¢–æ–ø-10 –º–æ–¥–µ–ª–µ–π"])

                with tab1:
                    st.subheader("üîç –ê–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–∏")
                    if model_type == 'Prophet':
                        fig_components = plot_prophet_components(model, forecast)
                        st.plotly_chart(fig_components, use_container_width=True)
                        fig_seasonality = plot_prophet_seasonality(forecast)
                        st.plotly_chart(fig_seasonality, use_container_width=True)
                        fig_trend = px.line(forecast, x='ds', y='trend', title='–¢—Ä–µ–Ω–¥ –ø—Ä–æ–¥–∞–∂', template='plotly_dark')
                        st.plotly_chart(fig_trend, use_container_width=True)
                    else:
                        st.info("–ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ–ª–∏ Prophet.")

                with tab2:
                    fig_monthly = plot_monthly_revenue_by_segment(df, selected_magazin, selected_segment)
                    st.plotly_chart(fig_monthly, use_container_width=True)
                
                with tab3:
                    st.subheader("üèÜ –¢–æ–ø-10 –º–æ–¥–µ–ª–µ–π –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º")
                    segments_top_models = get_top_models_by_segment(df, selected_magazin)
                    for segment, top_models in segments_top_models.items():
                        with st.expander(f"üì¶ –°–µ–≥–º–µ–Ω—Ç: {segment}"):
                            if not top_models.empty:
                                st.dataframe(
                                    top_models[['Model', 'Qty', 'Sum', 'Price']].rename(columns={
                                        'Model': '–ú–æ–¥–µ–ª—å', 'Qty': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'Sum': '–°—É–º–º–∞', 'Price': '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞'
                                    }), hide_index=True)
                            else:
                                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞")
                
                st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑")
                col1, col2 = st.columns(2)
                with col1:
                    st.markdown(f"**–ê–Ω–∞–ª–∏–∑ –¥–ª—è: {selected_magazin if selected_magazin != '–í—Å–µ' else '–≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤'}**")
                    insights, problems = generate_insights_for_magazin(df, forecast, model_type, selected_magazin)
                    if problems:
                        st.markdown("### üö® –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
                        for problem in problems:
                            st.error(problem)
                    st.markdown("### üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                    for insight in insights:
                        st.success(insight)
                
                with col2:
                    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –¥–Ω—è–º")
                    forecast_display = forecast.tail(forecast_days).copy()
                    segment_volatility = calculate_segment_volatility(df, selected_magazin, selected_segment)
                    realistic, optimistic, pessimistic = get_forecast_scenarios(forecast_display, model_type, segment_volatility)
                    forecast_display = pd.DataFrame({
                        '–î–∞—Ç–∞': pd.to_datetime(forecast_display['ds']).dt.date,
                        '–ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π': pessimistic.round(0).astype(int),
                        '–†–µ–∞–ª—å–Ω—ã–π': realistic.round(0).astype(int),
                        '–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π': optimistic.round(0).astype(int)
                    })
                    st.dataframe(forecast_display, hide_index=True)

else:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
    st.subheader("üìã –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
    st.markdown("""
    **–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:**
    - `Magazin` - –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    - `Datasales` - –¥–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏  
    - `Art` - –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞
    - `Describe` - –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    - `Model` - –º–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–∞
    - `Segment` - —Å–µ–≥–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–∞
    - `Price` - —Ü–µ–Ω–∞
    - `Qty` - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    - `Sum` - —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏
    
    **–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:**
    - **Prophet** - —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
    - **CatBoost** - –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
    """)
